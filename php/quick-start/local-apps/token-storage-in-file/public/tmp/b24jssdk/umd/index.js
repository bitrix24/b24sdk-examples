/**
 * @version @bitrix24/b24jssdk v0.1.0
 * @copyright (c) 2024 Bitrix24
 * @licence MIT
 * @links https://github.com/bitrix24/b24jssdk - GitHub
 * @links https://bitrix24.github.io/b24jssdk/ - Documentation
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.B24Js = global.B24Js || {}));
})(this, (function (exports) { 'use strict';

	var LoggerType = /* @__PURE__ */ ((LoggerType2) => {
	  LoggerType2["desktop"] = "desktop";
	  LoggerType2["log"] = "log";
	  LoggerType2["info"] = "info";
	  LoggerType2["warn"] = "warn";
	  LoggerType2["error"] = "error";
	  LoggerType2["trace"] = "trace";
	  return LoggerType2;
	})(LoggerType || {});
	const styleCollection = /* @__PURE__ */ new Map();
	styleCollection.set(
	  "title",
	  [
	    "%c#title#",
	    "color: #959ca4; font-style: italic; padding: 0 6px; border-top: 1px solid #ccc; border-left: 1px solid #ccc; border-bottom: 1px solid #ccc"
	  ]
	);
	styleCollection.set(
	  "desktop" /* desktop */,
	  [
	    `%cDESKTOP`,
	    "color: white; font-style: italic; background-color: #29619b; padding: 0 6px; border: 1px solid #29619b"
	  ]
	);
	styleCollection.set(
	  "log" /* log */,
	  [
	    `%cLOG`,
	    "color: #2a323b; font-style: italic; background-color: #ccc; padding: 0 6px; border: 1px solid #ccc"
	  ]
	);
	styleCollection.set(
	  "info" /* info */,
	  [
	    `%cINFO`,
	    "color: #fff; font-style: italic; background-color: #6b7f96; padding: 0 6px; border: 1px solid #6b7f96"
	  ]
	);
	styleCollection.set(
	  "warn" /* warn */,
	  [
	    `%cWARNING`,
	    "color: #f0a74f; font-style: italic; padding: 0 6px; border: 1px solid #f0a74f"
	  ]
	);
	styleCollection.set(
	  "error" /* error */,
	  [
	    `%cERROR`,
	    "color: white; font-style: italic; background-color: #8a3232; padding: 0 6px; border: 1px solid #8a3232"
	  ]
	);
	styleCollection.set(
	  "trace" /* trace */,
	  [
	    `%cTRACE`,
	    "color: #2a323b; font-style: italic; background-color: #ccc; padding: 0 6px; border: 1px solid #ccc"
	  ]
	);
	class LoggerBrowser {
	  #title;
	  #types = {
	    desktop: true,
	    log: false,
	    info: false,
	    warn: false,
	    error: true,
	    trace: true
	  };
	  static build(title, isDevelopment = false) {
	    const logger = new LoggerBrowser(title);
	    if (isDevelopment) {
	      logger.enable("log" /* log */);
	      logger.enable("info" /* info */);
	      logger.enable("warn" /* warn */);
	    }
	    return logger;
	  }
	  constructor(title) {
	    this.#title = title;
	  }
	  // region Styles ////
	  #getStyle(type) {
	    const resultText = [];
	    const resultStyle = [];
	    if (styleCollection.has("title")) {
	      const styleTitle = styleCollection.get("title");
	      if (styleTitle[0]) {
	        resultText.push(styleTitle[0].replace("#title#", this.#title));
	        resultStyle.push(styleTitle[1] || "");
	      }
	    }
	    if (styleCollection.has(type)) {
	      const styleBadge = styleCollection.get(type);
	      if (styleBadge[0]) {
	        resultText.push(styleBadge[0]);
	        resultStyle.push(styleBadge[1] || "");
	      }
	    }
	    return [resultText.join(""), ...resultStyle];
	  }
	  // endregion ////
	  // region Config ////
	  setConfig(types) {
	    for (const type in types) {
	      this.#types[type] = types[type];
	    }
	  }
	  enable(type) {
	    if (typeof this.#types[type] === "undefined") {
	      return false;
	    }
	    this.#types[type] = true;
	    return true;
	  }
	  disable(type) {
	    if (typeof this.#types[type] === "undefined") {
	      return false;
	    }
	    this.#types[type] = false;
	    return true;
	  }
	  isEnabled(type) {
	    return this.#types[type];
	  }
	  // endregion ////
	  // region Functions ////
	  desktop(...params) {
	    if (this.isEnabled("desktop" /* desktop */)) {
	      console.log(...[...this.#getStyle("desktop" /* desktop */), ...params]);
	    }
	  }
	  log(...params) {
	    if (this.isEnabled("log" /* log */)) {
	      console.log(...[...this.#getStyle("log" /* log */), ...params]);
	    }
	  }
	  info(...params) {
	    if (this.isEnabled("info" /* info */)) {
	      console.info(...[...this.#getStyle("info" /* info */), ...params]);
	    }
	  }
	  warn(...params) {
	    if (this.isEnabled("warn" /* warn */)) {
	      console.warn(...[...this.#getStyle("warn" /* warn */), ...params]);
	    }
	  }
	  error(...params) {
	    if (this.isEnabled("error" /* error */)) {
	      console.error(...[...this.#getStyle("error" /* error */), ...params]);
	    }
	  }
	  trace(...params) {
	    if (this.isEnabled("trace" /* trace */)) {
	      console.trace(...[...this.#getStyle("trace" /* trace */), ...params]);
	    }
	  }
	  // endregion ////
	}

	var DataType = /* @__PURE__ */ ((DataType2) => {
	  DataType2["undefined"] = "undefined";
	  DataType2["any"] = "any";
	  DataType2["integer"] = "integer";
	  DataType2["boolean"] = "boolean";
	  DataType2["double"] = "double";
	  DataType2["date"] = "date";
	  DataType2["datetime"] = "datetime";
	  DataType2["string"] = "string";
	  DataType2["text"] = "text";
	  DataType2["file"] = "file";
	  DataType2["array"] = "array";
	  DataType2["object"] = "object";
	  DataType2["user"] = "user";
	  DataType2["location"] = "location";
	  DataType2["crmCategory"] = "crm_category";
	  DataType2["crmStatus"] = "crm_status";
	  DataType2["crmCurrency"] = "crm_currency";
	  return DataType2;
	})(DataType || {});

	const objectCtorString = Function.prototype.toString.call(Object);
	class TypeManager {
	  getTag(value) {
	    return Object.prototype.toString.call(value);
	  }
	  /**
	   * Checks that value is string
	   * @param value
	   * @return {boolean}
	   *
	   * @memo get from pull.client.Utils
	   */
	  isString(value) {
	    return value === "" ? true : value ? typeof value === "string" || value instanceof String : false;
	  }
	  /**
	   * Returns true if a value is not empty string
	   * @param value
	   * @returns {boolean}
	   */
	  isStringFilled(value) {
	    return this.isString(value) && value !== "";
	  }
	  /**
	   * Checks that value is function
	   * @param value
	   * @return {boolean}
	   *
	   * @memo get from pull.client.Utils
	   */
	  isFunction(value) {
	    return value === null ? false : typeof value === "function" || value instanceof Function;
	  }
	  /**
	   * Checks that value is object
	   * @param value
	   * @return {boolean}
	   */
	  isObject(value) {
	    return !!value && (typeof value === "object" || typeof value === "function");
	  }
	  /**
	   * Checks that value is object like
	   * @param value
	   * @return {boolean}
	   */
	  isObjectLike(value) {
	    return !!value && typeof value === "object";
	  }
	  /**
	   * Checks that value is plain object
	   * @param value
	   * @return {boolean}
	   */
	  isPlainObject(value) {
	    if (!this.isObjectLike(value) || this.getTag(value) !== "[object Object]") {
	      return false;
	    }
	    const proto = Object.getPrototypeOf(value);
	    if (proto === null) {
	      return true;
	    }
	    const ctor = proto.hasOwnProperty("constructor") && proto.constructor;
	    return typeof ctor === "function" && Function.prototype.toString.call(ctor) === objectCtorString;
	  }
	  isJsonRpcRequest(value) {
	    return typeof value === "object" && value && "jsonrpc" in value && this.isStringFilled(value.jsonrpc) && "method" in value && this.isStringFilled(value.method);
	  }
	  isJsonRpcResponse(value) {
	    return typeof value === "object" && value && "jsonrpc" in value && this.isStringFilled(value.jsonrpc) && "id" in value && ("result" in value || "error" in value);
	  }
	  /**
	   * Checks that value is boolean
	   * @param value
	   * @return {boolean}
	   */
	  isBoolean(value) {
	    return value === true || value === false;
	  }
	  /**
	   * Checks that value is number
	   * @param value
	   * @return {boolean}
	   */
	  isNumber(value) {
	    return !Number.isNaN(value) && typeof value === "number";
	  }
	  /**
	   * Checks that value is integer
	   * @param value
	   * @return {boolean}
	   */
	  isInteger(value) {
	    return this.isNumber(value) && value % 1 === 0;
	  }
	  /**
	   * Checks that value is float
	   * @param value
	   * @return {boolean}
	   */
	  isFloat(value) {
	    return this.isNumber(value) && !this.isInteger(value);
	  }
	  /**
	   * Checks that value is nil
	   * @param value
	   * @return {boolean}
	   */
	  isNil(value) {
	    return value === null || value === void 0;
	  }
	  /**
	   * Checks that value is array
	   * @param value
	   * @return {boolean}
	   */
	  isArray(value) {
	    return !this.isNil(value) && Array.isArray(value);
	  }
	  /**
	   * Returns true if a value is an array, and it has at least one element
	   * @param value
	   * @returns {boolean}
	   */
	  isArrayFilled(value) {
	    return this.isArray(value) && value.length > 0;
	  }
	  /**
	   * Checks that value is array like
	   * @param value
	   * @return {boolean}
	   */
	  isArrayLike(value) {
	    return !this.isNil(value) && !this.isFunction(value) && value.length > -1 && value.length <= Number.MAX_SAFE_INTEGER;
	  }
	  /**
	   * Checks that value is Date
	   * @param value
	   * @return {boolean}
	   */
	  isDate(value) {
	    return this.isObjectLike(value) && this.getTag(value) === "[object Date]";
	  }
	  /**
	   * Checks that is DOM node
	   * @param value
	   * @return {boolean}
	   */
	  isDomNode(value) {
	    return this.isObjectLike(value) && !this.isPlainObject(value) && "nodeType" in value;
	  }
	  /**
	   * Checks that value is element node
	   * @param value
	   * @return {boolean}
	   */
	  isElementNode(value) {
	    return this.isDomNode(value) && value.nodeType === Node.ELEMENT_NODE;
	  }
	  /**
	   * Checks that value is text node
	   * @param value
	   * @return {boolean}
	   */
	  isTextNode(value) {
	    return this.isDomNode(value) && value.nodeType === Node.TEXT_NODE;
	  }
	  /**
	   * Checks that value is Map
	   * @param value
	   * @return {boolean}
	   */
	  isMap(value) {
	    return this.isObjectLike(value) && this.getTag(value) === "[object Map]";
	  }
	  /**
	   * Checks that value is Set
	   * @param value
	   * @return {boolean}
	   */
	  isSet(value) {
	    return this.isObjectLike(value) && this.getTag(value) === "[object Set]";
	  }
	  /**
	   * Checks that value is WeakMap
	   * @param value
	   * @return {boolean}
	   */
	  isWeakMap(value) {
	    return this.isObjectLike(value) && this.getTag(value) === "[object WeakMap]";
	  }
	  /**
	   * Checks that value is WeakSet
	   * @param value
	   * @return {boolean}
	   */
	  isWeakSet(value) {
	    return this.isObjectLike(value) && this.getTag(value) === "[object WeakSet]";
	  }
	  /**
	   * Checks that value is prototype
	   * @param value
	   * @return {boolean}
	   */
	  isPrototype(value) {
	    return (typeof (value && value.constructor) === "function" && value.constructor.prototype || Object.prototype) === value;
	  }
	  /**
	   * Checks that value is regexp
	   * @param value
	   * @return {boolean}
	   */
	  isRegExp(value) {
	    return this.isObjectLike(value) && this.getTag(value) === "[object RegExp]";
	  }
	  /**
	   * Checks that value is null
	   * @param value
	   * @return {boolean}
	   */
	  isNull(value) {
	    return value === null;
	  }
	  /**
	   * Checks that value is undefined
	   * @param value
	   * @return {boolean}
	   */
	  isUndefined(value) {
	    return typeof value === "undefined";
	  }
	  /**
	   * Checks that value is ArrayBuffer
	   * @param value
	   * @return {boolean}
	   */
	  isArrayBuffer(value) {
	    return this.isObjectLike(value) && this.getTag(value) === "[object ArrayBuffer]";
	  }
	  /**
	   * Checks that value is typed array
	   * @param value
	   * @return {boolean}
	   */
	  isTypedArray(value) {
	    const regExpTypedTag = /^\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)]$/;
	    return this.isObjectLike(value) && regExpTypedTag.test(this.getTag(value));
	  }
	  /**
	   * Checks that value is Blob
	   * @param value
	   * @return {boolean}
	   */
	  isBlob(value) {
	    return this.isObjectLike(value) && this.isNumber(value.size) && this.isString(value.type) && this.isFunction(value.slice);
	  }
	  /**
	   * Checks that value is File
	   * @param value
	   * @return {boolean}
	   */
	  isFile(value) {
	    return this.isBlob(value) && this.isString(value.name) && (this.isNumber(value.lastModified) || this.isObjectLike(value.lastModifiedDate));
	  }
	  /**
	   * Checks that value is FormData
	   * @param value
	   * @return {boolean}
	   */
	  isFormData(value) {
	    return value instanceof FormData;
	  }
	  clone(obj, bCopyObj = true) {
	    let _obj, i, l;
	    if (obj === null) {
	      return null;
	    }
	    if (this.isDomNode(obj)) {
	      _obj = obj.cloneNode(bCopyObj);
	    } else if (typeof obj == "object") {
	      if (this.isArray(obj)) {
	        _obj = [];
	        for (i = 0, l = obj.length; i < l; i++) {
	          if (typeof obj[i] == "object" && bCopyObj) {
	            _obj[i] = this.clone(obj[i], bCopyObj);
	          } else {
	            _obj[i] = obj[i];
	          }
	        }
	      } else {
	        _obj = {};
	        if (obj.constructor) {
	          if (this.isDate(obj)) {
	            _obj = new Date(obj);
	          } else {
	            _obj = new obj.constructor();
	          }
	        }
	        for (i in obj) {
	          if (!obj.hasOwnProperty(i)) {
	            continue;
	          }
	          if (typeof obj[i] === "object" && bCopyObj) {
	            _obj[i] = this.clone(obj[i], bCopyObj);
	          } else {
	            _obj[i] = obj[i];
	          }
	        }
	      }
	    } else {
	      _obj = obj;
	    }
	    return _obj;
	  }
	}
	const Type = new TypeManager();

	// these aren't really private, but nor are they really useful to document

	/**
	 * @private
	 */
	class LuxonError extends Error {}

	/**
	 * @private
	 */
	class InvalidDateTimeError extends LuxonError {
	  constructor(reason) {
	    super(`Invalid DateTime: ${reason.toMessage()}`);
	  }
	}

	/**
	 * @private
	 */
	class InvalidIntervalError extends LuxonError {
	  constructor(reason) {
	    super(`Invalid Interval: ${reason.toMessage()}`);
	  }
	}

	/**
	 * @private
	 */
	class InvalidDurationError extends LuxonError {
	  constructor(reason) {
	    super(`Invalid Duration: ${reason.toMessage()}`);
	  }
	}

	/**
	 * @private
	 */
	class ConflictingSpecificationError extends LuxonError {}

	/**
	 * @private
	 */
	class InvalidUnitError extends LuxonError {
	  constructor(unit) {
	    super(`Invalid unit ${unit}`);
	  }
	}

	/**
	 * @private
	 */
	class InvalidArgumentError extends LuxonError {}

	/**
	 * @private
	 */
	class ZoneIsAbstractError extends LuxonError {
	  constructor() {
	    super("Zone is an abstract class");
	  }
	}

	/**
	 * @private
	 */

	const n = "numeric",
	  s = "short",
	  l = "long";

	const DATE_SHORT = {
	  year: n,
	  month: n,
	  day: n,
	};

	const DATE_MED = {
	  year: n,
	  month: s,
	  day: n,
	};

	const DATE_MED_WITH_WEEKDAY = {
	  year: n,
	  month: s,
	  day: n,
	  weekday: s,
	};

	const DATE_FULL = {
	  year: n,
	  month: l,
	  day: n,
	};

	const DATE_HUGE = {
	  year: n,
	  month: l,
	  day: n,
	  weekday: l,
	};

	const TIME_SIMPLE = {
	  hour: n,
	  minute: n,
	};

	const TIME_WITH_SECONDS = {
	  hour: n,
	  minute: n,
	  second: n,
	};

	const TIME_WITH_SHORT_OFFSET = {
	  hour: n,
	  minute: n,
	  second: n,
	  timeZoneName: s,
	};

	const TIME_WITH_LONG_OFFSET = {
	  hour: n,
	  minute: n,
	  second: n,
	  timeZoneName: l,
	};

	const TIME_24_SIMPLE = {
	  hour: n,
	  minute: n,
	  hourCycle: "h23",
	};

	const TIME_24_WITH_SECONDS = {
	  hour: n,
	  minute: n,
	  second: n,
	  hourCycle: "h23",
	};

	const TIME_24_WITH_SHORT_OFFSET = {
	  hour: n,
	  minute: n,
	  second: n,
	  hourCycle: "h23",
	  timeZoneName: s,
	};

	const TIME_24_WITH_LONG_OFFSET = {
	  hour: n,
	  minute: n,
	  second: n,
	  hourCycle: "h23",
	  timeZoneName: l,
	};

	const DATETIME_SHORT = {
	  year: n,
	  month: n,
	  day: n,
	  hour: n,
	  minute: n,
	};

	const DATETIME_SHORT_WITH_SECONDS = {
	  year: n,
	  month: n,
	  day: n,
	  hour: n,
	  minute: n,
	  second: n,
	};

	const DATETIME_MED = {
	  year: n,
	  month: s,
	  day: n,
	  hour: n,
	  minute: n,
	};

	const DATETIME_MED_WITH_SECONDS = {
	  year: n,
	  month: s,
	  day: n,
	  hour: n,
	  minute: n,
	  second: n,
	};

	const DATETIME_MED_WITH_WEEKDAY = {
	  year: n,
	  month: s,
	  day: n,
	  weekday: s,
	  hour: n,
	  minute: n,
	};

	const DATETIME_FULL = {
	  year: n,
	  month: l,
	  day: n,
	  hour: n,
	  minute: n,
	  timeZoneName: s,
	};

	const DATETIME_FULL_WITH_SECONDS = {
	  year: n,
	  month: l,
	  day: n,
	  hour: n,
	  minute: n,
	  second: n,
	  timeZoneName: s,
	};

	const DATETIME_HUGE = {
	  year: n,
	  month: l,
	  day: n,
	  weekday: l,
	  hour: n,
	  minute: n,
	  timeZoneName: l,
	};

	const DATETIME_HUGE_WITH_SECONDS = {
	  year: n,
	  month: l,
	  day: n,
	  weekday: l,
	  hour: n,
	  minute: n,
	  second: n,
	  timeZoneName: l,
	};

	/**
	 * @interface
	 */
	class Zone {
	  /**
	   * The type of zone
	   * @abstract
	   * @type {string}
	   */
	  get type() {
	    throw new ZoneIsAbstractError();
	  }

	  /**
	   * The name of this zone.
	   * @abstract
	   * @type {string}
	   */
	  get name() {
	    throw new ZoneIsAbstractError();
	  }

	  /**
	   * The IANA name of this zone.
	   * Defaults to `name` if not overwritten by a subclass.
	   * @abstract
	   * @type {string}
	   */
	  get ianaName() {
	    return this.name;
	  }

	  /**
	   * Returns whether the offset is known to be fixed for the whole year.
	   * @abstract
	   * @type {boolean}
	   */
	  get isUniversal() {
	    throw new ZoneIsAbstractError();
	  }

	  /**
	   * Returns the offset's common name (such as EST) at the specified timestamp
	   * @abstract
	   * @param {number} ts - Epoch milliseconds for which to get the name
	   * @param {Object} opts - Options to affect the format
	   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
	   * @param {string} opts.locale - What locale to return the offset name in.
	   * @return {string}
	   */
	  offsetName(ts, opts) {
	    throw new ZoneIsAbstractError();
	  }

	  /**
	   * Returns the offset's value as a string
	   * @abstract
	   * @param {number} ts - Epoch milliseconds for which to get the offset
	   * @param {string} format - What style of offset to return.
	   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
	   * @return {string}
	   */
	  formatOffset(ts, format) {
	    throw new ZoneIsAbstractError();
	  }

	  /**
	   * Return the offset in minutes for this zone at the specified timestamp.
	   * @abstract
	   * @param {number} ts - Epoch milliseconds for which to compute the offset
	   * @return {number}
	   */
	  offset(ts) {
	    throw new ZoneIsAbstractError();
	  }

	  /**
	   * Return whether this Zone is equal to another zone
	   * @abstract
	   * @param {Zone} otherZone - the zone to compare
	   * @return {boolean}
	   */
	  equals(otherZone) {
	    throw new ZoneIsAbstractError();
	  }

	  /**
	   * Return whether this Zone is valid.
	   * @abstract
	   * @type {boolean}
	   */
	  get isValid() {
	    throw new ZoneIsAbstractError();
	  }
	}

	let singleton$1 = null;

	/**
	 * Represents the local zone for this JavaScript environment.
	 * @implements {Zone}
	 */
	class SystemZone extends Zone {
	  /**
	   * Get a singleton instance of the local zone
	   * @return {SystemZone}
	   */
	  static get instance() {
	    if (singleton$1 === null) {
	      singleton$1 = new SystemZone();
	    }
	    return singleton$1;
	  }

	  /** @override **/
	  get type() {
	    return "system";
	  }

	  /** @override **/
	  get name() {
	    return new Intl.DateTimeFormat().resolvedOptions().timeZone;
	  }

	  /** @override **/
	  get isUniversal() {
	    return false;
	  }

	  /** @override **/
	  offsetName(ts, { format, locale }) {
	    return parseZoneInfo(ts, format, locale);
	  }

	  /** @override **/
	  formatOffset(ts, format) {
	    return formatOffset(this.offset(ts), format);
	  }

	  /** @override **/
	  offset(ts) {
	    return -new Date(ts).getTimezoneOffset();
	  }

	  /** @override **/
	  equals(otherZone) {
	    return otherZone.type === "system";
	  }

	  /** @override **/
	  get isValid() {
	    return true;
	  }
	}

	let dtfCache = {};
	function makeDTF(zone) {
	  if (!dtfCache[zone]) {
	    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
	      hour12: false,
	      timeZone: zone,
	      year: "numeric",
	      month: "2-digit",
	      day: "2-digit",
	      hour: "2-digit",
	      minute: "2-digit",
	      second: "2-digit",
	      era: "short",
	    });
	  }
	  return dtfCache[zone];
	}

	const typeToPos = {
	  year: 0,
	  month: 1,
	  day: 2,
	  era: 3,
	  hour: 4,
	  minute: 5,
	  second: 6,
	};

	function hackyOffset(dtf, date) {
	  const formatted = dtf.format(date).replace(/\u200E/g, ""),
	    parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted),
	    [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
	  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
	}

	function partsOffset(dtf, date) {
	  const formatted = dtf.formatToParts(date);
	  const filled = [];
	  for (let i = 0; i < formatted.length; i++) {
	    const { type, value } = formatted[i];
	    const pos = typeToPos[type];

	    if (type === "era") {
	      filled[pos] = value;
	    } else if (!isUndefined$1(pos)) {
	      filled[pos] = parseInt(value, 10);
	    }
	  }
	  return filled;
	}

	let ianaZoneCache = {};
	/**
	 * A zone identified by an IANA identifier, like America/New_York
	 * @implements {Zone}
	 */
	class IANAZone extends Zone {
	  /**
	   * @param {string} name - Zone name
	   * @return {IANAZone}
	   */
	  static create(name) {
	    if (!ianaZoneCache[name]) {
	      ianaZoneCache[name] = new IANAZone(name);
	    }
	    return ianaZoneCache[name];
	  }

	  /**
	   * Reset local caches. Should only be necessary in testing scenarios.
	   * @return {void}
	   */
	  static resetCache() {
	    ianaZoneCache = {};
	    dtfCache = {};
	  }

	  /**
	   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
	   * @param {string} s - The string to check validity on
	   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
	   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
	   * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.
	   * @return {boolean}
	   */
	  static isValidSpecifier(s) {
	    return this.isValidZone(s);
	  }

	  /**
	   * Returns whether the provided string identifies a real zone
	   * @param {string} zone - The string to check
	   * @example IANAZone.isValidZone("America/New_York") //=> true
	   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
	   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
	   * @return {boolean}
	   */
	  static isValidZone(zone) {
	    if (!zone) {
	      return false;
	    }
	    try {
	      new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  constructor(name) {
	    super();
	    /** @private **/
	    this.zoneName = name;
	    /** @private **/
	    this.valid = IANAZone.isValidZone(name);
	  }

	  /**
	   * The type of zone. `iana` for all instances of `IANAZone`.
	   * @override
	   * @type {string}
	   */
	  get type() {
	    return "iana";
	  }

	  /**
	   * The name of this zone (i.e. the IANA zone name).
	   * @override
	   * @type {string}
	   */
	  get name() {
	    return this.zoneName;
	  }

	  /**
	   * Returns whether the offset is known to be fixed for the whole year:
	   * Always returns false for all IANA zones.
	   * @override
	   * @type {boolean}
	   */
	  get isUniversal() {
	    return false;
	  }

	  /**
	   * Returns the offset's common name (such as EST) at the specified timestamp
	   * @override
	   * @param {number} ts - Epoch milliseconds for which to get the name
	   * @param {Object} opts - Options to affect the format
	   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
	   * @param {string} opts.locale - What locale to return the offset name in.
	   * @return {string}
	   */
	  offsetName(ts, { format, locale }) {
	    return parseZoneInfo(ts, format, locale, this.name);
	  }

	  /**
	   * Returns the offset's value as a string
	   * @override
	   * @param {number} ts - Epoch milliseconds for which to get the offset
	   * @param {string} format - What style of offset to return.
	   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
	   * @return {string}
	   */
	  formatOffset(ts, format) {
	    return formatOffset(this.offset(ts), format);
	  }

	  /**
	   * Return the offset in minutes for this zone at the specified timestamp.
	   * @override
	   * @param {number} ts - Epoch milliseconds for which to compute the offset
	   * @return {number}
	   */
	  offset(ts) {
	    const date = new Date(ts);

	    if (isNaN(date)) return NaN;

	    const dtf = makeDTF(this.name);
	    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts
	      ? partsOffset(dtf, date)
	      : hackyOffset(dtf, date);

	    if (adOrBc === "BC") {
	      year = -Math.abs(year) + 1;
	    }

	    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
	    const adjustedHour = hour === 24 ? 0 : hour;

	    const asUTC = objToLocalTS({
	      year,
	      month,
	      day,
	      hour: adjustedHour,
	      minute,
	      second,
	      millisecond: 0,
	    });

	    let asTS = +date;
	    const over = asTS % 1000;
	    asTS -= over >= 0 ? over : 1000 + over;
	    return (asUTC - asTS) / (60 * 1000);
	  }

	  /**
	   * Return whether this Zone is equal to another zone
	   * @override
	   * @param {Zone} otherZone - the zone to compare
	   * @return {boolean}
	   */
	  equals(otherZone) {
	    return otherZone.type === "iana" && otherZone.name === this.name;
	  }

	  /**
	   * Return whether this Zone is valid.
	   * @override
	   * @type {boolean}
	   */
	  get isValid() {
	    return this.valid;
	  }
	}

	// todo - remap caching

	let intlLFCache = {};
	function getCachedLF(locString, opts = {}) {
	  const key = JSON.stringify([locString, opts]);
	  let dtf = intlLFCache[key];
	  if (!dtf) {
	    dtf = new Intl.ListFormat(locString, opts);
	    intlLFCache[key] = dtf;
	  }
	  return dtf;
	}

	let intlDTCache = {};
	function getCachedDTF(locString, opts = {}) {
	  const key = JSON.stringify([locString, opts]);
	  let dtf = intlDTCache[key];
	  if (!dtf) {
	    dtf = new Intl.DateTimeFormat(locString, opts);
	    intlDTCache[key] = dtf;
	  }
	  return dtf;
	}

	let intlNumCache = {};
	function getCachedINF(locString, opts = {}) {
	  const key = JSON.stringify([locString, opts]);
	  let inf = intlNumCache[key];
	  if (!inf) {
	    inf = new Intl.NumberFormat(locString, opts);
	    intlNumCache[key] = inf;
	  }
	  return inf;
	}

	let intlRelCache = {};
	function getCachedRTF(locString, opts = {}) {
	  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options
	  const key = JSON.stringify([locString, cacheKeyOpts]);
	  let inf = intlRelCache[key];
	  if (!inf) {
	    inf = new Intl.RelativeTimeFormat(locString, opts);
	    intlRelCache[key] = inf;
	  }
	  return inf;
	}

	let sysLocaleCache = null;
	function systemLocale() {
	  if (sysLocaleCache) {
	    return sysLocaleCache;
	  } else {
	    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
	    return sysLocaleCache;
	  }
	}

	let weekInfoCache = {};
	function getCachedWeekInfo(locString) {
	  let data = weekInfoCache[locString];
	  if (!data) {
	    const locale = new Intl.Locale(locString);
	    // browsers currently implement this as a property, but spec says it should be a getter function
	    data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
	    weekInfoCache[locString] = data;
	  }
	  return data;
	}

	function parseLocaleString(localeStr) {
	  // I really want to avoid writing a BCP 47 parser
	  // see, e.g. https://github.com/wooorm/bcp-47
	  // Instead, we'll do this:

	  // a) if the string has no -u extensions, just leave it alone
	  // b) if it does, use Intl to resolve everything
	  // c) if Intl fails, try again without the -u

	  // private subtags and unicode subtags have ordering requirements,
	  // and we're not properly parsing this, so just strip out the
	  // private ones if they exist.
	  const xIndex = localeStr.indexOf("-x-");
	  if (xIndex !== -1) {
	    localeStr = localeStr.substring(0, xIndex);
	  }

	  const uIndex = localeStr.indexOf("-u-");
	  if (uIndex === -1) {
	    return [localeStr];
	  } else {
	    let options;
	    let selectedStr;
	    try {
	      options = getCachedDTF(localeStr).resolvedOptions();
	      selectedStr = localeStr;
	    } catch (e) {
	      const smaller = localeStr.substring(0, uIndex);
	      options = getCachedDTF(smaller).resolvedOptions();
	      selectedStr = smaller;
	    }

	    const { numberingSystem, calendar } = options;
	    return [selectedStr, numberingSystem, calendar];
	  }
	}

	function intlConfigString(localeStr, numberingSystem, outputCalendar) {
	  if (outputCalendar || numberingSystem) {
	    if (!localeStr.includes("-u-")) {
	      localeStr += "-u";
	    }

	    if (outputCalendar) {
	      localeStr += `-ca-${outputCalendar}`;
	    }

	    if (numberingSystem) {
	      localeStr += `-nu-${numberingSystem}`;
	    }
	    return localeStr;
	  } else {
	    return localeStr;
	  }
	}

	function mapMonths(f) {
	  const ms = [];
	  for (let i = 1; i <= 12; i++) {
	    const dt = DateTime.utc(2009, i, 1);
	    ms.push(f(dt));
	  }
	  return ms;
	}

	function mapWeekdays(f) {
	  const ms = [];
	  for (let i = 1; i <= 7; i++) {
	    const dt = DateTime.utc(2016, 11, 13 + i);
	    ms.push(f(dt));
	  }
	  return ms;
	}

	function listStuff(loc, length, englishFn, intlFn) {
	  const mode = loc.listingMode();

	  if (mode === "error") {
	    return null;
	  } else if (mode === "en") {
	    return englishFn(length);
	  } else {
	    return intlFn(length);
	  }
	}

	function supportsFastNumbers(loc) {
	  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
	    return false;
	  } else {
	    return (
	      loc.numberingSystem === "latn" ||
	      !loc.locale ||
	      loc.locale.startsWith("en") ||
	      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn"
	    );
	  }
	}

	/**
	 * @private
	 */

	class PolyNumberFormatter {
	  constructor(intl, forceSimple, opts) {
	    this.padTo = opts.padTo || 0;
	    this.floor = opts.floor || false;

	    const { padTo, floor, ...otherOpts } = opts;

	    if (!forceSimple || Object.keys(otherOpts).length > 0) {
	      const intlOpts = { useGrouping: false, ...opts };
	      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
	      this.inf = getCachedINF(intl, intlOpts);
	    }
	  }

	  format(i) {
	    if (this.inf) {
	      const fixed = this.floor ? Math.floor(i) : i;
	      return this.inf.format(fixed);
	    } else {
	      // to match the browser's numberformatter defaults
	      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
	      return padStart(fixed, this.padTo);
	    }
	  }
	}

	/**
	 * @private
	 */

	class PolyDateFormatter {
	  constructor(dt, intl, opts) {
	    this.opts = opts;
	    this.originalZone = undefined;

	    let z = undefined;
	    if (this.opts.timeZone) {
	      // Don't apply any workarounds if a timeZone is explicitly provided in opts
	      this.dt = dt;
	    } else if (dt.zone.type === "fixed") {
	      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
	      // That is why fixed-offset TZ is set to that unless it is:
	      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
	      // 2. Unsupported by the browser:
	      //    - some do not support Etc/
	      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
	      const gmtOffset = -1 * (dt.offset / 60);
	      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
	      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
	        z = offsetZ;
	        this.dt = dt;
	      } else {
	        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so
	        // we manually apply the offset and substitute the zone as needed.
	        z = "UTC";
	        this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
	        this.originalZone = dt.zone;
	      }
	    } else if (dt.zone.type === "system") {
	      this.dt = dt;
	    } else if (dt.zone.type === "iana") {
	      this.dt = dt;
	      z = dt.zone.name;
	    } else {
	      // Custom zones can have any offset / offsetName so we just manually
	      // apply the offset and substitute the zone as needed.
	      z = "UTC";
	      this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
	      this.originalZone = dt.zone;
	    }

	    const intlOpts = { ...this.opts };
	    intlOpts.timeZone = intlOpts.timeZone || z;
	    this.dtf = getCachedDTF(intl, intlOpts);
	  }

	  format() {
	    if (this.originalZone) {
	      // If we have to substitute in the actual zone name, we have to use
	      // formatToParts so that the timezone can be replaced.
	      return this.formatToParts()
	        .map(({ value }) => value)
	        .join("");
	    }
	    return this.dtf.format(this.dt.toJSDate());
	  }

	  formatToParts() {
	    const parts = this.dtf.formatToParts(this.dt.toJSDate());
	    if (this.originalZone) {
	      return parts.map((part) => {
	        if (part.type === "timeZoneName") {
	          const offsetName = this.originalZone.offsetName(this.dt.ts, {
	            locale: this.dt.locale,
	            format: this.opts.timeZoneName,
	          });
	          return {
	            ...part,
	            value: offsetName,
	          };
	        } else {
	          return part;
	        }
	      });
	    }
	    return parts;
	  }

	  resolvedOptions() {
	    return this.dtf.resolvedOptions();
	  }
	}

	/**
	 * @private
	 */
	class PolyRelFormatter {
	  constructor(intl, isEnglish, opts) {
	    this.opts = { style: "long", ...opts };
	    if (!isEnglish && hasRelative()) {
	      this.rtf = getCachedRTF(intl, opts);
	    }
	  }

	  format(count, unit) {
	    if (this.rtf) {
	      return this.rtf.format(count, unit);
	    } else {
	      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
	    }
	  }

	  formatToParts(count, unit) {
	    if (this.rtf) {
	      return this.rtf.formatToParts(count, unit);
	    } else {
	      return [];
	    }
	  }
	}

	const fallbackWeekSettings = {
	  firstDay: 1,
	  minimalDays: 4,
	  weekend: [6, 7],
	};

	/**
	 * @private
	 */

	class Locale {
	  static fromOpts(opts) {
	    return Locale.create(
	      opts.locale,
	      opts.numberingSystem,
	      opts.outputCalendar,
	      opts.weekSettings,
	      opts.defaultToEN
	    );
	  }

	  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
	    const specifiedLocale = locale || Settings.defaultLocale;
	    // the system locale is useful for human-readable strings but annoying for parsing/formatting known formats
	    const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
	    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
	    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
	    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
	    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
	  }

	  static resetCache() {
	    sysLocaleCache = null;
	    intlDTCache = {};
	    intlNumCache = {};
	    intlRelCache = {};
	  }

	  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {
	    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
	  }

	  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
	    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);

	    this.locale = parsedLocale;
	    this.numberingSystem = numbering || parsedNumberingSystem || null;
	    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
	    this.weekSettings = weekSettings;
	    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);

	    this.weekdaysCache = { format: {}, standalone: {} };
	    this.monthsCache = { format: {}, standalone: {} };
	    this.meridiemCache = null;
	    this.eraCache = {};

	    this.specifiedLocale = specifiedLocale;
	    this.fastNumbersCached = null;
	  }

	  get fastNumbers() {
	    if (this.fastNumbersCached == null) {
	      this.fastNumbersCached = supportsFastNumbers(this);
	    }

	    return this.fastNumbersCached;
	  }

	  listingMode() {
	    const isActuallyEn = this.isEnglish();
	    const hasNoWeirdness =
	      (this.numberingSystem === null || this.numberingSystem === "latn") &&
	      (this.outputCalendar === null || this.outputCalendar === "gregory");
	    return isActuallyEn && hasNoWeirdness ? "en" : "intl";
	  }

	  clone(alts) {
	    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
	      return this;
	    } else {
	      return Locale.create(
	        alts.locale || this.specifiedLocale,
	        alts.numberingSystem || this.numberingSystem,
	        alts.outputCalendar || this.outputCalendar,
	        validateWeekSettings(alts.weekSettings) || this.weekSettings,
	        alts.defaultToEN || false
	      );
	    }
	  }

	  redefaultToEN(alts = {}) {
	    return this.clone({ ...alts, defaultToEN: true });
	  }

	  redefaultToSystem(alts = {}) {
	    return this.clone({ ...alts, defaultToEN: false });
	  }

	  months(length, format = false) {
	    return listStuff(this, length, months, () => {
	      const intl = format ? { month: length, day: "numeric" } : { month: length },
	        formatStr = format ? "format" : "standalone";
	      if (!this.monthsCache[formatStr][length]) {
	        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
	      }
	      return this.monthsCache[formatStr][length];
	    });
	  }

	  weekdays(length, format = false) {
	    return listStuff(this, length, weekdays, () => {
	      const intl = format
	          ? { weekday: length, year: "numeric", month: "long", day: "numeric" }
	          : { weekday: length },
	        formatStr = format ? "format" : "standalone";
	      if (!this.weekdaysCache[formatStr][length]) {
	        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>
	          this.extract(dt, intl, "weekday")
	        );
	      }
	      return this.weekdaysCache[formatStr][length];
	    });
	  }

	  meridiems() {
	    return listStuff(
	      this,
	      undefined,
	      () => meridiems,
	      () => {
	        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
	        // for AM and PM. This is probably wrong, but it's makes parsing way easier.
	        if (!this.meridiemCache) {
	          const intl = { hour: "numeric", hourCycle: "h12" };
	          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
	            (dt) => this.extract(dt, intl, "dayperiod")
	          );
	        }

	        return this.meridiemCache;
	      }
	    );
	  }

	  eras(length) {
	    return listStuff(this, length, eras, () => {
	      const intl = { era: length };

	      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
	      // to definitely enumerate them.
	      if (!this.eraCache[length]) {
	        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>
	          this.extract(dt, intl, "era")
	        );
	      }

	      return this.eraCache[length];
	    });
	  }

	  extract(dt, intlOpts, field) {
	    const df = this.dtFormatter(dt, intlOpts),
	      results = df.formatToParts(),
	      matching = results.find((m) => m.type.toLowerCase() === field);
	    return matching ? matching.value : null;
	  }

	  numberFormatter(opts = {}) {
	    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
	    // (in contrast, the rest of the condition is used heavily)
	    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
	  }

	  dtFormatter(dt, intlOpts = {}) {
	    return new PolyDateFormatter(dt, this.intl, intlOpts);
	  }

	  relFormatter(opts = {}) {
	    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
	  }

	  listFormatter(opts = {}) {
	    return getCachedLF(this.intl, opts);
	  }

	  isEnglish() {
	    return (
	      this.locale === "en" ||
	      this.locale.toLowerCase() === "en-us" ||
	      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")
	    );
	  }

	  getWeekSettings() {
	    if (this.weekSettings) {
	      return this.weekSettings;
	    } else if (!hasLocaleWeekInfo()) {
	      return fallbackWeekSettings;
	    } else {
	      return getCachedWeekInfo(this.locale);
	    }
	  }

	  getStartOfWeek() {
	    return this.getWeekSettings().firstDay;
	  }

	  getMinDaysInFirstWeek() {
	    return this.getWeekSettings().minimalDays;
	  }

	  getWeekendDays() {
	    return this.getWeekSettings().weekend;
	  }

	  equals(other) {
	    return (
	      this.locale === other.locale &&
	      this.numberingSystem === other.numberingSystem &&
	      this.outputCalendar === other.outputCalendar
	    );
	  }

	  toString() {
	    return `Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`;
	  }
	}

	let singleton = null;

	/**
	 * A zone with a fixed offset (meaning no DST)
	 * @implements {Zone}
	 */
	class FixedOffsetZone extends Zone {
	  /**
	   * Get a singleton instance of UTC
	   * @return {FixedOffsetZone}
	   */
	  static get utcInstance() {
	    if (singleton === null) {
	      singleton = new FixedOffsetZone(0);
	    }
	    return singleton;
	  }

	  /**
	   * Get an instance with a specified offset
	   * @param {number} offset - The offset in minutes
	   * @return {FixedOffsetZone}
	   */
	  static instance(offset) {
	    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
	  }

	  /**
	   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
	   * @param {string} s - The offset string to parse
	   * @example FixedOffsetZone.parseSpecifier("UTC+6")
	   * @example FixedOffsetZone.parseSpecifier("UTC+06")
	   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
	   * @return {FixedOffsetZone}
	   */
	  static parseSpecifier(s) {
	    if (s) {
	      const r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
	      if (r) {
	        return new FixedOffsetZone(signedOffset(r[1], r[2]));
	      }
	    }
	    return null;
	  }

	  constructor(offset) {
	    super();
	    /** @private **/
	    this.fixed = offset;
	  }

	  /**
	   * The type of zone. `fixed` for all instances of `FixedOffsetZone`.
	   * @override
	   * @type {string}
	   */
	  get type() {
	    return "fixed";
	  }

	  /**
	   * The name of this zone.
	   * All fixed zones' names always start with "UTC" (plus optional offset)
	   * @override
	   * @type {string}
	   */
	  get name() {
	    return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
	  }

	  /**
	   * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`
	   *
	   * @override
	   * @type {string}
	   */
	  get ianaName() {
	    if (this.fixed === 0) {
	      return "Etc/UTC";
	    } else {
	      return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
	    }
	  }

	  /**
	   * Returns the offset's common name at the specified timestamp.
	   *
	   * For fixed offset zones this equals to the zone name.
	   * @override
	   */
	  offsetName() {
	    return this.name;
	  }

	  /**
	   * Returns the offset's value as a string
	   * @override
	   * @param {number} ts - Epoch milliseconds for which to get the offset
	   * @param {string} format - What style of offset to return.
	   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
	   * @return {string}
	   */
	  formatOffset(ts, format) {
	    return formatOffset(this.fixed, format);
	  }

	  /**
	   * Returns whether the offset is known to be fixed for the whole year:
	   * Always returns true for all fixed offset zones.
	   * @override
	   * @type {boolean}
	   */
	  get isUniversal() {
	    return true;
	  }

	  /**
	   * Return the offset in minutes for this zone at the specified timestamp.
	   *
	   * For fixed offset zones, this is constant and does not depend on a timestamp.
	   * @override
	   * @return {number}
	   */
	  offset() {
	    return this.fixed;
	  }

	  /**
	   * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)
	   * @override
	   * @param {Zone} otherZone - the zone to compare
	   * @return {boolean}
	   */
	  equals(otherZone) {
	    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
	  }

	  /**
	   * Return whether this Zone is valid:
	   * All fixed offset zones are valid.
	   * @override
	   * @type {boolean}
	   */
	  get isValid() {
	    return true;
	  }
	}

	/**
	 * A zone that failed to parse. You should never need to instantiate this.
	 * @implements {Zone}
	 */
	class InvalidZone extends Zone {
	  constructor(zoneName) {
	    super();
	    /**  @private */
	    this.zoneName = zoneName;
	  }

	  /** @override **/
	  get type() {
	    return "invalid";
	  }

	  /** @override **/
	  get name() {
	    return this.zoneName;
	  }

	  /** @override **/
	  get isUniversal() {
	    return false;
	  }

	  /** @override **/
	  offsetName() {
	    return null;
	  }

	  /** @override **/
	  formatOffset() {
	    return "";
	  }

	  /** @override **/
	  offset() {
	    return NaN;
	  }

	  /** @override **/
	  equals() {
	    return false;
	  }

	  /** @override **/
	  get isValid() {
	    return false;
	  }
	}

	/**
	 * @private
	 */


	function normalizeZone(input, defaultZone) {
	  if (isUndefined$1(input) || input === null) {
	    return defaultZone;
	  } else if (input instanceof Zone) {
	    return input;
	  } else if (isString$1(input)) {
	    const lowered = input.toLowerCase();
	    if (lowered === "default") return defaultZone;
	    else if (lowered === "local" || lowered === "system") return SystemZone.instance;
	    else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
	    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
	  } else if (isNumber$1(input)) {
	    return FixedOffsetZone.instance(input);
	  } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
	    // This is dumb, but the instanceof check above doesn't seem to really work
	    // so we're duck checking it
	    return input;
	  } else {
	    return new InvalidZone(input);
	  }
	}

	const numberingSystems = {
	  arab: "[\u0660-\u0669]",
	  arabext: "[\u06F0-\u06F9]",
	  bali: "[\u1B50-\u1B59]",
	  beng: "[\u09E6-\u09EF]",
	  deva: "[\u0966-\u096F]",
	  fullwide: "[\uFF10-\uFF19]",
	  gujr: "[\u0AE6-\u0AEF]",
	  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
	  khmr: "[\u17E0-\u17E9]",
	  knda: "[\u0CE6-\u0CEF]",
	  laoo: "[\u0ED0-\u0ED9]",
	  limb: "[\u1946-\u194F]",
	  mlym: "[\u0D66-\u0D6F]",
	  mong: "[\u1810-\u1819]",
	  mymr: "[\u1040-\u1049]",
	  orya: "[\u0B66-\u0B6F]",
	  tamldec: "[\u0BE6-\u0BEF]",
	  telu: "[\u0C66-\u0C6F]",
	  thai: "[\u0E50-\u0E59]",
	  tibt: "[\u0F20-\u0F29]",
	  latn: "\\d",
	};

	const numberingSystemsUTF16 = {
	  arab: [1632, 1641],
	  arabext: [1776, 1785],
	  bali: [6992, 7001],
	  beng: [2534, 2543],
	  deva: [2406, 2415],
	  fullwide: [65296, 65303],
	  gujr: [2790, 2799],
	  khmr: [6112, 6121],
	  knda: [3302, 3311],
	  laoo: [3792, 3801],
	  limb: [6470, 6479],
	  mlym: [3430, 3439],
	  mong: [6160, 6169],
	  mymr: [4160, 4169],
	  orya: [2918, 2927],
	  tamldec: [3046, 3055],
	  telu: [3174, 3183],
	  thai: [3664, 3673],
	  tibt: [3872, 3881],
	};

	const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");

	function parseDigits(str) {
	  let value = parseInt(str, 10);
	  if (isNaN(value)) {
	    value = "";
	    for (let i = 0; i < str.length; i++) {
	      const code = str.charCodeAt(i);

	      if (str[i].search(numberingSystems.hanidec) !== -1) {
	        value += hanidecChars.indexOf(str[i]);
	      } else {
	        for (const key in numberingSystemsUTF16) {
	          const [min, max] = numberingSystemsUTF16[key];
	          if (code >= min && code <= max) {
	            value += code - min;
	          }
	        }
	      }
	    }
	    return parseInt(value, 10);
	  } else {
	    return value;
	  }
	}

	// cache of {numberingSystem: {append: regex}}
	let digitRegexCache = {};
	function resetDigitRegexCache() {
	  digitRegexCache = {};
	}

	function digitRegex({ numberingSystem }, append = "") {
	  const ns = numberingSystem || "latn";

	  if (!digitRegexCache[ns]) {
	    digitRegexCache[ns] = {};
	  }
	  if (!digitRegexCache[ns][append]) {
	    digitRegexCache[ns][append] = new RegExp(`${numberingSystems[ns]}${append}`);
	  }

	  return digitRegexCache[ns][append];
	}

	let now = () => Date.now(),
	  defaultZone = "system",
	  defaultLocale = null,
	  defaultNumberingSystem = null,
	  defaultOutputCalendar = null,
	  twoDigitCutoffYear = 60,
	  throwOnInvalid,
	  defaultWeekSettings = null;

	/**
	 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
	 */
	class Settings {
	  /**
	   * Get the callback for returning the current timestamp.
	   * @type {function}
	   */
	  static get now() {
	    return now;
	  }

	  /**
	   * Set the callback for returning the current timestamp.
	   * The function should return a number, which will be interpreted as an Epoch millisecond count
	   * @type {function}
	   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
	   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
	   */
	  static set now(n) {
	    now = n;
	  }

	  /**
	   * Set the default time zone to create DateTimes in. Does not affect existing instances.
	   * Use the value "system" to reset this value to the system's time zone.
	   * @type {string}
	   */
	  static set defaultZone(zone) {
	    defaultZone = zone;
	  }

	  /**
	   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
	   * The default value is the system's time zone (the one set on the machine that runs this code).
	   * @type {Zone}
	   */
	  static get defaultZone() {
	    return normalizeZone(defaultZone, SystemZone.instance);
	  }

	  /**
	   * Get the default locale to create DateTimes with. Does not affect existing instances.
	   * @type {string}
	   */
	  static get defaultLocale() {
	    return defaultLocale;
	  }

	  /**
	   * Set the default locale to create DateTimes with. Does not affect existing instances.
	   * @type {string}
	   */
	  static set defaultLocale(locale) {
	    defaultLocale = locale;
	  }

	  /**
	   * Get the default numbering system to create DateTimes with. Does not affect existing instances.
	   * @type {string}
	   */
	  static get defaultNumberingSystem() {
	    return defaultNumberingSystem;
	  }

	  /**
	   * Set the default numbering system to create DateTimes with. Does not affect existing instances.
	   * @type {string}
	   */
	  static set defaultNumberingSystem(numberingSystem) {
	    defaultNumberingSystem = numberingSystem;
	  }

	  /**
	   * Get the default output calendar to create DateTimes with. Does not affect existing instances.
	   * @type {string}
	   */
	  static get defaultOutputCalendar() {
	    return defaultOutputCalendar;
	  }

	  /**
	   * Set the default output calendar to create DateTimes with. Does not affect existing instances.
	   * @type {string}
	   */
	  static set defaultOutputCalendar(outputCalendar) {
	    defaultOutputCalendar = outputCalendar;
	  }

	  /**
	   * @typedef {Object} WeekSettings
	   * @property {number} firstDay
	   * @property {number} minimalDays
	   * @property {number[]} weekend
	   */

	  /**
	   * @return {WeekSettings|null}
	   */
	  static get defaultWeekSettings() {
	    return defaultWeekSettings;
	  }

	  /**
	   * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
	   * how many days are required in the first week of a year.
	   * Does not affect existing instances.
	   *
	   * @param {WeekSettings|null} weekSettings
	   */
	  static set defaultWeekSettings(weekSettings) {
	    defaultWeekSettings = validateWeekSettings(weekSettings);
	  }

	  /**
	   * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
	   * @type {number}
	   */
	  static get twoDigitCutoffYear() {
	    return twoDigitCutoffYear;
	  }

	  /**
	   * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
	   * @type {number}
	   * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century
	   * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century
	   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950
	   * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
	   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
	   */
	  static set twoDigitCutoffYear(cutoffYear) {
	    twoDigitCutoffYear = cutoffYear % 100;
	  }

	  /**
	   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
	   * @type {boolean}
	   */
	  static get throwOnInvalid() {
	    return throwOnInvalid;
	  }

	  /**
	   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
	   * @type {boolean}
	   */
	  static set throwOnInvalid(t) {
	    throwOnInvalid = t;
	  }

	  /**
	   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
	   * @return {void}
	   */
	  static resetCaches() {
	    Locale.resetCache();
	    IANAZone.resetCache();
	    DateTime.resetCache();
	    resetDigitRegexCache();
	  }
	}

	class Invalid {
	  constructor(reason, explanation) {
	    this.reason = reason;
	    this.explanation = explanation;
	  }

	  toMessage() {
	    if (this.explanation) {
	      return `${this.reason}: ${this.explanation}`;
	    } else {
	      return this.reason;
	    }
	  }
	}

	const nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
	  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

	function unitOutOfRange(unit, value) {
	  return new Invalid(
	    "unit out of range",
	    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
	  );
	}

	function dayOfWeek(year, month, day) {
	  const d = new Date(Date.UTC(year, month - 1, day));

	  if (year < 100 && year >= 0) {
	    d.setUTCFullYear(d.getUTCFullYear() - 1900);
	  }

	  const js = d.getUTCDay();

	  return js === 0 ? 7 : js;
	}

	function computeOrdinal(year, month, day) {
	  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
	}

	function uncomputeOrdinal(year, ordinal) {
	  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,
	    month0 = table.findIndex((i) => i < ordinal),
	    day = ordinal - table[month0];
	  return { month: month0 + 1, day };
	}

	function isoWeekdayToLocal(isoWeekday, startOfWeek) {
	  return ((isoWeekday - startOfWeek + 7) % 7) + 1;
	}

	/**
	 * @private
	 */

	function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
	  const { year, month, day } = gregObj,
	    ordinal = computeOrdinal(year, month, day),
	    weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);

	  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7),
	    weekYear;

	  if (weekNumber < 1) {
	    weekYear = year - 1;
	    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
	  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
	    weekYear = year + 1;
	    weekNumber = 1;
	  } else {
	    weekYear = year;
	  }

	  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
	}

	function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
	  const { weekYear, weekNumber, weekday } = weekData,
	    weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek),
	    yearInDays = daysInYear(weekYear);

	  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek,
	    year;

	  if (ordinal < 1) {
	    year = weekYear - 1;
	    ordinal += daysInYear(year);
	  } else if (ordinal > yearInDays) {
	    year = weekYear + 1;
	    ordinal -= daysInYear(weekYear);
	  } else {
	    year = weekYear;
	  }

	  const { month, day } = uncomputeOrdinal(year, ordinal);
	  return { year, month, day, ...timeObject(weekData) };
	}

	function gregorianToOrdinal(gregData) {
	  const { year, month, day } = gregData;
	  const ordinal = computeOrdinal(year, month, day);
	  return { year, ordinal, ...timeObject(gregData) };
	}

	function ordinalToGregorian(ordinalData) {
	  const { year, ordinal } = ordinalData;
	  const { month, day } = uncomputeOrdinal(year, ordinal);
	  return { year, month, day, ...timeObject(ordinalData) };
	}

	/**
	 * Check if local week units like localWeekday are used in obj.
	 * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.
	 * Modifies obj in-place!
	 * @param obj the object values
	 */
	function usesLocalWeekValues(obj, loc) {
	  const hasLocaleWeekData =
	    !isUndefined$1(obj.localWeekday) ||
	    !isUndefined$1(obj.localWeekNumber) ||
	    !isUndefined$1(obj.localWeekYear);
	  if (hasLocaleWeekData) {
	    const hasIsoWeekData =
	      !isUndefined$1(obj.weekday) || !isUndefined$1(obj.weekNumber) || !isUndefined$1(obj.weekYear);

	    if (hasIsoWeekData) {
	      throw new ConflictingSpecificationError(
	        "Cannot mix locale-based week fields with ISO-based week fields"
	      );
	    }
	    if (!isUndefined$1(obj.localWeekday)) obj.weekday = obj.localWeekday;
	    if (!isUndefined$1(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;
	    if (!isUndefined$1(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;
	    delete obj.localWeekday;
	    delete obj.localWeekNumber;
	    delete obj.localWeekYear;
	    return {
	      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
	      startOfWeek: loc.getStartOfWeek(),
	    };
	  } else {
	    return { minDaysInFirstWeek: 4, startOfWeek: 1 };
	  }
	}

	function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
	  const validYear = isInteger(obj.weekYear),
	    validWeek = integerBetween(
	      obj.weekNumber,
	      1,
	      weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)
	    ),
	    validWeekday = integerBetween(obj.weekday, 1, 7);

	  if (!validYear) {
	    return unitOutOfRange("weekYear", obj.weekYear);
	  } else if (!validWeek) {
	    return unitOutOfRange("week", obj.weekNumber);
	  } else if (!validWeekday) {
	    return unitOutOfRange("weekday", obj.weekday);
	  } else return false;
	}

	function hasInvalidOrdinalData(obj) {
	  const validYear = isInteger(obj.year),
	    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

	  if (!validYear) {
	    return unitOutOfRange("year", obj.year);
	  } else if (!validOrdinal) {
	    return unitOutOfRange("ordinal", obj.ordinal);
	  } else return false;
	}

	function hasInvalidGregorianData(obj) {
	  const validYear = isInteger(obj.year),
	    validMonth = integerBetween(obj.month, 1, 12),
	    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

	  if (!validYear) {
	    return unitOutOfRange("year", obj.year);
	  } else if (!validMonth) {
	    return unitOutOfRange("month", obj.month);
	  } else if (!validDay) {
	    return unitOutOfRange("day", obj.day);
	  } else return false;
	}

	function hasInvalidTimeData(obj) {
	  const { hour, minute, second, millisecond } = obj;
	  const validHour =
	      integerBetween(hour, 0, 23) ||
	      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),
	    validMinute = integerBetween(minute, 0, 59),
	    validSecond = integerBetween(second, 0, 59),
	    validMillisecond = integerBetween(millisecond, 0, 999);

	  if (!validHour) {
	    return unitOutOfRange("hour", hour);
	  } else if (!validMinute) {
	    return unitOutOfRange("minute", minute);
	  } else if (!validSecond) {
	    return unitOutOfRange("second", second);
	  } else if (!validMillisecond) {
	    return unitOutOfRange("millisecond", millisecond);
	  } else return false;
	}

	/*
	  This is just a junk drawer, containing anything used across multiple classes.
	  Because Luxon is small(ish), this should stay small and we won't worry about splitting
	  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
	*/


	/**
	 * @private
	 */

	// TYPES

	function isUndefined$1(o) {
	  return typeof o === "undefined";
	}

	function isNumber$1(o) {
	  return typeof o === "number";
	}

	function isInteger(o) {
	  return typeof o === "number" && o % 1 === 0;
	}

	function isString$1(o) {
	  return typeof o === "string";
	}

	function isDate$1(o) {
	  return Object.prototype.toString.call(o) === "[object Date]";
	}

	// CAPABILITIES

	function hasRelative() {
	  try {
	    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
	  } catch (e) {
	    return false;
	  }
	}

	function hasLocaleWeekInfo() {
	  try {
	    return (
	      typeof Intl !== "undefined" &&
	      !!Intl.Locale &&
	      ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype)
	    );
	  } catch (e) {
	    return false;
	  }
	}

	// OBJECTS AND ARRAYS

	function maybeArray(thing) {
	  return Array.isArray(thing) ? thing : [thing];
	}

	function bestBy(arr, by, compare) {
	  if (arr.length === 0) {
	    return undefined;
	  }
	  return arr.reduce((best, next) => {
	    const pair = [by(next), next];
	    if (!best) {
	      return pair;
	    } else if (compare(best[0], pair[0]) === best[0]) {
	      return best;
	    } else {
	      return pair;
	    }
	  }, null)[1];
	}

	function pick(obj, keys) {
	  return keys.reduce((a, k) => {
	    a[k] = obj[k];
	    return a;
	  }, {});
	}

	function hasOwnProperty$1(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	function validateWeekSettings(settings) {
	  if (settings == null) {
	    return null;
	  } else if (typeof settings !== "object") {
	    throw new InvalidArgumentError("Week settings must be an object");
	  } else {
	    if (
	      !integerBetween(settings.firstDay, 1, 7) ||
	      !integerBetween(settings.minimalDays, 1, 7) ||
	      !Array.isArray(settings.weekend) ||
	      settings.weekend.some((v) => !integerBetween(v, 1, 7))
	    ) {
	      throw new InvalidArgumentError("Invalid week settings");
	    }
	    return {
	      firstDay: settings.firstDay,
	      minimalDays: settings.minimalDays,
	      weekend: Array.from(settings.weekend),
	    };
	  }
	}

	// NUMBERS AND STRINGS

	function integerBetween(thing, bottom, top) {
	  return isInteger(thing) && thing >= bottom && thing <= top;
	}

	// x % n but takes the sign of n instead of x
	function floorMod(x, n) {
	  return x - n * Math.floor(x / n);
	}

	function padStart(input, n = 2) {
	  const isNeg = input < 0;
	  let padded;
	  if (isNeg) {
	    padded = "-" + ("" + -input).padStart(n, "0");
	  } else {
	    padded = ("" + input).padStart(n, "0");
	  }
	  return padded;
	}

	function parseInteger(string) {
	  if (isUndefined$1(string) || string === null || string === "") {
	    return undefined;
	  } else {
	    return parseInt(string, 10);
	  }
	}

	function parseFloating(string) {
	  if (isUndefined$1(string) || string === null || string === "") {
	    return undefined;
	  } else {
	    return parseFloat(string);
	  }
	}

	function parseMillis(fraction) {
	  // Return undefined (instead of 0) in these cases, where fraction is not set
	  if (isUndefined$1(fraction) || fraction === null || fraction === "") {
	    return undefined;
	  } else {
	    const f = parseFloat("0." + fraction) * 1000;
	    return Math.floor(f);
	  }
	}

	function roundTo(number, digits, towardZero = false) {
	  const factor = 10 ** digits,
	    rounder = towardZero ? Math.trunc : Math.round;
	  return rounder(number * factor) / factor;
	}

	// DATE BASICS

	function isLeapYear(year) {
	  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
	}

	function daysInYear(year) {
	  return isLeapYear(year) ? 366 : 365;
	}

	function daysInMonth(year, month) {
	  const modMonth = floorMod(month - 1, 12) + 1,
	    modYear = year + (month - modMonth) / 12;

	  if (modMonth === 2) {
	    return isLeapYear(modYear) ? 29 : 28;
	  } else {
	    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
	  }
	}

	// convert a calendar object to a local timestamp (epoch, but with the offset baked in)
	function objToLocalTS(obj) {
	  let d = Date.UTC(
	    obj.year,
	    obj.month - 1,
	    obj.day,
	    obj.hour,
	    obj.minute,
	    obj.second,
	    obj.millisecond
	  );

	  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
	  if (obj.year < 100 && obj.year >= 0) {
	    d = new Date(d);
	    // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not
	    // so if obj.year is in 99, but obj.day makes it roll over into year 100,
	    // the calculations done by Date.UTC are using year 2000 - which is incorrect
	    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
	  }
	  return +d;
	}

	// adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js
	function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
	  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
	  return -fwdlw + minDaysInFirstWeek - 1;
	}

	function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
	  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
	  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
	  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
	}

	function untruncateYear(year) {
	  if (year > 99) {
	    return year;
	  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
	}

	// PARSING

	function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
	  const date = new Date(ts),
	    intlOpts = {
	      hourCycle: "h23",
	      year: "numeric",
	      month: "2-digit",
	      day: "2-digit",
	      hour: "2-digit",
	      minute: "2-digit",
	    };

	  if (timeZone) {
	    intlOpts.timeZone = timeZone;
	  }

	  const modified = { timeZoneName: offsetFormat, ...intlOpts };

	  const parsed = new Intl.DateTimeFormat(locale, modified)
	    .formatToParts(date)
	    .find((m) => m.type.toLowerCase() === "timezonename");
	  return parsed ? parsed.value : null;
	}

	// signedOffset('-5', '30') -> -330
	function signedOffset(offHourStr, offMinuteStr) {
	  let offHour = parseInt(offHourStr, 10);

	  // don't || this because we want to preserve -0
	  if (Number.isNaN(offHour)) {
	    offHour = 0;
	  }

	  const offMin = parseInt(offMinuteStr, 10) || 0,
	    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
	  return offHour * 60 + offMinSigned;
	}

	// COERCION

	function asNumber(value) {
	  const numericValue = Number(value);
	  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
	    throw new InvalidArgumentError(`Invalid unit value ${value}`);
	  return numericValue;
	}

	function normalizeObject(obj, normalizer) {
	  const normalized = {};
	  for (const u in obj) {
	    if (hasOwnProperty$1(obj, u)) {
	      const v = obj[u];
	      if (v === undefined || v === null) continue;
	      normalized[normalizer(u)] = asNumber(v);
	    }
	  }
	  return normalized;
	}

	/**
	 * Returns the offset's value as a string
	 * @param {number} ts - Epoch milliseconds for which to get the offset
	 * @param {string} format - What style of offset to return.
	 *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
	 * @return {string}
	 */
	function formatOffset(offset, format) {
	  const hours = Math.trunc(Math.abs(offset / 60)),
	    minutes = Math.trunc(Math.abs(offset % 60)),
	    sign = offset >= 0 ? "+" : "-";

	  switch (format) {
	    case "short":
	      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
	    case "narrow":
	      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
	    case "techie":
	      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
	    default:
	      throw new RangeError(`Value format ${format} is out of range for property format`);
	  }
	}

	function timeObject(obj) {
	  return pick(obj, ["hour", "minute", "second", "millisecond"]);
	}

	/**
	 * @private
	 */

	const monthsLong = [
	  "January",
	  "February",
	  "March",
	  "April",
	  "May",
	  "June",
	  "July",
	  "August",
	  "September",
	  "October",
	  "November",
	  "December",
	];

	const monthsShort = [
	  "Jan",
	  "Feb",
	  "Mar",
	  "Apr",
	  "May",
	  "Jun",
	  "Jul",
	  "Aug",
	  "Sep",
	  "Oct",
	  "Nov",
	  "Dec",
	];

	const monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];

	function months(length) {
	  switch (length) {
	    case "narrow":
	      return [...monthsNarrow];
	    case "short":
	      return [...monthsShort];
	    case "long":
	      return [...monthsLong];
	    case "numeric":
	      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
	    case "2-digit":
	      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
	    default:
	      return null;
	  }
	}

	const weekdaysLong = [
	  "Monday",
	  "Tuesday",
	  "Wednesday",
	  "Thursday",
	  "Friday",
	  "Saturday",
	  "Sunday",
	];

	const weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

	const weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];

	function weekdays(length) {
	  switch (length) {
	    case "narrow":
	      return [...weekdaysNarrow];
	    case "short":
	      return [...weekdaysShort];
	    case "long":
	      return [...weekdaysLong];
	    case "numeric":
	      return ["1", "2", "3", "4", "5", "6", "7"];
	    default:
	      return null;
	  }
	}

	const meridiems = ["AM", "PM"];

	const erasLong = ["Before Christ", "Anno Domini"];

	const erasShort = ["BC", "AD"];

	const erasNarrow = ["B", "A"];

	function eras(length) {
	  switch (length) {
	    case "narrow":
	      return [...erasNarrow];
	    case "short":
	      return [...erasShort];
	    case "long":
	      return [...erasLong];
	    default:
	      return null;
	  }
	}

	function meridiemForDateTime(dt) {
	  return meridiems[dt.hour < 12 ? 0 : 1];
	}

	function weekdayForDateTime(dt, length) {
	  return weekdays(length)[dt.weekday - 1];
	}

	function monthForDateTime(dt, length) {
	  return months(length)[dt.month - 1];
	}

	function eraForDateTime(dt, length) {
	  return eras(length)[dt.year < 0 ? 0 : 1];
	}

	function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
	  const units = {
	    years: ["year", "yr."],
	    quarters: ["quarter", "qtr."],
	    months: ["month", "mo."],
	    weeks: ["week", "wk."],
	    days: ["day", "day", "days"],
	    hours: ["hour", "hr."],
	    minutes: ["minute", "min."],
	    seconds: ["second", "sec."],
	  };

	  const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

	  if (numeric === "auto" && lastable) {
	    const isDay = unit === "days";
	    switch (count) {
	      case 1:
	        return isDay ? "tomorrow" : `next ${units[unit][0]}`;
	      case -1:
	        return isDay ? "yesterday" : `last ${units[unit][0]}`;
	      case 0:
	        return isDay ? "today" : `this ${units[unit][0]}`;
	    }
	  }

	  const isInPast = Object.is(count, -0) || count < 0,
	    fmtValue = Math.abs(count),
	    singular = fmtValue === 1,
	    lilUnits = units[unit],
	    fmtUnit = narrow
	      ? singular
	        ? lilUnits[1]
	        : lilUnits[2] || lilUnits[1]
	      : singular
	      ? units[unit][0]
	      : unit;
	  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
	}

	function stringifyTokens(splits, tokenToString) {
	  let s = "";
	  for (const token of splits) {
	    if (token.literal) {
	      s += token.val;
	    } else {
	      s += tokenToString(token.val);
	    }
	  }
	  return s;
	}

	const macroTokenToFormatOpts = {
	  D: DATE_SHORT,
	  DD: DATE_MED,
	  DDD: DATE_FULL,
	  DDDD: DATE_HUGE,
	  t: TIME_SIMPLE,
	  tt: TIME_WITH_SECONDS,
	  ttt: TIME_WITH_SHORT_OFFSET,
	  tttt: TIME_WITH_LONG_OFFSET,
	  T: TIME_24_SIMPLE,
	  TT: TIME_24_WITH_SECONDS,
	  TTT: TIME_24_WITH_SHORT_OFFSET,
	  TTTT: TIME_24_WITH_LONG_OFFSET,
	  f: DATETIME_SHORT,
	  ff: DATETIME_MED,
	  fff: DATETIME_FULL,
	  ffff: DATETIME_HUGE,
	  F: DATETIME_SHORT_WITH_SECONDS,
	  FF: DATETIME_MED_WITH_SECONDS,
	  FFF: DATETIME_FULL_WITH_SECONDS,
	  FFFF: DATETIME_HUGE_WITH_SECONDS,
	};

	/**
	 * @private
	 */

	class Formatter {
	  static create(locale, opts = {}) {
	    return new Formatter(locale, opts);
	  }

	  static parseFormat(fmt) {
	    // white-space is always considered a literal in user-provided formats
	    // the " " token has a special meaning (see unitForToken)

	    let current = null,
	      currentFull = "",
	      bracketed = false;
	    const splits = [];
	    for (let i = 0; i < fmt.length; i++) {
	      const c = fmt.charAt(i);
	      if (c === "'") {
	        if (currentFull.length > 0) {
	          splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
	        }
	        current = null;
	        currentFull = "";
	        bracketed = !bracketed;
	      } else if (bracketed) {
	        currentFull += c;
	      } else if (c === current) {
	        currentFull += c;
	      } else {
	        if (currentFull.length > 0) {
	          splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
	        }
	        currentFull = c;
	        current = c;
	      }
	    }

	    if (currentFull.length > 0) {
	      splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
	    }

	    return splits;
	  }

	  static macroTokenToFormatOpts(token) {
	    return macroTokenToFormatOpts[token];
	  }

	  constructor(locale, formatOpts) {
	    this.opts = formatOpts;
	    this.loc = locale;
	    this.systemLoc = null;
	  }

	  formatWithSystemDefault(dt, opts) {
	    if (this.systemLoc === null) {
	      this.systemLoc = this.loc.redefaultToSystem();
	    }
	    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
	    return df.format();
	  }

	  dtFormatter(dt, opts = {}) {
	    return this.loc.dtFormatter(dt, { ...this.opts, ...opts });
	  }

	  formatDateTime(dt, opts) {
	    return this.dtFormatter(dt, opts).format();
	  }

	  formatDateTimeParts(dt, opts) {
	    return this.dtFormatter(dt, opts).formatToParts();
	  }

	  formatInterval(interval, opts) {
	    const df = this.dtFormatter(interval.start, opts);
	    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
	  }

	  resolvedOptions(dt, opts) {
	    return this.dtFormatter(dt, opts).resolvedOptions();
	  }

	  num(n, p = 0) {
	    // we get some perf out of doing this here, annoyingly
	    if (this.opts.forceSimple) {
	      return padStart(n, p);
	    }

	    const opts = { ...this.opts };

	    if (p > 0) {
	      opts.padTo = p;
	    }

	    return this.loc.numberFormatter(opts).format(n);
	  }

	  formatDateTimeFromString(dt, fmt) {
	    const knownEnglish = this.loc.listingMode() === "en",
	      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory",
	      string = (opts, extract) => this.loc.extract(dt, opts, extract),
	      formatOffset = (opts) => {
	        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
	          return "Z";
	        }

	        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
	      },
	      meridiem = () =>
	        knownEnglish
	          ? meridiemForDateTime(dt)
	          : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"),
	      month = (length, standalone) =>
	        knownEnglish
	          ? monthForDateTime(dt, length)
	          : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"),
	      weekday = (length, standalone) =>
	        knownEnglish
	          ? weekdayForDateTime(dt, length)
	          : string(
	              standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
	              "weekday"
	            ),
	      maybeMacro = (token) => {
	        const formatOpts = Formatter.macroTokenToFormatOpts(token);
	        if (formatOpts) {
	          return this.formatWithSystemDefault(dt, formatOpts);
	        } else {
	          return token;
	        }
	      },
	      era = (length) =>
	        knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"),
	      tokenToString = (token) => {
	        // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols
	        switch (token) {
	          // ms
	          case "S":
	            return this.num(dt.millisecond);
	          case "u":
	          // falls through
	          case "SSS":
	            return this.num(dt.millisecond, 3);
	          // seconds
	          case "s":
	            return this.num(dt.second);
	          case "ss":
	            return this.num(dt.second, 2);
	          // fractional seconds
	          case "uu":
	            return this.num(Math.floor(dt.millisecond / 10), 2);
	          case "uuu":
	            return this.num(Math.floor(dt.millisecond / 100));
	          // minutes
	          case "m":
	            return this.num(dt.minute);
	          case "mm":
	            return this.num(dt.minute, 2);
	          // hours
	          case "h":
	            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
	          case "hh":
	            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
	          case "H":
	            return this.num(dt.hour);
	          case "HH":
	            return this.num(dt.hour, 2);
	          // offset
	          case "Z":
	            // like +6
	            return formatOffset({ format: "narrow", allowZ: this.opts.allowZ });
	          case "ZZ":
	            // like +06:00
	            return formatOffset({ format: "short", allowZ: this.opts.allowZ });
	          case "ZZZ":
	            // like +0600
	            return formatOffset({ format: "techie", allowZ: this.opts.allowZ });
	          case "ZZZZ":
	            // like EST
	            return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
	          case "ZZZZZ":
	            // like Eastern Standard Time
	            return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
	          // zone
	          case "z":
	            // like America/New_York
	            return dt.zoneName;
	          // meridiems
	          case "a":
	            return meridiem();
	          // dates
	          case "d":
	            return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
	          case "dd":
	            return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
	          // weekdays - standalone
	          case "c":
	            // like 1
	            return this.num(dt.weekday);
	          case "ccc":
	            // like 'Tues'
	            return weekday("short", true);
	          case "cccc":
	            // like 'Tuesday'
	            return weekday("long", true);
	          case "ccccc":
	            // like 'T'
	            return weekday("narrow", true);
	          // weekdays - format
	          case "E":
	            // like 1
	            return this.num(dt.weekday);
	          case "EEE":
	            // like 'Tues'
	            return weekday("short", false);
	          case "EEEE":
	            // like 'Tuesday'
	            return weekday("long", false);
	          case "EEEEE":
	            // like 'T'
	            return weekday("narrow", false);
	          // months - standalone
	          case "L":
	            // like 1
	            return useDateTimeFormatter
	              ? string({ month: "numeric", day: "numeric" }, "month")
	              : this.num(dt.month);
	          case "LL":
	            // like 01, doesn't seem to work
	            return useDateTimeFormatter
	              ? string({ month: "2-digit", day: "numeric" }, "month")
	              : this.num(dt.month, 2);
	          case "LLL":
	            // like Jan
	            return month("short", true);
	          case "LLLL":
	            // like January
	            return month("long", true);
	          case "LLLLL":
	            // like J
	            return month("narrow", true);
	          // months - format
	          case "M":
	            // like 1
	            return useDateTimeFormatter
	              ? string({ month: "numeric" }, "month")
	              : this.num(dt.month);
	          case "MM":
	            // like 01
	            return useDateTimeFormatter
	              ? string({ month: "2-digit" }, "month")
	              : this.num(dt.month, 2);
	          case "MMM":
	            // like Jan
	            return month("short", false);
	          case "MMMM":
	            // like January
	            return month("long", false);
	          case "MMMMM":
	            // like J
	            return month("narrow", false);
	          // years
	          case "y":
	            // like 2014
	            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
	          case "yy":
	            // like 14
	            return useDateTimeFormatter
	              ? string({ year: "2-digit" }, "year")
	              : this.num(dt.year.toString().slice(-2), 2);
	          case "yyyy":
	            // like 0012
	            return useDateTimeFormatter
	              ? string({ year: "numeric" }, "year")
	              : this.num(dt.year, 4);
	          case "yyyyyy":
	            // like 000012
	            return useDateTimeFormatter
	              ? string({ year: "numeric" }, "year")
	              : this.num(dt.year, 6);
	          // eras
	          case "G":
	            // like AD
	            return era("short");
	          case "GG":
	            // like Anno Domini
	            return era("long");
	          case "GGGGG":
	            return era("narrow");
	          case "kk":
	            return this.num(dt.weekYear.toString().slice(-2), 2);
	          case "kkkk":
	            return this.num(dt.weekYear, 4);
	          case "W":
	            return this.num(dt.weekNumber);
	          case "WW":
	            return this.num(dt.weekNumber, 2);
	          case "n":
	            return this.num(dt.localWeekNumber);
	          case "nn":
	            return this.num(dt.localWeekNumber, 2);
	          case "ii":
	            return this.num(dt.localWeekYear.toString().slice(-2), 2);
	          case "iiii":
	            return this.num(dt.localWeekYear, 4);
	          case "o":
	            return this.num(dt.ordinal);
	          case "ooo":
	            return this.num(dt.ordinal, 3);
	          case "q":
	            // like 1
	            return this.num(dt.quarter);
	          case "qq":
	            // like 01
	            return this.num(dt.quarter, 2);
	          case "X":
	            return this.num(Math.floor(dt.ts / 1000));
	          case "x":
	            return this.num(dt.ts);
	          default:
	            return maybeMacro(token);
	        }
	      };

	    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
	  }

	  formatDurationFromString(dur, fmt) {
	    const tokenToField = (token) => {
	        switch (token[0]) {
	          case "S":
	            return "millisecond";
	          case "s":
	            return "second";
	          case "m":
	            return "minute";
	          case "h":
	            return "hour";
	          case "d":
	            return "day";
	          case "w":
	            return "week";
	          case "M":
	            return "month";
	          case "y":
	            return "year";
	          default:
	            return null;
	        }
	      },
	      tokenToString = (lildur) => (token) => {
	        const mapped = tokenToField(token);
	        if (mapped) {
	          return this.num(lildur.get(mapped), token.length);
	        } else {
	          return token;
	        }
	      },
	      tokens = Formatter.parseFormat(fmt),
	      realTokens = tokens.reduce(
	        (found, { literal, val }) => (literal ? found : found.concat(val)),
	        []
	      ),
	      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
	    return stringifyTokens(tokens, tokenToString(collapsed));
	  }
	}

	/*
	 * This file handles parsing for well-specified formats. Here's how it works:
	 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
	 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
	 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
	 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
	 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
	 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
	 */

	const ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;

	function combineRegexes(...regexes) {
	  const full = regexes.reduce((f, r) => f + r.source, "");
	  return RegExp(`^${full}$`);
	}

	function combineExtractors(...extractors) {
	  return (m) =>
	    extractors
	      .reduce(
	        ([mergedVals, mergedZone, cursor], ex) => {
	          const [val, zone, next] = ex(m, cursor);
	          return [{ ...mergedVals, ...val }, zone || mergedZone, next];
	        },
	        [{}, null, 1]
	      )
	      .slice(0, 2);
	}

	function parse$1(s, ...patterns) {
	  if (s == null) {
	    return [null, null];
	  }

	  for (const [regex, extractor] of patterns) {
	    const m = regex.exec(s);
	    if (m) {
	      return extractor(m);
	    }
	  }
	  return [null, null];
	}

	function simpleParse(...keys) {
	  return (match, cursor) => {
	    const ret = {};
	    let i;

	    for (i = 0; i < keys.length; i++) {
	      ret[keys[i]] = parseInteger(match[cursor + i]);
	    }
	    return [ret, null, cursor + i];
	  };
	}

	// ISO and SQL parsing
	const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
	const isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
	const isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
	const isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
	const isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
	const isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
	const isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
	const isoOrdinalRegex = /(\d{4})-?(\d{3})/;
	const extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
	const extractISOOrdinalData = simpleParse("year", "ordinal");
	const sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
	const sqlTimeRegex = RegExp(
	  `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
	);
	const sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);

	function int(match, pos, fallback) {
	  const m = match[pos];
	  return isUndefined$1(m) ? fallback : parseInteger(m);
	}

	function extractISOYmd(match, cursor) {
	  const item = {
	    year: int(match, cursor),
	    month: int(match, cursor + 1, 1),
	    day: int(match, cursor + 2, 1),
	  };

	  return [item, null, cursor + 3];
	}

	function extractISOTime(match, cursor) {
	  const item = {
	    hours: int(match, cursor, 0),
	    minutes: int(match, cursor + 1, 0),
	    seconds: int(match, cursor + 2, 0),
	    milliseconds: parseMillis(match[cursor + 3]),
	  };

	  return [item, null, cursor + 4];
	}

	function extractISOOffset(match, cursor) {
	  const local = !match[cursor] && !match[cursor + 1],
	    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
	    zone = local ? null : FixedOffsetZone.instance(fullOffset);
	  return [{}, zone, cursor + 3];
	}

	function extractIANAZone(match, cursor) {
	  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
	  return [{}, zone, cursor + 1];
	}

	// ISO time parsing

	const isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);

	// ISO duration parsing

	const isoDuration =
	  /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;

	function extractISODuration(match) {
	  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =
	    match;

	  const hasNegativePrefix = s[0] === "-";
	  const negativeSeconds = secondStr && secondStr[0] === "-";

	  const maybeNegate = (num, force = false) =>
	    num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;

	  return [
	    {
	      years: maybeNegate(parseFloating(yearStr)),
	      months: maybeNegate(parseFloating(monthStr)),
	      weeks: maybeNegate(parseFloating(weekStr)),
	      days: maybeNegate(parseFloating(dayStr)),
	      hours: maybeNegate(parseFloating(hourStr)),
	      minutes: maybeNegate(parseFloating(minuteStr)),
	      seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
	      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),
	    },
	  ];
	}

	// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
	// and not just that we're in -240 *right now*. But since I don't think these are used that often
	// I'm just going to ignore that
	const obsOffsets = {
	  GMT: 0,
	  EDT: -4 * 60,
	  EST: -5 * 60,
	  CDT: -5 * 60,
	  CST: -6 * 60,
	  MDT: -6 * 60,
	  MST: -7 * 60,
	  PDT: -7 * 60,
	  PST: -8 * 60,
	};

	function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
	  const result = {
	    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
	    month: monthsShort.indexOf(monthStr) + 1,
	    day: parseInteger(dayStr),
	    hour: parseInteger(hourStr),
	    minute: parseInteger(minuteStr),
	  };

	  if (secondStr) result.second = parseInteger(secondStr);
	  if (weekdayStr) {
	    result.weekday =
	      weekdayStr.length > 3
	        ? weekdaysLong.indexOf(weekdayStr) + 1
	        : weekdaysShort.indexOf(weekdayStr) + 1;
	  }

	  return result;
	}

	// RFC 2822/5322
	const rfc2822 =
	  /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

	function extractRFC2822(match) {
	  const [
	      ,
	      weekdayStr,
	      dayStr,
	      monthStr,
	      yearStr,
	      hourStr,
	      minuteStr,
	      secondStr,
	      obsOffset,
	      milOffset,
	      offHourStr,
	      offMinuteStr,
	    ] = match,
	    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

	  let offset;
	  if (obsOffset) {
	    offset = obsOffsets[obsOffset];
	  } else if (milOffset) {
	    offset = 0;
	  } else {
	    offset = signedOffset(offHourStr, offMinuteStr);
	  }

	  return [result, new FixedOffsetZone(offset)];
	}

	function preprocessRFC2822(s) {
	  // Remove comments and folding whitespace and replace multiple-spaces with a single space
	  return s
	    .replace(/\([^()]*\)|[\n\t]/g, " ")
	    .replace(/(\s\s+)/g, " ")
	    .trim();
	}

	// http date

	const rfc1123 =
	    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
	  rfc850 =
	    /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
	  ascii =
	    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

	function extractRFC1123Or850(match) {
	  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,
	    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
	  return [result, FixedOffsetZone.utcInstance];
	}

	function extractASCII(match) {
	  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,
	    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
	  return [result, FixedOffsetZone.utcInstance];
	}

	const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
	const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
	const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
	const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);

	const extractISOYmdTimeAndOffset = combineExtractors(
	  extractISOYmd,
	  extractISOTime,
	  extractISOOffset,
	  extractIANAZone
	);
	const extractISOWeekTimeAndOffset = combineExtractors(
	  extractISOWeekData,
	  extractISOTime,
	  extractISOOffset,
	  extractIANAZone
	);
	const extractISOOrdinalDateAndTime = combineExtractors(
	  extractISOOrdinalData,
	  extractISOTime,
	  extractISOOffset,
	  extractIANAZone
	);
	const extractISOTimeAndOffset = combineExtractors(
	  extractISOTime,
	  extractISOOffset,
	  extractIANAZone
	);

	/*
	 * @private
	 */

	function parseISODate(s) {
	  return parse$1(
	    s,
	    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
	    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
	    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
	    [isoTimeCombinedRegex, extractISOTimeAndOffset]
	  );
	}

	function parseRFC2822Date(s) {
	  return parse$1(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
	}

	function parseHTTPDate(s) {
	  return parse$1(
	    s,
	    [rfc1123, extractRFC1123Or850],
	    [rfc850, extractRFC1123Or850],
	    [ascii, extractASCII]
	  );
	}

	function parseISODuration(s) {
	  return parse$1(s, [isoDuration, extractISODuration]);
	}

	const extractISOTimeOnly = combineExtractors(extractISOTime);

	function parseISOTimeOnly(s) {
	  return parse$1(s, [isoTimeOnly, extractISOTimeOnly]);
	}

	const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
	const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);

	const extractISOTimeOffsetAndIANAZone = combineExtractors(
	  extractISOTime,
	  extractISOOffset,
	  extractIANAZone
	);

	function parseSQL(s) {
	  return parse$1(
	    s,
	    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
	    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
	  );
	}

	const INVALID$2 = "Invalid Duration";

	// unit conversion constants
	const lowOrderMatrix = {
	    weeks: {
	      days: 7,
	      hours: 7 * 24,
	      minutes: 7 * 24 * 60,
	      seconds: 7 * 24 * 60 * 60,
	      milliseconds: 7 * 24 * 60 * 60 * 1000,
	    },
	    days: {
	      hours: 24,
	      minutes: 24 * 60,
	      seconds: 24 * 60 * 60,
	      milliseconds: 24 * 60 * 60 * 1000,
	    },
	    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
	    minutes: { seconds: 60, milliseconds: 60 * 1000 },
	    seconds: { milliseconds: 1000 },
	  },
	  casualMatrix = {
	    years: {
	      quarters: 4,
	      months: 12,
	      weeks: 52,
	      days: 365,
	      hours: 365 * 24,
	      minutes: 365 * 24 * 60,
	      seconds: 365 * 24 * 60 * 60,
	      milliseconds: 365 * 24 * 60 * 60 * 1000,
	    },
	    quarters: {
	      months: 3,
	      weeks: 13,
	      days: 91,
	      hours: 91 * 24,
	      minutes: 91 * 24 * 60,
	      seconds: 91 * 24 * 60 * 60,
	      milliseconds: 91 * 24 * 60 * 60 * 1000,
	    },
	    months: {
	      weeks: 4,
	      days: 30,
	      hours: 30 * 24,
	      minutes: 30 * 24 * 60,
	      seconds: 30 * 24 * 60 * 60,
	      milliseconds: 30 * 24 * 60 * 60 * 1000,
	    },

	    ...lowOrderMatrix,
	  },
	  daysInYearAccurate = 146097.0 / 400,
	  daysInMonthAccurate = 146097.0 / 4800,
	  accurateMatrix = {
	    years: {
	      quarters: 4,
	      months: 12,
	      weeks: daysInYearAccurate / 7,
	      days: daysInYearAccurate,
	      hours: daysInYearAccurate * 24,
	      minutes: daysInYearAccurate * 24 * 60,
	      seconds: daysInYearAccurate * 24 * 60 * 60,
	      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,
	    },
	    quarters: {
	      months: 3,
	      weeks: daysInYearAccurate / 28,
	      days: daysInYearAccurate / 4,
	      hours: (daysInYearAccurate * 24) / 4,
	      minutes: (daysInYearAccurate * 24 * 60) / 4,
	      seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,
	      milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,
	    },
	    months: {
	      weeks: daysInMonthAccurate / 7,
	      days: daysInMonthAccurate,
	      hours: daysInMonthAccurate * 24,
	      minutes: daysInMonthAccurate * 24 * 60,
	      seconds: daysInMonthAccurate * 24 * 60 * 60,
	      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,
	    },
	    ...lowOrderMatrix,
	  };

	// units ordered by size
	const orderedUnits$1 = [
	  "years",
	  "quarters",
	  "months",
	  "weeks",
	  "days",
	  "hours",
	  "minutes",
	  "seconds",
	  "milliseconds",
	];

	const reverseUnits = orderedUnits$1.slice(0).reverse();

	// clone really means "create another instance just like this one, but with these changes"
	function clone$1(dur, alts, clear = false) {
	  // deep merge for vals
	  const conf = {
	    values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },
	    loc: dur.loc.clone(alts.loc),
	    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
	    matrix: alts.matrix || dur.matrix,
	  };
	  return new Duration(conf);
	}

	function durationToMillis(matrix, vals) {
	  let sum = vals.milliseconds ?? 0;
	  for (const unit of reverseUnits.slice(1)) {
	    if (vals[unit]) {
	      sum += vals[unit] * matrix[unit]["milliseconds"];
	    }
	  }
	  return sum;
	}

	// NB: mutates parameters
	function normalizeValues(matrix, vals) {
	  // the logic below assumes the overall value of the duration is positive
	  // if this is not the case, factor is used to make it so
	  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;

	  orderedUnits$1.reduceRight((previous, current) => {
	    if (!isUndefined$1(vals[current])) {
	      if (previous) {
	        const previousVal = vals[previous] * factor;
	        const conv = matrix[current][previous];

	        // if (previousVal < 0):
	        // lower order unit is negative (e.g. { years: 2, days: -2 })
	        // normalize this by reducing the higher order unit by the appropriate amount
	        // and increasing the lower order unit
	        // this can never make the higher order unit negative, because this function only operates
	        // on positive durations, so the amount of time represented by the lower order unit cannot
	        // be larger than the higher order unit
	        // else:
	        // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })
	        // in this case we attempt to convert as much as possible from the lower order unit into
	        // the higher order one
	        //
	        // Math.floor takes care of both of these cases, rounding away from 0
	        // if previousVal < 0 it makes the absolute value larger
	        // if previousVal >= it makes the absolute value smaller
	        const rollUp = Math.floor(previousVal / conv);
	        vals[current] += rollUp * factor;
	        vals[previous] -= rollUp * conv * factor;
	      }
	      return current;
	    } else {
	      return previous;
	    }
	  }, null);

	  // try to convert any decimals into smaller units if possible
	  // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }
	  orderedUnits$1.reduce((previous, current) => {
	    if (!isUndefined$1(vals[current])) {
	      if (previous) {
	        const fraction = vals[previous] % 1;
	        vals[previous] -= fraction;
	        vals[current] += fraction * matrix[previous][current];
	      }
	      return current;
	    } else {
	      return previous;
	    }
	  }, null);
	}

	// Remove all properties with a value of 0 from an object
	function removeZeroes(vals) {
	  const newVals = {};
	  for (const [key, value] of Object.entries(vals)) {
	    if (value !== 0) {
	      newVals[key] = value;
	    }
	  }
	  return newVals;
	}

	/**
	 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
	 *
	 * Here is a brief overview of commonly used methods and getters in Duration:
	 *
	 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
	 * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
	 * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
	 * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
	 * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
	 *
	 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
	 */
	class Duration {
	  /**
	   * @private
	   */
	  constructor(config) {
	    const accurate = config.conversionAccuracy === "longterm" || false;
	    let matrix = accurate ? accurateMatrix : casualMatrix;

	    if (config.matrix) {
	      matrix = config.matrix;
	    }

	    /**
	     * @access private
	     */
	    this.values = config.values;
	    /**
	     * @access private
	     */
	    this.loc = config.loc || Locale.create();
	    /**
	     * @access private
	     */
	    this.conversionAccuracy = accurate ? "longterm" : "casual";
	    /**
	     * @access private
	     */
	    this.invalid = config.invalid || null;
	    /**
	     * @access private
	     */
	    this.matrix = matrix;
	    /**
	     * @access private
	     */
	    this.isLuxonDuration = true;
	  }

	  /**
	   * Create Duration from a number of milliseconds.
	   * @param {number} count of milliseconds
	   * @param {Object} opts - options for parsing
	   * @param {string} [opts.locale='en-US'] - the locale to use
	   * @param {string} opts.numberingSystem - the numbering system to use
	   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
	   * @return {Duration}
	   */
	  static fromMillis(count, opts) {
	    return Duration.fromObject({ milliseconds: count }, opts);
	  }

	  /**
	   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
	   * If this object is empty then a zero milliseconds duration is returned.
	   * @param {Object} obj - the object to create the DateTime from
	   * @param {number} obj.years
	   * @param {number} obj.quarters
	   * @param {number} obj.months
	   * @param {number} obj.weeks
	   * @param {number} obj.days
	   * @param {number} obj.hours
	   * @param {number} obj.minutes
	   * @param {number} obj.seconds
	   * @param {number} obj.milliseconds
	   * @param {Object} [opts=[]] - options for creating this Duration
	   * @param {string} [opts.locale='en-US'] - the locale to use
	   * @param {string} opts.numberingSystem - the numbering system to use
	   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
	   * @param {string} [opts.matrix=Object] - the custom conversion system to use
	   * @return {Duration}
	   */
	  static fromObject(obj, opts = {}) {
	    if (obj == null || typeof obj !== "object") {
	      throw new InvalidArgumentError(
	        `Duration.fromObject: argument expected to be an object, got ${
          obj === null ? "null" : typeof obj
        }`
	      );
	    }

	    return new Duration({
	      values: normalizeObject(obj, Duration.normalizeUnit),
	      loc: Locale.fromObject(opts),
	      conversionAccuracy: opts.conversionAccuracy,
	      matrix: opts.matrix,
	    });
	  }

	  /**
	   * Create a Duration from DurationLike.
	   *
	   * @param {Object | number | Duration} durationLike
	   * One of:
	   * - object with keys like 'years' and 'hours'.
	   * - number representing milliseconds
	   * - Duration instance
	   * @return {Duration}
	   */
	  static fromDurationLike(durationLike) {
	    if (isNumber$1(durationLike)) {
	      return Duration.fromMillis(durationLike);
	    } else if (Duration.isDuration(durationLike)) {
	      return durationLike;
	    } else if (typeof durationLike === "object") {
	      return Duration.fromObject(durationLike);
	    } else {
	      throw new InvalidArgumentError(
	        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
	      );
	    }
	  }

	  /**
	   * Create a Duration from an ISO 8601 duration string.
	   * @param {string} text - text to parse
	   * @param {Object} opts - options for parsing
	   * @param {string} [opts.locale='en-US'] - the locale to use
	   * @param {string} opts.numberingSystem - the numbering system to use
	   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
	   * @param {string} [opts.matrix=Object] - the preset conversion system to use
	   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
	   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
	   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
	   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
	   * @return {Duration}
	   */
	  static fromISO(text, opts) {
	    const [parsed] = parseISODuration(text);
	    if (parsed) {
	      return Duration.fromObject(parsed, opts);
	    } else {
	      return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
	    }
	  }

	  /**
	   * Create a Duration from an ISO 8601 time string.
	   * @param {string} text - text to parse
	   * @param {Object} opts - options for parsing
	   * @param {string} [opts.locale='en-US'] - the locale to use
	   * @param {string} opts.numberingSystem - the numbering system to use
	   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
	   * @param {string} [opts.matrix=Object] - the conversion system to use
	   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
	   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
	   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
	   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
	   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
	   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
	   * @return {Duration}
	   */
	  static fromISOTime(text, opts) {
	    const [parsed] = parseISOTimeOnly(text);
	    if (parsed) {
	      return Duration.fromObject(parsed, opts);
	    } else {
	      return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
	    }
	  }

	  /**
	   * Create an invalid Duration.
	   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
	   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
	   * @return {Duration}
	   */
	  static invalid(reason, explanation = null) {
	    if (!reason) {
	      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
	    }

	    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

	    if (Settings.throwOnInvalid) {
	      throw new InvalidDurationError(invalid);
	    } else {
	      return new Duration({ invalid });
	    }
	  }

	  /**
	   * @private
	   */
	  static normalizeUnit(unit) {
	    const normalized = {
	      year: "years",
	      years: "years",
	      quarter: "quarters",
	      quarters: "quarters",
	      month: "months",
	      months: "months",
	      week: "weeks",
	      weeks: "weeks",
	      day: "days",
	      days: "days",
	      hour: "hours",
	      hours: "hours",
	      minute: "minutes",
	      minutes: "minutes",
	      second: "seconds",
	      seconds: "seconds",
	      millisecond: "milliseconds",
	      milliseconds: "milliseconds",
	    }[unit ? unit.toLowerCase() : unit];

	    if (!normalized) throw new InvalidUnitError(unit);

	    return normalized;
	  }

	  /**
	   * Check if an object is a Duration. Works across context boundaries
	   * @param {object} o
	   * @return {boolean}
	   */
	  static isDuration(o) {
	    return (o && o.isLuxonDuration) || false;
	  }

	  /**
	   * Get  the locale of a Duration, such 'en-GB'
	   * @type {string}
	   */
	  get locale() {
	    return this.isValid ? this.loc.locale : null;
	  }

	  /**
	   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
	   *
	   * @type {string}
	   */
	  get numberingSystem() {
	    return this.isValid ? this.loc.numberingSystem : null;
	  }

	  /**
	   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
	   * * `S` for milliseconds
	   * * `s` for seconds
	   * * `m` for minutes
	   * * `h` for hours
	   * * `d` for days
	   * * `w` for weeks
	   * * `M` for months
	   * * `y` for years
	   * Notes:
	   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
	   * * Tokens can be escaped by wrapping with single quotes.
	   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
	   * @param {string} fmt - the format string
	   * @param {Object} opts - options
	   * @param {boolean} [opts.floor=true] - floor numerical values
	   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
	   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
	   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
	   * @return {string}
	   */
	  toFormat(fmt, opts = {}) {
	    // reverse-compat since 1.2; we always round down now, never up, and we do it by default
	    const fmtOpts = {
	      ...opts,
	      floor: opts.round !== false && opts.floor !== false,
	    };
	    return this.isValid
	      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)
	      : INVALID$2;
	  }

	  /**
	   * Returns a string representation of a Duration with all units included.
	   * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
	   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
	   * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
	   * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
	   * @example
	   * ```js
	   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
	   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
	   * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
	   * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
	   * ```
	   */
	  toHuman(opts = {}) {
	    if (!this.isValid) return INVALID$2;

	    const l = orderedUnits$1
	      .map((unit) => {
	        const val = this.values[unit];
	        if (isUndefined$1(val)) {
	          return null;
	        }
	        return this.loc
	          .numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) })
	          .format(val);
	      })
	      .filter((n) => n);

	    return this.loc
	      .listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts })
	      .format(l);
	  }

	  /**
	   * Returns a JavaScript object with this Duration's values.
	   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
	   * @return {Object}
	   */
	  toObject() {
	    if (!this.isValid) return {};
	    return { ...this.values };
	  }

	  /**
	   * Returns an ISO 8601-compliant string representation of this Duration.
	   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
	   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
	   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
	   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
	   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
	   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
	   * @return {string}
	   */
	  toISO() {
	    // we could use the formatter, but this is an easier way to get the minimum string
	    if (!this.isValid) return null;

	    let s = "P";
	    if (this.years !== 0) s += this.years + "Y";
	    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
	    if (this.weeks !== 0) s += this.weeks + "W";
	    if (this.days !== 0) s += this.days + "D";
	    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
	      s += "T";
	    if (this.hours !== 0) s += this.hours + "H";
	    if (this.minutes !== 0) s += this.minutes + "M";
	    if (this.seconds !== 0 || this.milliseconds !== 0)
	      // this will handle "floating point madness" by removing extra decimal places
	      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
	      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
	    if (s === "P") s += "T0S";
	    return s;
	  }

	  /**
	   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
	   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
	   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
	   * @param {Object} opts - options
	   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
	   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
	   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
	   * @param {string} [opts.format='extended'] - choose between the basic and extended format
	   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
	   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
	   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
	   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
	   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
	   * @return {string}
	   */
	  toISOTime(opts = {}) {
	    if (!this.isValid) return null;

	    const millis = this.toMillis();
	    if (millis < 0 || millis >= 86400000) return null;

	    opts = {
	      suppressMilliseconds: false,
	      suppressSeconds: false,
	      includePrefix: false,
	      format: "extended",
	      ...opts,
	      includeOffset: false,
	    };

	    const dateTime = DateTime.fromMillis(millis, { zone: "UTC" });
	    return dateTime.toISOTime(opts);
	  }

	  /**
	   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
	   * @return {string}
	   */
	  toJSON() {
	    return this.toISO();
	  }

	  /**
	   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
	   * @return {string}
	   */
	  toString() {
	    return this.toISO();
	  }

	  /**
	   * Returns a string representation of this Duration appropriate for the REPL.
	   * @return {string}
	   */
	  [Symbol.for("nodejs.util.inspect.custom")]() {
	    if (this.isValid) {
	      return `Duration { values: ${JSON.stringify(this.values)} }`;
	    } else {
	      return `Duration { Invalid, reason: ${this.invalidReason} }`;
	    }
	  }

	  /**
	   * Returns an milliseconds value of this Duration.
	   * @return {number}
	   */
	  toMillis() {
	    if (!this.isValid) return NaN;

	    return durationToMillis(this.matrix, this.values);
	  }

	  /**
	   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
	   * @return {number}
	   */
	  valueOf() {
	    return this.toMillis();
	  }

	  /**
	   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
	   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
	   * @return {Duration}
	   */
	  plus(duration) {
	    if (!this.isValid) return this;

	    const dur = Duration.fromDurationLike(duration),
	      result = {};

	    for (const k of orderedUnits$1) {
	      if (hasOwnProperty$1(dur.values, k) || hasOwnProperty$1(this.values, k)) {
	        result[k] = dur.get(k) + this.get(k);
	      }
	    }

	    return clone$1(this, { values: result }, true);
	  }

	  /**
	   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
	   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
	   * @return {Duration}
	   */
	  minus(duration) {
	    if (!this.isValid) return this;

	    const dur = Duration.fromDurationLike(duration);
	    return this.plus(dur.negate());
	  }

	  /**
	   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
	   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
	   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
	   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
	   * @return {Duration}
	   */
	  mapUnits(fn) {
	    if (!this.isValid) return this;
	    const result = {};
	    for (const k of Object.keys(this.values)) {
	      result[k] = asNumber(fn(this.values[k], k));
	    }
	    return clone$1(this, { values: result }, true);
	  }

	  /**
	   * Get the value of unit.
	   * @param {string} unit - a unit such as 'minute' or 'day'
	   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
	   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
	   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
	   * @return {number}
	   */
	  get(unit) {
	    return this[Duration.normalizeUnit(unit)];
	  }

	  /**
	   * "Set" the values of specified units. Return a newly-constructed Duration.
	   * @param {Object} values - a mapping of units to numbers
	   * @example dur.set({ years: 2017 })
	   * @example dur.set({ hours: 8, minutes: 30 })
	   * @return {Duration}
	   */
	  set(values) {
	    if (!this.isValid) return this;

	    const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };
	    return clone$1(this, { values: mixed });
	  }

	  /**
	   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
	   * @example dur.reconfigure({ locale: 'en-GB' })
	   * @return {Duration}
	   */
	  reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
	    const loc = this.loc.clone({ locale, numberingSystem });
	    const opts = { loc, matrix, conversionAccuracy };
	    return clone$1(this, opts);
	  }

	  /**
	   * Return the length of the duration in the specified unit.
	   * @param {string} unit - a unit such as 'minutes' or 'days'
	   * @example Duration.fromObject({years: 1}).as('days') //=> 365
	   * @example Duration.fromObject({years: 1}).as('months') //=> 12
	   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
	   * @return {number}
	   */
	  as(unit) {
	    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
	  }

	  /**
	   * Reduce this Duration to its canonical representation in its current units.
	   * Assuming the overall value of the Duration is positive, this means:
	   * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
	   * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
	   *   the overall value would be negative, see third example)
	   * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
	   *
	   * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
	   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
	   * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
	   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
	   * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
	   * @return {Duration}
	   */
	  normalize() {
	    if (!this.isValid) return this;
	    const vals = this.toObject();
	    normalizeValues(this.matrix, vals);
	    return clone$1(this, { values: vals }, true);
	  }

	  /**
	   * Rescale units to its largest representation
	   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
	   * @return {Duration}
	   */
	  rescale() {
	    if (!this.isValid) return this;
	    const vals = removeZeroes(this.normalize().shiftToAll().toObject());
	    return clone$1(this, { values: vals }, true);
	  }

	  /**
	   * Convert this Duration into its representation in a different set of units.
	   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
	   * @return {Duration}
	   */
	  shiftTo(...units) {
	    if (!this.isValid) return this;

	    if (units.length === 0) {
	      return this;
	    }

	    units = units.map((u) => Duration.normalizeUnit(u));

	    const built = {},
	      accumulated = {},
	      vals = this.toObject();
	    let lastUnit;

	    for (const k of orderedUnits$1) {
	      if (units.indexOf(k) >= 0) {
	        lastUnit = k;

	        let own = 0;

	        // anything we haven't boiled down yet should get boiled to this unit
	        for (const ak in accumulated) {
	          own += this.matrix[ak][k] * accumulated[ak];
	          accumulated[ak] = 0;
	        }

	        // plus anything that's already in this unit
	        if (isNumber$1(vals[k])) {
	          own += vals[k];
	        }

	        // only keep the integer part for now in the hopes of putting any decimal part
	        // into a smaller unit later
	        const i = Math.trunc(own);
	        built[k] = i;
	        accumulated[k] = (own * 1000 - i * 1000) / 1000;

	        // otherwise, keep it in the wings to boil it later
	      } else if (isNumber$1(vals[k])) {
	        accumulated[k] = vals[k];
	      }
	    }

	    // anything leftover becomes the decimal for the last unit
	    // lastUnit must be defined since units is not empty
	    for (const key in accumulated) {
	      if (accumulated[key] !== 0) {
	        built[lastUnit] +=
	          key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
	      }
	    }

	    normalizeValues(this.matrix, built);
	    return clone$1(this, { values: built }, true);
	  }

	  /**
	   * Shift this Duration to all available units.
	   * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
	   * @return {Duration}
	   */
	  shiftToAll() {
	    if (!this.isValid) return this;
	    return this.shiftTo(
	      "years",
	      "months",
	      "weeks",
	      "days",
	      "hours",
	      "minutes",
	      "seconds",
	      "milliseconds"
	    );
	  }

	  /**
	   * Return the negative of this Duration.
	   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
	   * @return {Duration}
	   */
	  negate() {
	    if (!this.isValid) return this;
	    const negated = {};
	    for (const k of Object.keys(this.values)) {
	      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
	    }
	    return clone$1(this, { values: negated }, true);
	  }

	  /**
	   * Get the years.
	   * @type {number}
	   */
	  get years() {
	    return this.isValid ? this.values.years || 0 : NaN;
	  }

	  /**
	   * Get the quarters.
	   * @type {number}
	   */
	  get quarters() {
	    return this.isValid ? this.values.quarters || 0 : NaN;
	  }

	  /**
	   * Get the months.
	   * @type {number}
	   */
	  get months() {
	    return this.isValid ? this.values.months || 0 : NaN;
	  }

	  /**
	   * Get the weeks
	   * @type {number}
	   */
	  get weeks() {
	    return this.isValid ? this.values.weeks || 0 : NaN;
	  }

	  /**
	   * Get the days.
	   * @type {number}
	   */
	  get days() {
	    return this.isValid ? this.values.days || 0 : NaN;
	  }

	  /**
	   * Get the hours.
	   * @type {number}
	   */
	  get hours() {
	    return this.isValid ? this.values.hours || 0 : NaN;
	  }

	  /**
	   * Get the minutes.
	   * @type {number}
	   */
	  get minutes() {
	    return this.isValid ? this.values.minutes || 0 : NaN;
	  }

	  /**
	   * Get the seconds.
	   * @return {number}
	   */
	  get seconds() {
	    return this.isValid ? this.values.seconds || 0 : NaN;
	  }

	  /**
	   * Get the milliseconds.
	   * @return {number}
	   */
	  get milliseconds() {
	    return this.isValid ? this.values.milliseconds || 0 : NaN;
	  }

	  /**
	   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
	   * on invalid DateTimes or Intervals.
	   * @return {boolean}
	   */
	  get isValid() {
	    return this.invalid === null;
	  }

	  /**
	   * Returns an error code if this Duration became invalid, or null if the Duration is valid
	   * @return {string}
	   */
	  get invalidReason() {
	    return this.invalid ? this.invalid.reason : null;
	  }

	  /**
	   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
	   * @type {string}
	   */
	  get invalidExplanation() {
	    return this.invalid ? this.invalid.explanation : null;
	  }

	  /**
	   * Equality check
	   * Two Durations are equal iff they have the same units and the same values for each unit.
	   * @param {Duration} other
	   * @return {boolean}
	   */
	  equals(other) {
	    if (!this.isValid || !other.isValid) {
	      return false;
	    }

	    if (!this.loc.equals(other.loc)) {
	      return false;
	    }

	    function eq(v1, v2) {
	      // Consider 0 and undefined as equal
	      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
	      return v1 === v2;
	    }

	    for (const u of orderedUnits$1) {
	      if (!eq(this.values[u], other.values[u])) {
	        return false;
	      }
	    }
	    return true;
	  }
	}

	const INVALID$1 = "Invalid Interval";

	// checks if the start is equal to or before the end
	function validateStartEnd(start, end) {
	  if (!start || !start.isValid) {
	    return Interval.invalid("missing or invalid start");
	  } else if (!end || !end.isValid) {
	    return Interval.invalid("missing or invalid end");
	  } else if (end < start) {
	    return Interval.invalid(
	      "end before start",
	      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
	    );
	  } else {
	    return null;
	  }
	}

	/**
	 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
	 *
	 * Here is a brief overview of the most commonly used methods and getters in Interval:
	 *
	 * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
	 * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
	 * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
	 * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
	 * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
	 * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
	 */
	class Interval {
	  /**
	   * @private
	   */
	  constructor(config) {
	    /**
	     * @access private
	     */
	    this.s = config.start;
	    /**
	     * @access private
	     */
	    this.e = config.end;
	    /**
	     * @access private
	     */
	    this.invalid = config.invalid || null;
	    /**
	     * @access private
	     */
	    this.isLuxonInterval = true;
	  }

	  /**
	   * Create an invalid Interval.
	   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
	   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
	   * @return {Interval}
	   */
	  static invalid(reason, explanation = null) {
	    if (!reason) {
	      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
	    }

	    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

	    if (Settings.throwOnInvalid) {
	      throw new InvalidIntervalError(invalid);
	    } else {
	      return new Interval({ invalid });
	    }
	  }

	  /**
	   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
	   * @param {DateTime|Date|Object} start
	   * @param {DateTime|Date|Object} end
	   * @return {Interval}
	   */
	  static fromDateTimes(start, end) {
	    const builtStart = friendlyDateTime(start),
	      builtEnd = friendlyDateTime(end);

	    const validateError = validateStartEnd(builtStart, builtEnd);

	    if (validateError == null) {
	      return new Interval({
	        start: builtStart,
	        end: builtEnd,
	      });
	    } else {
	      return validateError;
	    }
	  }

	  /**
	   * Create an Interval from a start DateTime and a Duration to extend to.
	   * @param {DateTime|Date|Object} start
	   * @param {Duration|Object|number} duration - the length of the Interval.
	   * @return {Interval}
	   */
	  static after(start, duration) {
	    const dur = Duration.fromDurationLike(duration),
	      dt = friendlyDateTime(start);
	    return Interval.fromDateTimes(dt, dt.plus(dur));
	  }

	  /**
	   * Create an Interval from an end DateTime and a Duration to extend backwards to.
	   * @param {DateTime|Date|Object} end
	   * @param {Duration|Object|number} duration - the length of the Interval.
	   * @return {Interval}
	   */
	  static before(end, duration) {
	    const dur = Duration.fromDurationLike(duration),
	      dt = friendlyDateTime(end);
	    return Interval.fromDateTimes(dt.minus(dur), dt);
	  }

	  /**
	   * Create an Interval from an ISO 8601 string.
	   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
	   * @param {string} text - the ISO string to parse
	   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
	   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
	   * @return {Interval}
	   */
	  static fromISO(text, opts) {
	    const [s, e] = (text || "").split("/", 2);
	    if (s && e) {
	      let start, startIsValid;
	      try {
	        start = DateTime.fromISO(s, opts);
	        startIsValid = start.isValid;
	      } catch (e) {
	        startIsValid = false;
	      }

	      let end, endIsValid;
	      try {
	        end = DateTime.fromISO(e, opts);
	        endIsValid = end.isValid;
	      } catch (e) {
	        endIsValid = false;
	      }

	      if (startIsValid && endIsValid) {
	        return Interval.fromDateTimes(start, end);
	      }

	      if (startIsValid) {
	        const dur = Duration.fromISO(e, opts);
	        if (dur.isValid) {
	          return Interval.after(start, dur);
	        }
	      } else if (endIsValid) {
	        const dur = Duration.fromISO(s, opts);
	        if (dur.isValid) {
	          return Interval.before(end, dur);
	        }
	      }
	    }
	    return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
	  }

	  /**
	   * Check if an object is an Interval. Works across context boundaries
	   * @param {object} o
	   * @return {boolean}
	   */
	  static isInterval(o) {
	    return (o && o.isLuxonInterval) || false;
	  }

	  /**
	   * Returns the start of the Interval
	   * @type {DateTime}
	   */
	  get start() {
	    return this.isValid ? this.s : null;
	  }

	  /**
	   * Returns the end of the Interval
	   * @type {DateTime}
	   */
	  get end() {
	    return this.isValid ? this.e : null;
	  }

	  /**
	   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
	   * @type {boolean}
	   */
	  get isValid() {
	    return this.invalidReason === null;
	  }

	  /**
	   * Returns an error code if this Interval is invalid, or null if the Interval is valid
	   * @type {string}
	   */
	  get invalidReason() {
	    return this.invalid ? this.invalid.reason : null;
	  }

	  /**
	   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
	   * @type {string}
	   */
	  get invalidExplanation() {
	    return this.invalid ? this.invalid.explanation : null;
	  }

	  /**
	   * Returns the length of the Interval in the specified unit.
	   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
	   * @return {number}
	   */
	  length(unit = "milliseconds") {
	    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
	  }

	  /**
	   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
	   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
	   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
	   * @param {string} [unit='milliseconds'] - the unit of time to count.
	   * @param {Object} opts - options
	   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
	   * @return {number}
	   */
	  count(unit = "milliseconds", opts) {
	    if (!this.isValid) return NaN;
	    const start = this.start.startOf(unit, opts);
	    let end;
	    if (opts?.useLocaleWeeks) {
	      end = this.end.reconfigure({ locale: start.locale });
	    } else {
	      end = this.end;
	    }
	    end = end.startOf(unit, opts);
	    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
	  }

	  /**
	   * Returns whether this Interval's start and end are both in the same unit of time
	   * @param {string} unit - the unit of time to check sameness on
	   * @return {boolean}
	   */
	  hasSame(unit) {
	    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
	  }

	  /**
	   * Return whether this Interval has the same start and end DateTimes.
	   * @return {boolean}
	   */
	  isEmpty() {
	    return this.s.valueOf() === this.e.valueOf();
	  }

	  /**
	   * Return whether this Interval's start is after the specified DateTime.
	   * @param {DateTime} dateTime
	   * @return {boolean}
	   */
	  isAfter(dateTime) {
	    if (!this.isValid) return false;
	    return this.s > dateTime;
	  }

	  /**
	   * Return whether this Interval's end is before the specified DateTime.
	   * @param {DateTime} dateTime
	   * @return {boolean}
	   */
	  isBefore(dateTime) {
	    if (!this.isValid) return false;
	    return this.e <= dateTime;
	  }

	  /**
	   * Return whether this Interval contains the specified DateTime.
	   * @param {DateTime} dateTime
	   * @return {boolean}
	   */
	  contains(dateTime) {
	    if (!this.isValid) return false;
	    return this.s <= dateTime && this.e > dateTime;
	  }

	  /**
	   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
	   * @param {Object} values - the values to set
	   * @param {DateTime} values.start - the starting DateTime
	   * @param {DateTime} values.end - the ending DateTime
	   * @return {Interval}
	   */
	  set({ start, end } = {}) {
	    if (!this.isValid) return this;
	    return Interval.fromDateTimes(start || this.s, end || this.e);
	  }

	  /**
	   * Split this Interval at each of the specified DateTimes
	   * @param {...DateTime} dateTimes - the unit of time to count.
	   * @return {Array}
	   */
	  splitAt(...dateTimes) {
	    if (!this.isValid) return [];
	    const sorted = dateTimes
	        .map(friendlyDateTime)
	        .filter((d) => this.contains(d))
	        .sort((a, b) => a.toMillis() - b.toMillis()),
	      results = [];
	    let { s } = this,
	      i = 0;

	    while (s < this.e) {
	      const added = sorted[i] || this.e,
	        next = +added > +this.e ? this.e : added;
	      results.push(Interval.fromDateTimes(s, next));
	      s = next;
	      i += 1;
	    }

	    return results;
	  }

	  /**
	   * Split this Interval into smaller Intervals, each of the specified length.
	   * Left over time is grouped into a smaller interval
	   * @param {Duration|Object|number} duration - The length of each resulting interval.
	   * @return {Array}
	   */
	  splitBy(duration) {
	    const dur = Duration.fromDurationLike(duration);

	    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
	      return [];
	    }

	    let { s } = this,
	      idx = 1,
	      next;

	    const results = [];
	    while (s < this.e) {
	      const added = this.start.plus(dur.mapUnits((x) => x * idx));
	      next = +added > +this.e ? this.e : added;
	      results.push(Interval.fromDateTimes(s, next));
	      s = next;
	      idx += 1;
	    }

	    return results;
	  }

	  /**
	   * Split this Interval into the specified number of smaller intervals.
	   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
	   * @return {Array}
	   */
	  divideEqually(numberOfParts) {
	    if (!this.isValid) return [];
	    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
	  }

	  /**
	   * Return whether this Interval overlaps with the specified Interval
	   * @param {Interval} other
	   * @return {boolean}
	   */
	  overlaps(other) {
	    return this.e > other.s && this.s < other.e;
	  }

	  /**
	   * Return whether this Interval's end is adjacent to the specified Interval's start.
	   * @param {Interval} other
	   * @return {boolean}
	   */
	  abutsStart(other) {
	    if (!this.isValid) return false;
	    return +this.e === +other.s;
	  }

	  /**
	   * Return whether this Interval's start is adjacent to the specified Interval's end.
	   * @param {Interval} other
	   * @return {boolean}
	   */
	  abutsEnd(other) {
	    if (!this.isValid) return false;
	    return +other.e === +this.s;
	  }

	  /**
	   * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.
	   * @param {Interval} other
	   * @return {boolean}
	   */
	  engulfs(other) {
	    if (!this.isValid) return false;
	    return this.s <= other.s && this.e >= other.e;
	  }

	  /**
	   * Return whether this Interval has the same start and end as the specified Interval.
	   * @param {Interval} other
	   * @return {boolean}
	   */
	  equals(other) {
	    if (!this.isValid || !other.isValid) {
	      return false;
	    }

	    return this.s.equals(other.s) && this.e.equals(other.e);
	  }

	  /**
	   * Return an Interval representing the intersection of this Interval and the specified Interval.
	   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
	   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
	   * @param {Interval} other
	   * @return {Interval}
	   */
	  intersection(other) {
	    if (!this.isValid) return this;
	    const s = this.s > other.s ? this.s : other.s,
	      e = this.e < other.e ? this.e : other.e;

	    if (s >= e) {
	      return null;
	    } else {
	      return Interval.fromDateTimes(s, e);
	    }
	  }

	  /**
	   * Return an Interval representing the union of this Interval and the specified Interval.
	   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
	   * @param {Interval} other
	   * @return {Interval}
	   */
	  union(other) {
	    if (!this.isValid) return this;
	    const s = this.s < other.s ? this.s : other.s,
	      e = this.e > other.e ? this.e : other.e;
	    return Interval.fromDateTimes(s, e);
	  }

	  /**
	   * Merge an array of Intervals into a equivalent minimal set of Intervals.
	   * Combines overlapping and adjacent Intervals.
	   * @param {Array} intervals
	   * @return {Array}
	   */
	  static merge(intervals) {
	    const [found, final] = intervals
	      .sort((a, b) => a.s - b.s)
	      .reduce(
	        ([sofar, current], item) => {
	          if (!current) {
	            return [sofar, item];
	          } else if (current.overlaps(item) || current.abutsStart(item)) {
	            return [sofar, current.union(item)];
	          } else {
	            return [sofar.concat([current]), item];
	          }
	        },
	        [[], null]
	      );
	    if (final) {
	      found.push(final);
	    }
	    return found;
	  }

	  /**
	   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
	   * @param {Array} intervals
	   * @return {Array}
	   */
	  static xor(intervals) {
	    let start = null,
	      currentCount = 0;
	    const results = [],
	      ends = intervals.map((i) => [
	        { time: i.s, type: "s" },
	        { time: i.e, type: "e" },
	      ]),
	      flattened = Array.prototype.concat(...ends),
	      arr = flattened.sort((a, b) => a.time - b.time);

	    for (const i of arr) {
	      currentCount += i.type === "s" ? 1 : -1;

	      if (currentCount === 1) {
	        start = i.time;
	      } else {
	        if (start && +start !== +i.time) {
	          results.push(Interval.fromDateTimes(start, i.time));
	        }

	        start = null;
	      }
	    }

	    return Interval.merge(results);
	  }

	  /**
	   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
	   * @param {...Interval} intervals
	   * @return {Array}
	   */
	  difference(...intervals) {
	    return Interval.xor([this].concat(intervals))
	      .map((i) => this.intersection(i))
	      .filter((i) => i && !i.isEmpty());
	  }

	  /**
	   * Returns a string representation of this Interval appropriate for debugging.
	   * @return {string}
	   */
	  toString() {
	    if (!this.isValid) return INVALID$1;
	    return `[${this.s.toISO()} – ${this.e.toISO()})`;
	  }

	  /**
	   * Returns a string representation of this Interval appropriate for the REPL.
	   * @return {string}
	   */
	  [Symbol.for("nodejs.util.inspect.custom")]() {
	    if (this.isValid) {
	      return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
	    } else {
	      return `Interval { Invalid, reason: ${this.invalidReason} }`;
	    }
	  }

	  /**
	   * Returns a localized string representing this Interval. Accepts the same options as the
	   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
	   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
	   * is browser-specific, but in general it will return an appropriate representation of the
	   * Interval in the assigned locale. Defaults to the system's locale if no locale has been
	   * specified.
	   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
	   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
	   * Intl.DateTimeFormat constructor options.
	   * @param {Object} opts - Options to override the configuration of the start DateTime.
	   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
	   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
	   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
	   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
	   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
	   * @return {string}
	   */
	  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
	    return this.isValid
	      ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)
	      : INVALID$1;
	  }

	  /**
	   * Returns an ISO 8601-compliant string representation of this Interval.
	   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
	   * @param {Object} opts - The same options as {@link DateTime#toISO}
	   * @return {string}
	   */
	  toISO(opts) {
	    if (!this.isValid) return INVALID$1;
	    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
	  }

	  /**
	   * Returns an ISO 8601-compliant string representation of date of this Interval.
	   * The time components are ignored.
	   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
	   * @return {string}
	   */
	  toISODate() {
	    if (!this.isValid) return INVALID$1;
	    return `${this.s.toISODate()}/${this.e.toISODate()}`;
	  }

	  /**
	   * Returns an ISO 8601-compliant string representation of time of this Interval.
	   * The date components are ignored.
	   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
	   * @param {Object} opts - The same options as {@link DateTime#toISO}
	   * @return {string}
	   */
	  toISOTime(opts) {
	    if (!this.isValid) return INVALID$1;
	    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
	  }

	  /**
	   * Returns a string representation of this Interval formatted according to the specified format
	   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
	   * formatting tool.
	   * @param {string} dateFormat - The format string. This string formats the start and end time.
	   * See {@link DateTime#toFormat} for details.
	   * @param {Object} opts - Options.
	   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
	   * representations.
	   * @return {string}
	   */
	  toFormat(dateFormat, { separator = " – " } = {}) {
	    if (!this.isValid) return INVALID$1;
	    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
	  }

	  /**
	   * Return a Duration representing the time spanned by this interval.
	   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
	   * @param {Object} opts - options that affect the creation of the Duration
	   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
	   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
	   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
	   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
	   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
	   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
	   * @return {Duration}
	   */
	  toDuration(unit, opts) {
	    if (!this.isValid) {
	      return Duration.invalid(this.invalidReason);
	    }
	    return this.e.diff(this.s, unit, opts);
	  }

	  /**
	   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
	   * @param {function} mapFn
	   * @return {Interval}
	   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
	   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
	   */
	  mapEndpoints(mapFn) {
	    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
	  }
	}

	/**
	 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
	 */
	class Info {
	  /**
	   * Return whether the specified zone contains a DST.
	   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
	   * @return {boolean}
	   */
	  static hasDST(zone = Settings.defaultZone) {
	    const proto = DateTime.now().setZone(zone).set({ month: 12 });

	    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
	  }

	  /**
	   * Return whether the specified zone is a valid IANA specifier.
	   * @param {string} zone - Zone to check
	   * @return {boolean}
	   */
	  static isValidIANAZone(zone) {
	    return IANAZone.isValidZone(zone);
	  }

	  /**
	   * Converts the input into a {@link Zone} instance.
	   *
	   * * If `input` is already a Zone instance, it is returned unchanged.
	   * * If `input` is a string containing a valid time zone name, a Zone instance
	   *   with that name is returned.
	   * * If `input` is a string that doesn't refer to a known time zone, a Zone
	   *   instance with {@link Zone#isValid} == false is returned.
	   * * If `input is a number, a Zone instance with the specified fixed offset
	   *   in minutes is returned.
	   * * If `input` is `null` or `undefined`, the default zone is returned.
	   * @param {string|Zone|number} [input] - the value to be converted
	   * @return {Zone}
	   */
	  static normalizeZone(input) {
	    return normalizeZone(input, Settings.defaultZone);
	  }

	  /**
	   * Get the weekday on which the week starts according to the given locale.
	   * @param {Object} opts - options
	   * @param {string} [opts.locale] - the locale code
	   * @param {string} [opts.locObj=null] - an existing locale object to use
	   * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
	   */
	  static getStartOfWeek({ locale = null, locObj = null } = {}) {
	    return (locObj || Locale.create(locale)).getStartOfWeek();
	  }

	  /**
	   * Get the minimum number of days necessary in a week before it is considered part of the next year according
	   * to the given locale.
	   * @param {Object} opts - options
	   * @param {string} [opts.locale] - the locale code
	   * @param {string} [opts.locObj=null] - an existing locale object to use
	   * @returns {number}
	   */
	  static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {
	    return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();
	  }

	  /**
	   * Get the weekdays, which are considered the weekend according to the given locale
	   * @param {Object} opts - options
	   * @param {string} [opts.locale] - the locale code
	   * @param {string} [opts.locObj=null] - an existing locale object to use
	   * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
	   */
	  static getWeekendWeekdays({ locale = null, locObj = null } = {}) {
	    // copy the array, because we cache it internally
	    return (locObj || Locale.create(locale)).getWeekendDays().slice();
	  }

	  /**
	   * Return an array of standalone month names.
	   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
	   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
	   * @param {Object} opts - options
	   * @param {string} [opts.locale] - the locale code
	   * @param {string} [opts.numberingSystem=null] - the numbering system
	   * @param {string} [opts.locObj=null] - an existing locale object to use
	   * @param {string} [opts.outputCalendar='gregory'] - the calendar
	   * @example Info.months()[0] //=> 'January'
	   * @example Info.months('short')[0] //=> 'Jan'
	   * @example Info.months('numeric')[0] //=> '1'
	   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
	   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
	   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
	   * @return {Array}
	   */
	  static months(
	    length = "long",
	    { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
	  ) {
	    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
	  }

	  /**
	   * Return an array of format month names.
	   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
	   * changes the string.
	   * See {@link Info#months}
	   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
	   * @param {Object} opts - options
	   * @param {string} [opts.locale] - the locale code
	   * @param {string} [opts.numberingSystem=null] - the numbering system
	   * @param {string} [opts.locObj=null] - an existing locale object to use
	   * @param {string} [opts.outputCalendar='gregory'] - the calendar
	   * @return {Array}
	   */
	  static monthsFormat(
	    length = "long",
	    { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
	  ) {
	    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
	  }

	  /**
	   * Return an array of standalone week names.
	   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
	   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
	   * @param {Object} opts - options
	   * @param {string} [opts.locale] - the locale code
	   * @param {string} [opts.numberingSystem=null] - the numbering system
	   * @param {string} [opts.locObj=null] - an existing locale object to use
	   * @example Info.weekdays()[0] //=> 'Monday'
	   * @example Info.weekdays('short')[0] //=> 'Mon'
	   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
	   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
	   * @return {Array}
	   */
	  static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
	    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
	  }

	  /**
	   * Return an array of format week names.
	   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
	   * changes the string.
	   * See {@link Info#weekdays}
	   * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
	   * @param {Object} opts - options
	   * @param {string} [opts.locale=null] - the locale code
	   * @param {string} [opts.numberingSystem=null] - the numbering system
	   * @param {string} [opts.locObj=null] - an existing locale object to use
	   * @return {Array}
	   */
	  static weekdaysFormat(
	    length = "long",
	    { locale = null, numberingSystem = null, locObj = null } = {}
	  ) {
	    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
	  }

	  /**
	   * Return an array of meridiems.
	   * @param {Object} opts - options
	   * @param {string} [opts.locale] - the locale code
	   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
	   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
	   * @return {Array}
	   */
	  static meridiems({ locale = null } = {}) {
	    return Locale.create(locale).meridiems();
	  }

	  /**
	   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
	   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
	   * @param {Object} opts - options
	   * @param {string} [opts.locale] - the locale code
	   * @example Info.eras() //=> [ 'BC', 'AD' ]
	   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
	   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
	   * @return {Array}
	   */
	  static eras(length = "short", { locale = null } = {}) {
	    return Locale.create(locale, null, "gregory").eras(length);
	  }

	  /**
	   * Return the set of available features in this environment.
	   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
	   * Keys:
	   * * `relative`: whether this environment supports relative time formatting
	   * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
	   * @example Info.features() //=> { relative: false, localeWeek: true }
	   * @return {Object}
	   */
	  static features() {
	    return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };
	  }
	}

	function dayDiff(earlier, later) {
	  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(),
	    ms = utcDayStart(later) - utcDayStart(earlier);
	  return Math.floor(Duration.fromMillis(ms).as("days"));
	}

	function highOrderDiffs(cursor, later, units) {
	  const differs = [
	    ["years", (a, b) => b.year - a.year],
	    ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
	    ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
	    [
	      "weeks",
	      (a, b) => {
	        const days = dayDiff(a, b);
	        return (days - (days % 7)) / 7;
	      },
	    ],
	    ["days", dayDiff],
	  ];

	  const results = {};
	  const earlier = cursor;
	  let lowestOrder, highWater;

	  /* This loop tries to diff using larger units first.
	     If we overshoot, we backtrack and try the next smaller unit.
	     "cursor" starts out at the earlier timestamp and moves closer and closer to "later"
	     as we use smaller and smaller units.
	     highWater keeps track of where we would be if we added one more of the smallest unit,
	     this is used later to potentially convert any difference smaller than the smallest higher order unit
	     into a fraction of that smallest higher order unit
	  */
	  for (const [unit, differ] of differs) {
	    if (units.indexOf(unit) >= 0) {
	      lowestOrder = unit;

	      results[unit] = differ(cursor, later);
	      highWater = earlier.plus(results);

	      if (highWater > later) {
	        // we overshot the end point, backtrack cursor by 1
	        results[unit]--;
	        cursor = earlier.plus(results);

	        // if we are still overshooting now, we need to backtrack again
	        // this happens in certain situations when diffing times in different zones,
	        // because this calculation ignores time zones
	        if (cursor > later) {
	          // keep the "overshot by 1" around as highWater
	          highWater = cursor;
	          // backtrack cursor by 1
	          results[unit]--;
	          cursor = earlier.plus(results);
	        }
	      } else {
	        cursor = highWater;
	      }
	    }
	  }

	  return [cursor, results, highWater, lowestOrder];
	}

	function diff (earlier, later, units, opts) {
	  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);

	  const remainingMillis = later - cursor;

	  const lowerOrderUnits = units.filter(
	    (u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
	  );

	  if (lowerOrderUnits.length === 0) {
	    if (highWater < later) {
	      highWater = cursor.plus({ [lowestOrder]: 1 });
	    }

	    if (highWater !== cursor) {
	      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
	    }
	  }

	  const duration = Duration.fromObject(results, opts);

	  if (lowerOrderUnits.length > 0) {
	    return Duration.fromMillis(remainingMillis, opts)
	      .shiftTo(...lowerOrderUnits)
	      .plus(duration);
	  } else {
	    return duration;
	  }
	}

	const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

	function intUnit(regex, post = (i) => i) {
	  return { regex, deser: ([s]) => post(parseDigits(s)) };
	}

	const NBSP = String.fromCharCode(160);
	const spaceOrNBSP = `[ ${NBSP}]`;
	const spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

	function fixListRegex(s) {
	  // make dots optional and also make them literal
	  // make space and non breakable space characters interchangeable
	  return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
	}

	function stripInsensitivities(s) {
	  return s
	    .replace(/\./g, "") // ignore dots that were made optional
	    .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
	    .toLowerCase();
	}

	function oneOf(strings, startIndex) {
	  if (strings === null) {
	    return null;
	  } else {
	    return {
	      regex: RegExp(strings.map(fixListRegex).join("|")),
	      deser: ([s]) =>
	        strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,
	    };
	  }
	}

	function offset(regex, groups) {
	  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
	}

	function simple(regex) {
	  return { regex, deser: ([s]) => s };
	}

	function escapeToken(value) {
	  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
	}

	/**
	 * @param token
	 * @param {Locale} loc
	 */
	function unitForToken(token, loc) {
	  const one = digitRegex(loc),
	    two = digitRegex(loc, "{2}"),
	    three = digitRegex(loc, "{3}"),
	    four = digitRegex(loc, "{4}"),
	    six = digitRegex(loc, "{6}"),
	    oneOrTwo = digitRegex(loc, "{1,2}"),
	    oneToThree = digitRegex(loc, "{1,3}"),
	    oneToSix = digitRegex(loc, "{1,6}"),
	    oneToNine = digitRegex(loc, "{1,9}"),
	    twoToFour = digitRegex(loc, "{2,4}"),
	    fourToSix = digitRegex(loc, "{4,6}"),
	    literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),
	    unitate = (t) => {
	      if (token.literal) {
	        return literal(t);
	      }
	      switch (t.val) {
	        // era
	        case "G":
	          return oneOf(loc.eras("short"), 0);
	        case "GG":
	          return oneOf(loc.eras("long"), 0);
	        // years
	        case "y":
	          return intUnit(oneToSix);
	        case "yy":
	          return intUnit(twoToFour, untruncateYear);
	        case "yyyy":
	          return intUnit(four);
	        case "yyyyy":
	          return intUnit(fourToSix);
	        case "yyyyyy":
	          return intUnit(six);
	        // months
	        case "M":
	          return intUnit(oneOrTwo);
	        case "MM":
	          return intUnit(two);
	        case "MMM":
	          return oneOf(loc.months("short", true), 1);
	        case "MMMM":
	          return oneOf(loc.months("long", true), 1);
	        case "L":
	          return intUnit(oneOrTwo);
	        case "LL":
	          return intUnit(two);
	        case "LLL":
	          return oneOf(loc.months("short", false), 1);
	        case "LLLL":
	          return oneOf(loc.months("long", false), 1);
	        // dates
	        case "d":
	          return intUnit(oneOrTwo);
	        case "dd":
	          return intUnit(two);
	        // ordinals
	        case "o":
	          return intUnit(oneToThree);
	        case "ooo":
	          return intUnit(three);
	        // time
	        case "HH":
	          return intUnit(two);
	        case "H":
	          return intUnit(oneOrTwo);
	        case "hh":
	          return intUnit(two);
	        case "h":
	          return intUnit(oneOrTwo);
	        case "mm":
	          return intUnit(two);
	        case "m":
	          return intUnit(oneOrTwo);
	        case "q":
	          return intUnit(oneOrTwo);
	        case "qq":
	          return intUnit(two);
	        case "s":
	          return intUnit(oneOrTwo);
	        case "ss":
	          return intUnit(two);
	        case "S":
	          return intUnit(oneToThree);
	        case "SSS":
	          return intUnit(three);
	        case "u":
	          return simple(oneToNine);
	        case "uu":
	          return simple(oneOrTwo);
	        case "uuu":
	          return intUnit(one);
	        // meridiem
	        case "a":
	          return oneOf(loc.meridiems(), 0);
	        // weekYear (k)
	        case "kkkk":
	          return intUnit(four);
	        case "kk":
	          return intUnit(twoToFour, untruncateYear);
	        // weekNumber (W)
	        case "W":
	          return intUnit(oneOrTwo);
	        case "WW":
	          return intUnit(two);
	        // weekdays
	        case "E":
	        case "c":
	          return intUnit(one);
	        case "EEE":
	          return oneOf(loc.weekdays("short", false), 1);
	        case "EEEE":
	          return oneOf(loc.weekdays("long", false), 1);
	        case "ccc":
	          return oneOf(loc.weekdays("short", true), 1);
	        case "cccc":
	          return oneOf(loc.weekdays("long", true), 1);
	        // offset/zone
	        case "Z":
	        case "ZZ":
	          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
	        case "ZZZ":
	          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
	        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
	        // because we don't have any way to figure out what they are
	        case "z":
	          return simple(/[a-z_+-/]{1,256}?/i);
	        // this special-case "token" represents a place where a macro-token expanded into a white-space literal
	        // in this case we accept any non-newline white-space
	        case " ":
	          return simple(/[^\S\n\r]/);
	        default:
	          return literal(t);
	      }
	    };

	  const unit = unitate(token) || {
	    invalidReason: MISSING_FTP,
	  };

	  unit.token = token;

	  return unit;
	}

	const partTypeStyleToTokenVal = {
	  year: {
	    "2-digit": "yy",
	    numeric: "yyyyy",
	  },
	  month: {
	    numeric: "M",
	    "2-digit": "MM",
	    short: "MMM",
	    long: "MMMM",
	  },
	  day: {
	    numeric: "d",
	    "2-digit": "dd",
	  },
	  weekday: {
	    short: "EEE",
	    long: "EEEE",
	  },
	  dayperiod: "a",
	  dayPeriod: "a",
	  hour12: {
	    numeric: "h",
	    "2-digit": "hh",
	  },
	  hour24: {
	    numeric: "H",
	    "2-digit": "HH",
	  },
	  minute: {
	    numeric: "m",
	    "2-digit": "mm",
	  },
	  second: {
	    numeric: "s",
	    "2-digit": "ss",
	  },
	  timeZoneName: {
	    long: "ZZZZZ",
	    short: "ZZZ",
	  },
	};

	function tokenForPart(part, formatOpts, resolvedOpts) {
	  const { type, value } = part;

	  if (type === "literal") {
	    const isSpace = /^\s+$/.test(value);
	    return {
	      literal: !isSpace,
	      val: isSpace ? " " : value,
	    };
	  }

	  const style = formatOpts[type];

	  // The user might have explicitly specified hour12 or hourCycle
	  // if so, respect their decision
	  // if not, refer back to the resolvedOpts, which are based on the locale
	  let actualType = type;
	  if (type === "hour") {
	    if (formatOpts.hour12 != null) {
	      actualType = formatOpts.hour12 ? "hour12" : "hour24";
	    } else if (formatOpts.hourCycle != null) {
	      if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
	        actualType = "hour12";
	      } else {
	        actualType = "hour24";
	      }
	    } else {
	      // tokens only differentiate between 24 hours or not,
	      // so we do not need to check hourCycle here, which is less supported anyways
	      actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
	    }
	  }
	  let val = partTypeStyleToTokenVal[actualType];
	  if (typeof val === "object") {
	    val = val[style];
	  }

	  if (val) {
	    return {
	      literal: false,
	      val,
	    };
	  }

	  return undefined;
	}

	function buildRegex(units) {
	  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
	  return [`^${re}$`, units];
	}

	function match(input, regex, handlers) {
	  const matches = input.match(regex);

	  if (matches) {
	    const all = {};
	    let matchIndex = 1;
	    for (const i in handlers) {
	      if (hasOwnProperty$1(handlers, i)) {
	        const h = handlers[i],
	          groups = h.groups ? h.groups + 1 : 1;
	        if (!h.literal && h.token) {
	          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
	        }
	        matchIndex += groups;
	      }
	    }
	    return [matches, all];
	  } else {
	    return [matches, {}];
	  }
	}

	function dateTimeFromMatches(matches) {
	  const toField = (token) => {
	    switch (token) {
	      case "S":
	        return "millisecond";
	      case "s":
	        return "second";
	      case "m":
	        return "minute";
	      case "h":
	      case "H":
	        return "hour";
	      case "d":
	        return "day";
	      case "o":
	        return "ordinal";
	      case "L":
	      case "M":
	        return "month";
	      case "y":
	        return "year";
	      case "E":
	      case "c":
	        return "weekday";
	      case "W":
	        return "weekNumber";
	      case "k":
	        return "weekYear";
	      case "q":
	        return "quarter";
	      default:
	        return null;
	    }
	  };

	  let zone = null;
	  let specificOffset;
	  if (!isUndefined$1(matches.z)) {
	    zone = IANAZone.create(matches.z);
	  }

	  if (!isUndefined$1(matches.Z)) {
	    if (!zone) {
	      zone = new FixedOffsetZone(matches.Z);
	    }
	    specificOffset = matches.Z;
	  }

	  if (!isUndefined$1(matches.q)) {
	    matches.M = (matches.q - 1) * 3 + 1;
	  }

	  if (!isUndefined$1(matches.h)) {
	    if (matches.h < 12 && matches.a === 1) {
	      matches.h += 12;
	    } else if (matches.h === 12 && matches.a === 0) {
	      matches.h = 0;
	    }
	  }

	  if (matches.G === 0 && matches.y) {
	    matches.y = -matches.y;
	  }

	  if (!isUndefined$1(matches.u)) {
	    matches.S = parseMillis(matches.u);
	  }

	  const vals = Object.keys(matches).reduce((r, k) => {
	    const f = toField(k);
	    if (f) {
	      r[f] = matches[k];
	    }

	    return r;
	  }, {});

	  return [vals, zone, specificOffset];
	}

	let dummyDateTimeCache = null;

	function getDummyDateTime() {
	  if (!dummyDateTimeCache) {
	    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
	  }

	  return dummyDateTimeCache;
	}

	function maybeExpandMacroToken(token, locale) {
	  if (token.literal) {
	    return token;
	  }

	  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
	  const tokens = formatOptsToTokens(formatOpts, locale);

	  if (tokens == null || tokens.includes(undefined)) {
	    return token;
	  }

	  return tokens;
	}

	function expandMacroTokens(tokens, locale) {
	  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
	}

	/**
	 * @private
	 */

	class TokenParser {
	  constructor(locale, format) {
	    this.locale = locale;
	    this.format = format;
	    this.tokens = expandMacroTokens(Formatter.parseFormat(format), locale);
	    this.units = this.tokens.map((t) => unitForToken(t, locale));
	    this.disqualifyingUnit = this.units.find((t) => t.invalidReason);

	    if (!this.disqualifyingUnit) {
	      const [regexString, handlers] = buildRegex(this.units);
	      this.regex = RegExp(regexString, "i");
	      this.handlers = handlers;
	    }
	  }

	  explainFromTokens(input) {
	    if (!this.isValid) {
	      return { input, tokens: this.tokens, invalidReason: this.invalidReason };
	    } else {
	      const [rawMatches, matches] = match(input, this.regex, this.handlers),
	        [result, zone, specificOffset] = matches
	          ? dateTimeFromMatches(matches)
	          : [null, null, undefined];
	      if (hasOwnProperty$1(matches, "a") && hasOwnProperty$1(matches, "H")) {
	        throw new ConflictingSpecificationError(
	          "Can't include meridiem when specifying 24-hour format"
	        );
	      }
	      return {
	        input,
	        tokens: this.tokens,
	        regex: this.regex,
	        rawMatches,
	        matches,
	        result,
	        zone,
	        specificOffset,
	      };
	    }
	  }

	  get isValid() {
	    return !this.disqualifyingUnit;
	  }

	  get invalidReason() {
	    return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;
	  }
	}

	function explainFromTokens(locale, input, format) {
	  const parser = new TokenParser(locale, format);
	  return parser.explainFromTokens(input);
	}

	function parseFromTokens(locale, input, format) {
	  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
	  return [result, zone, specificOffset, invalidReason];
	}

	function formatOptsToTokens(formatOpts, locale) {
	  if (!formatOpts) {
	    return null;
	  }

	  const formatter = Formatter.create(locale, formatOpts);
	  const df = formatter.dtFormatter(getDummyDateTime());
	  const parts = df.formatToParts();
	  const resolvedOpts = df.resolvedOptions();
	  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));
	}

	const INVALID = "Invalid DateTime";
	const MAX_DATE = 8.64e15;

	function unsupportedZone(zone) {
	  return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
	}

	// we cache week data on the DT object and this intermediates the cache
	/**
	 * @param {DateTime} dt
	 */
	function possiblyCachedWeekData(dt) {
	  if (dt.weekData === null) {
	    dt.weekData = gregorianToWeek(dt.c);
	  }
	  return dt.weekData;
	}

	/**
	 * @param {DateTime} dt
	 */
	function possiblyCachedLocalWeekData(dt) {
	  if (dt.localWeekData === null) {
	    dt.localWeekData = gregorianToWeek(
	      dt.c,
	      dt.loc.getMinDaysInFirstWeek(),
	      dt.loc.getStartOfWeek()
	    );
	  }
	  return dt.localWeekData;
	}

	// clone really means, "make a new object with these modifications". all "setters" really use this
	// to create a new object while only changing some of the properties
	function clone(inst, alts) {
	  const current = {
	    ts: inst.ts,
	    zone: inst.zone,
	    c: inst.c,
	    o: inst.o,
	    loc: inst.loc,
	    invalid: inst.invalid,
	  };
	  return new DateTime({ ...current, ...alts, old: current });
	}

	// find the right offset a given local time. The o input is our guess, which determines which
	// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
	function fixOffset(localTS, o, tz) {
	  // Our UTC time is just a guess because our offset is just a guess
	  let utcGuess = localTS - o * 60 * 1000;

	  // Test whether the zone matches the offset for this ts
	  const o2 = tz.offset(utcGuess);

	  // If so, offset didn't change and we're done
	  if (o === o2) {
	    return [utcGuess, o];
	  }

	  // If not, change the ts by the difference in the offset
	  utcGuess -= (o2 - o) * 60 * 1000;

	  // If that gives us the local time we want, we're done
	  const o3 = tz.offset(utcGuess);
	  if (o2 === o3) {
	    return [utcGuess, o2];
	  }

	  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
	  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
	}

	// convert an epoch timestamp into a calendar object with the given offset
	function tsToObj(ts, offset) {
	  ts += offset * 60 * 1000;

	  const d = new Date(ts);

	  return {
	    year: d.getUTCFullYear(),
	    month: d.getUTCMonth() + 1,
	    day: d.getUTCDate(),
	    hour: d.getUTCHours(),
	    minute: d.getUTCMinutes(),
	    second: d.getUTCSeconds(),
	    millisecond: d.getUTCMilliseconds(),
	  };
	}

	// convert a calendar object to a epoch timestamp
	function objToTS(obj, offset, zone) {
	  return fixOffset(objToLocalTS(obj), offset, zone);
	}

	// create a new DT instance by adding a duration, adjusting for DSTs
	function adjustTime(inst, dur) {
	  const oPre = inst.o,
	    year = inst.c.year + Math.trunc(dur.years),
	    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
	    c = {
	      ...inst.c,
	      year,
	      month,
	      day:
	        Math.min(inst.c.day, daysInMonth(year, month)) +
	        Math.trunc(dur.days) +
	        Math.trunc(dur.weeks) * 7,
	    },
	    millisToAdd = Duration.fromObject({
	      years: dur.years - Math.trunc(dur.years),
	      quarters: dur.quarters - Math.trunc(dur.quarters),
	      months: dur.months - Math.trunc(dur.months),
	      weeks: dur.weeks - Math.trunc(dur.weeks),
	      days: dur.days - Math.trunc(dur.days),
	      hours: dur.hours,
	      minutes: dur.minutes,
	      seconds: dur.seconds,
	      milliseconds: dur.milliseconds,
	    }).as("milliseconds"),
	    localTS = objToLocalTS(c);

	  let [ts, o] = fixOffset(localTS, oPre, inst.zone);

	  if (millisToAdd !== 0) {
	    ts += millisToAdd;
	    // that could have changed the offset by going over a DST, but we want to keep the ts the same
	    o = inst.zone.offset(ts);
	  }

	  return { ts, o };
	}

	// helper useful in turning the results of parsing into real dates
	// by handling the zone options
	function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
	  const { setZone, zone } = opts;
	  if ((parsed && Object.keys(parsed).length !== 0) || parsedZone) {
	    const interpretationZone = parsedZone || zone,
	      inst = DateTime.fromObject(parsed, {
	        ...opts,
	        zone: interpretationZone,
	        specificOffset,
	      });
	    return setZone ? inst : inst.setZone(zone);
	  } else {
	    return DateTime.invalid(
	      new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
	    );
	  }
	}

	// if you want to output a technical format (e.g. RFC 2822), this helper
	// helps handle the details
	function toTechFormat(dt, format, allowZ = true) {
	  return dt.isValid
	    ? Formatter.create(Locale.create("en-US"), {
	        allowZ,
	        forceSimple: true,
	      }).formatDateTimeFromString(dt, format)
	    : null;
	}

	function toISODate(o, extended) {
	  const longFormat = o.c.year > 9999 || o.c.year < 0;
	  let c = "";
	  if (longFormat && o.c.year >= 0) c += "+";
	  c += padStart(o.c.year, longFormat ? 6 : 4);

	  if (extended) {
	    c += "-";
	    c += padStart(o.c.month);
	    c += "-";
	    c += padStart(o.c.day);
	  } else {
	    c += padStart(o.c.month);
	    c += padStart(o.c.day);
	  }
	  return c;
	}

	function toISOTime(
	  o,
	  extended,
	  suppressSeconds,
	  suppressMilliseconds,
	  includeOffset,
	  extendedZone
	) {
	  let c = padStart(o.c.hour);
	  if (extended) {
	    c += ":";
	    c += padStart(o.c.minute);
	    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
	      c += ":";
	    }
	  } else {
	    c += padStart(o.c.minute);
	  }

	  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
	    c += padStart(o.c.second);

	    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
	      c += ".";
	      c += padStart(o.c.millisecond, 3);
	    }
	  }

	  if (includeOffset) {
	    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
	      c += "Z";
	    } else if (o.o < 0) {
	      c += "-";
	      c += padStart(Math.trunc(-o.o / 60));
	      c += ":";
	      c += padStart(Math.trunc(-o.o % 60));
	    } else {
	      c += "+";
	      c += padStart(Math.trunc(o.o / 60));
	      c += ":";
	      c += padStart(Math.trunc(o.o % 60));
	    }
	  }

	  if (extendedZone) {
	    c += "[" + o.zone.ianaName + "]";
	  }
	  return c;
	}

	// defaults for unspecified units in the supported calendars
	const defaultUnitValues = {
	    month: 1,
	    day: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0,
	  },
	  defaultWeekUnitValues = {
	    weekNumber: 1,
	    weekday: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0,
	  },
	  defaultOrdinalUnitValues = {
	    ordinal: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0,
	  };

	// Units in the supported calendars, sorted by bigness
	const orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
	  orderedWeekUnits = [
	    "weekYear",
	    "weekNumber",
	    "weekday",
	    "hour",
	    "minute",
	    "second",
	    "millisecond",
	  ],
	  orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

	// standardize case and plurality in units
	function normalizeUnit(unit) {
	  const normalized = {
	    year: "year",
	    years: "year",
	    month: "month",
	    months: "month",
	    day: "day",
	    days: "day",
	    hour: "hour",
	    hours: "hour",
	    minute: "minute",
	    minutes: "minute",
	    quarter: "quarter",
	    quarters: "quarter",
	    second: "second",
	    seconds: "second",
	    millisecond: "millisecond",
	    milliseconds: "millisecond",
	    weekday: "weekday",
	    weekdays: "weekday",
	    weeknumber: "weekNumber",
	    weeksnumber: "weekNumber",
	    weeknumbers: "weekNumber",
	    weekyear: "weekYear",
	    weekyears: "weekYear",
	    ordinal: "ordinal",
	  }[unit.toLowerCase()];

	  if (!normalized) throw new InvalidUnitError(unit);

	  return normalized;
	}

	function normalizeUnitWithLocalWeeks(unit) {
	  switch (unit.toLowerCase()) {
	    case "localweekday":
	    case "localweekdays":
	      return "localWeekday";
	    case "localweeknumber":
	    case "localweeknumbers":
	      return "localWeekNumber";
	    case "localweekyear":
	    case "localweekyears":
	      return "localWeekYear";
	    default:
	      return normalizeUnit(unit);
	  }
	}

	// cache offsets for zones based on the current timestamp when this function is
	// first called. When we are handling a datetime from components like (year,
	// month, day, hour) in a time zone, we need a guess about what the timezone
	// offset is so that we can convert into a UTC timestamp. One way is to find the
	// offset of now in the zone. The actual date may have a different offset (for
	// example, if we handle a date in June while we're in December in a zone that
	// observes DST), but we can check and adjust that.
	//
	// When handling many dates, calculating the offset for now every time is
	// expensive. It's just a guess, so we can cache the offset to use even if we
	// are right on a time change boundary (we'll just correct in the other
	// direction). Using a timestamp from first read is a slight optimization for
	// handling dates close to the current date, since those dates will usually be
	// in the same offset (we could set the timestamp statically, instead). We use a
	// single timestamp for all zones to make things a bit more predictable.
	//
	// This is safe for quickDT (used by local() and utc()) because we don't fill in
	// higher-order units from tsNow (as we do in fromObject, this requires that
	// offset is calculated from tsNow).
	function guessOffsetForZone(zone) {
	  if (!zoneOffsetGuessCache[zone]) {
	    if (zoneOffsetTs === undefined) {
	      zoneOffsetTs = Settings.now();
	    }

	    zoneOffsetGuessCache[zone] = zone.offset(zoneOffsetTs);
	  }
	  return zoneOffsetGuessCache[zone];
	}

	// this is a dumbed down version of fromObject() that runs about 60% faster
	// but doesn't do any validation, makes a bunch of assumptions about what units
	// are present, and so on.
	function quickDT(obj, opts) {
	  const zone = normalizeZone(opts.zone, Settings.defaultZone);
	  if (!zone.isValid) {
	    return DateTime.invalid(unsupportedZone(zone));
	  }

	  const loc = Locale.fromObject(opts);

	  let ts, o;

	  // assume we have the higher-order units
	  if (!isUndefined$1(obj.year)) {
	    for (const u of orderedUnits) {
	      if (isUndefined$1(obj[u])) {
	        obj[u] = defaultUnitValues[u];
	      }
	    }

	    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
	    if (invalid) {
	      return DateTime.invalid(invalid);
	    }

	    const offsetProvis = guessOffsetForZone(zone);
	    [ts, o] = objToTS(obj, offsetProvis, zone);
	  } else {
	    ts = Settings.now();
	  }

	  return new DateTime({ ts, zone, loc, o });
	}

	function diffRelative(start, end, opts) {
	  const round = isUndefined$1(opts.round) ? true : opts.round,
	    format = (c, unit) => {
	      c = roundTo(c, round || opts.calendary ? 0 : 2, true);
	      const formatter = end.loc.clone(opts).relFormatter(opts);
	      return formatter.format(c, unit);
	    },
	    differ = (unit) => {
	      if (opts.calendary) {
	        if (!end.hasSame(start, unit)) {
	          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
	        } else return 0;
	      } else {
	        return end.diff(start, unit).get(unit);
	      }
	    };

	  if (opts.unit) {
	    return format(differ(opts.unit), opts.unit);
	  }

	  for (const unit of opts.units) {
	    const count = differ(unit);
	    if (Math.abs(count) >= 1) {
	      return format(count, unit);
	    }
	  }
	  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
	}

	function lastOpts(argList) {
	  let opts = {},
	    args;
	  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
	    opts = argList[argList.length - 1];
	    args = Array.from(argList).slice(0, argList.length - 1);
	  } else {
	    args = Array.from(argList);
	  }
	  return [opts, args];
	}

	/**
	 * Timestamp to use for cached zone offset guesses (exposed for test)
	 */
	let zoneOffsetTs;
	/**
	 * Cache for zone offset guesses (exposed for test).
	 *
	 * This optimizes quickDT via guessOffsetForZone to avoid repeated calls of
	 * zone.offset().
	 */
	let zoneOffsetGuessCache = {};

	/**
	 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
	 *
	 * A DateTime comprises of:
	 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
	 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
	 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
	 *
	 * Here is a brief overview of the most commonly used functionality it provides:
	 *
	 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
	 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
	 * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
	 * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
	 * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
	 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
	 * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
	 *
	 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
	 */
	class DateTime {
	  /**
	   * @access private
	   */
	  constructor(config) {
	    const zone = config.zone || Settings.defaultZone;

	    let invalid =
	      config.invalid ||
	      (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) ||
	      (!zone.isValid ? unsupportedZone(zone) : null);
	    /**
	     * @access private
	     */
	    this.ts = isUndefined$1(config.ts) ? Settings.now() : config.ts;

	    let c = null,
	      o = null;
	    if (!invalid) {
	      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

	      if (unchanged) {
	        [c, o] = [config.old.c, config.old.o];
	      } else {
	        // If an offset has been passed and we have not been called from
	        // clone(), we can trust it and avoid the offset calculation.
	        const ot = isNumber$1(config.o) && !config.old ? config.o : zone.offset(this.ts);
	        c = tsToObj(this.ts, ot);
	        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
	        c = invalid ? null : c;
	        o = invalid ? null : ot;
	      }
	    }

	    /**
	     * @access private
	     */
	    this._zone = zone;
	    /**
	     * @access private
	     */
	    this.loc = config.loc || Locale.create();
	    /**
	     * @access private
	     */
	    this.invalid = invalid;
	    /**
	     * @access private
	     */
	    this.weekData = null;
	    /**
	     * @access private
	     */
	    this.localWeekData = null;
	    /**
	     * @access private
	     */
	    this.c = c;
	    /**
	     * @access private
	     */
	    this.o = o;
	    /**
	     * @access private
	     */
	    this.isLuxonDateTime = true;
	  }

	  // CONSTRUCT

	  /**
	   * Create a DateTime for the current instant, in the system's time zone.
	   *
	   * Use Settings to override these default values if needed.
	   * @example DateTime.now().toISO() //~> now in the ISO format
	   * @return {DateTime}
	   */
	  static now() {
	    return new DateTime({});
	  }

	  /**
	   * Create a local DateTime
	   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
	   * @param {number} [month=1] - The month, 1-indexed
	   * @param {number} [day=1] - The day of the month, 1-indexed
	   * @param {number} [hour=0] - The hour of the day, in 24-hour time
	   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
	   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
	   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
	   * @example DateTime.local()                                  //~> now
	   * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
	   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
	   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
	   * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
	   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
	   * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
	   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
	   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
	   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
	   * @return {DateTime}
	   */
	  static local() {
	    const [opts, args] = lastOpts(arguments),
	      [year, month, day, hour, minute, second, millisecond] = args;
	    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
	  }

	  /**
	   * Create a DateTime in UTC
	   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
	   * @param {number} [month=1] - The month, 1-indexed
	   * @param {number} [day=1] - The day of the month
	   * @param {number} [hour=0] - The hour of the day, in 24-hour time
	   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
	   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
	   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
	   * @param {Object} options - configuration options for the DateTime
	   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
	   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
	   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
	   * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance
	   * @example DateTime.utc()                                              //~> now
	   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
	   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
	   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
	   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
	   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
	   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
	   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
	   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
	   * @return {DateTime}
	   */
	  static utc() {
	    const [opts, args] = lastOpts(arguments),
	      [year, month, day, hour, minute, second, millisecond] = args;

	    opts.zone = FixedOffsetZone.utcInstance;
	    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
	  }

	  /**
	   * Create a DateTime from a JavaScript Date object. Uses the default zone.
	   * @param {Date} date - a JavaScript Date object
	   * @param {Object} options - configuration options for the DateTime
	   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
	   * @return {DateTime}
	   */
	  static fromJSDate(date, options = {}) {
	    const ts = isDate$1(date) ? date.valueOf() : NaN;
	    if (Number.isNaN(ts)) {
	      return DateTime.invalid("invalid input");
	    }

	    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
	    if (!zoneToUse.isValid) {
	      return DateTime.invalid(unsupportedZone(zoneToUse));
	    }

	    return new DateTime({
	      ts: ts,
	      zone: zoneToUse,
	      loc: Locale.fromObject(options),
	    });
	  }

	  /**
	   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
	   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
	   * @param {Object} options - configuration options for the DateTime
	   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
	   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
	   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
	   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
	   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
	   * @return {DateTime}
	   */
	  static fromMillis(milliseconds, options = {}) {
	    if (!isNumber$1(milliseconds)) {
	      throw new InvalidArgumentError(
	        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
	      );
	    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
	      // this isn't perfect because we can still end up out of range because of additional shifting, but it's a start
	      return DateTime.invalid("Timestamp out of range");
	    } else {
	      return new DateTime({
	        ts: milliseconds,
	        zone: normalizeZone(options.zone, Settings.defaultZone),
	        loc: Locale.fromObject(options),
	      });
	    }
	  }

	  /**
	   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
	   * @param {number} seconds - a number of seconds since 1970 UTC
	   * @param {Object} options - configuration options for the DateTime
	   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
	   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
	   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
	   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
	   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
	   * @return {DateTime}
	   */
	  static fromSeconds(seconds, options = {}) {
	    if (!isNumber$1(seconds)) {
	      throw new InvalidArgumentError("fromSeconds requires a numerical input");
	    } else {
	      return new DateTime({
	        ts: seconds * 1000,
	        zone: normalizeZone(options.zone, Settings.defaultZone),
	        loc: Locale.fromObject(options),
	      });
	    }
	  }

	  /**
	   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
	   * @param {Object} obj - the object to create the DateTime from
	   * @param {number} obj.year - a year, such as 1987
	   * @param {number} obj.month - a month, 1-12
	   * @param {number} obj.day - a day of the month, 1-31, depending on the month
	   * @param {number} obj.ordinal - day of the year, 1-365 or 366
	   * @param {number} obj.weekYear - an ISO week year
	   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
	   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
	   * @param {number} obj.localWeekYear - a week year, according to the locale
	   * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
	   * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
	   * @param {number} obj.hour - hour of the day, 0-23
	   * @param {number} obj.minute - minute of the hour, 0-59
	   * @param {number} obj.second - second of the minute, 0-59
	   * @param {number} obj.millisecond - millisecond of the second, 0-999
	   * @param {Object} opts - options for creating this DateTime
	   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
	   * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
	   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
	   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
	   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
	   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
	   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
	   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
	   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
	   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
	   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
	   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
	   * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
	   * @return {DateTime}
	   */
	  static fromObject(obj, opts = {}) {
	    obj = obj || {};
	    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
	    if (!zoneToUse.isValid) {
	      return DateTime.invalid(unsupportedZone(zoneToUse));
	    }

	    const loc = Locale.fromObject(opts);
	    const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
	    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);

	    const tsNow = Settings.now(),
	      offsetProvis = !isUndefined$1(opts.specificOffset)
	        ? opts.specificOffset
	        : zoneToUse.offset(tsNow),
	      containsOrdinal = !isUndefined$1(normalized.ordinal),
	      containsGregorYear = !isUndefined$1(normalized.year),
	      containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day),
	      containsGregor = containsGregorYear || containsGregorMD,
	      definiteWeekDef = normalized.weekYear || normalized.weekNumber;

	    // cases:
	    // just a weekday -> this week's instance of that weekday, no worries
	    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
	    // (gregorian month or day) + ordinal -> error
	    // otherwise just use weeks or ordinals or gregorian, depending on what's specified

	    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
	      throw new ConflictingSpecificationError(
	        "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
	      );
	    }

	    if (containsGregorMD && containsOrdinal) {
	      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
	    }

	    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);

	    // configure ourselves to deal with gregorian dates or week stuff
	    let units,
	      defaultValues,
	      objNow = tsToObj(tsNow, offsetProvis);
	    if (useWeekData) {
	      units = orderedWeekUnits;
	      defaultValues = defaultWeekUnitValues;
	      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
	    } else if (containsOrdinal) {
	      units = orderedOrdinalUnits;
	      defaultValues = defaultOrdinalUnitValues;
	      objNow = gregorianToOrdinal(objNow);
	    } else {
	      units = orderedUnits;
	      defaultValues = defaultUnitValues;
	    }

	    // set default values for missing stuff
	    let foundFirst = false;
	    for (const u of units) {
	      const v = normalized[u];
	      if (!isUndefined$1(v)) {
	        foundFirst = true;
	      } else if (foundFirst) {
	        normalized[u] = defaultValues[u];
	      } else {
	        normalized[u] = objNow[u];
	      }
	    }

	    // make sure the values we have are in range
	    const higherOrderInvalid = useWeekData
	        ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek)
	        : containsOrdinal
	        ? hasInvalidOrdinalData(normalized)
	        : hasInvalidGregorianData(normalized),
	      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

	    if (invalid) {
	      return DateTime.invalid(invalid);
	    }

	    // compute the actual time
	    const gregorian = useWeekData
	        ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek)
	        : containsOrdinal
	        ? ordinalToGregorian(normalized)
	        : normalized,
	      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),
	      inst = new DateTime({
	        ts: tsFinal,
	        zone: zoneToUse,
	        o: offsetFinal,
	        loc,
	      });

	    // gregorian data + weekday serves only to validate
	    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
	      return DateTime.invalid(
	        "mismatched weekday",
	        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
	      );
	    }

	    if (!inst.isValid) {
	      return DateTime.invalid(inst.invalid);
	    }

	    return inst;
	  }

	  /**
	   * Create a DateTime from an ISO 8601 string
	   * @param {string} text - the ISO string
	   * @param {Object} opts - options to affect the creation
	   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
	   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
	   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
	   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
	   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
	   * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance
	   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
	   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
	   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
	   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
	   * @example DateTime.fromISO('2016-W05-4')
	   * @return {DateTime}
	   */
	  static fromISO(text, opts = {}) {
	    const [vals, parsedZone] = parseISODate(text);
	    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
	  }

	  /**
	   * Create a DateTime from an RFC 2822 string
	   * @param {string} text - the RFC 2822 string
	   * @param {Object} opts - options to affect the creation
	   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
	   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
	   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
	   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
	   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
	   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
	   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
	   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
	   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
	   * @return {DateTime}
	   */
	  static fromRFC2822(text, opts = {}) {
	    const [vals, parsedZone] = parseRFC2822Date(text);
	    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
	  }

	  /**
	   * Create a DateTime from an HTTP header date
	   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
	   * @param {string} text - the HTTP header date
	   * @param {Object} opts - options to affect the creation
	   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
	   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
	   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
	   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
	   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
	   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
	   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
	   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
	   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
	   * @return {DateTime}
	   */
	  static fromHTTP(text, opts = {}) {
	    const [vals, parsedZone] = parseHTTPDate(text);
	    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
	  }

	  /**
	   * Create a DateTime from an input string and format string.
	   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
	   * @param {string} text - the string to parse
	   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
	   * @param {Object} opts - options to affect the creation
	   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
	   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
	   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
	   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
	   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
	   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
	   * @return {DateTime}
	   */
	  static fromFormat(text, fmt, opts = {}) {
	    if (isUndefined$1(text) || isUndefined$1(fmt)) {
	      throw new InvalidArgumentError("fromFormat requires an input string and a format");
	    }

	    const { locale = null, numberingSystem = null } = opts,
	      localeToUse = Locale.fromOpts({
	        locale,
	        numberingSystem,
	        defaultToEN: true,
	      }),
	      [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
	    if (invalid) {
	      return DateTime.invalid(invalid);
	    } else {
	      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
	    }
	  }

	  /**
	   * @deprecated use fromFormat instead
	   */
	  static fromString(text, fmt, opts = {}) {
	    return DateTime.fromFormat(text, fmt, opts);
	  }

	  /**
	   * Create a DateTime from a SQL date, time, or datetime
	   * Defaults to en-US if no locale has been specified, regardless of the system's locale
	   * @param {string} text - the string to parse
	   * @param {Object} opts - options to affect the creation
	   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
	   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
	   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
	   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
	   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
	   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
	   * @example DateTime.fromSQL('2017-05-15')
	   * @example DateTime.fromSQL('2017-05-15 09:12:34')
	   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
	   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
	   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
	   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
	   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
	   * @example DateTime.fromSQL('09:12:34.342')
	   * @return {DateTime}
	   */
	  static fromSQL(text, opts = {}) {
	    const [vals, parsedZone] = parseSQL(text);
	    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
	  }

	  /**
	   * Create an invalid DateTime.
	   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
	   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
	   * @return {DateTime}
	   */
	  static invalid(reason, explanation = null) {
	    if (!reason) {
	      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
	    }

	    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

	    if (Settings.throwOnInvalid) {
	      throw new InvalidDateTimeError(invalid);
	    } else {
	      return new DateTime({ invalid });
	    }
	  }

	  /**
	   * Check if an object is an instance of DateTime. Works across context boundaries
	   * @param {object} o
	   * @return {boolean}
	   */
	  static isDateTime(o) {
	    return (o && o.isLuxonDateTime) || false;
	  }

	  /**
	   * Produce the format string for a set of options
	   * @param formatOpts
	   * @param localeOpts
	   * @returns {string}
	   */
	  static parseFormatForOpts(formatOpts, localeOpts = {}) {
	    const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
	    return !tokenList ? null : tokenList.map((t) => (t ? t.val : null)).join("");
	  }

	  /**
	   * Produce the the fully expanded format token for the locale
	   * Does NOT quote characters, so quoted tokens will not round trip correctly
	   * @param fmt
	   * @param localeOpts
	   * @returns {string}
	   */
	  static expandFormat(fmt, localeOpts = {}) {
	    const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
	    return expanded.map((t) => t.val).join("");
	  }

	  static resetCache() {
	    zoneOffsetTs = undefined;
	    zoneOffsetGuessCache = {};
	  }

	  // INFO

	  /**
	   * Get the value of unit.
	   * @param {string} unit - a unit such as 'minute' or 'day'
	   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
	   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
	   * @return {number}
	   */
	  get(unit) {
	    return this[unit];
	  }

	  /**
	   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
	   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
	   * * The DateTime was created by an operation on another invalid date
	   * @type {boolean}
	   */
	  get isValid() {
	    return this.invalid === null;
	  }

	  /**
	   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
	   * @type {string}
	   */
	  get invalidReason() {
	    return this.invalid ? this.invalid.reason : null;
	  }

	  /**
	   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
	   * @type {string}
	   */
	  get invalidExplanation() {
	    return this.invalid ? this.invalid.explanation : null;
	  }

	  /**
	   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
	   *
	   * @type {string}
	   */
	  get locale() {
	    return this.isValid ? this.loc.locale : null;
	  }

	  /**
	   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
	   *
	   * @type {string}
	   */
	  get numberingSystem() {
	    return this.isValid ? this.loc.numberingSystem : null;
	  }

	  /**
	   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
	   *
	   * @type {string}
	   */
	  get outputCalendar() {
	    return this.isValid ? this.loc.outputCalendar : null;
	  }

	  /**
	   * Get the time zone associated with this DateTime.
	   * @type {Zone}
	   */
	  get zone() {
	    return this._zone;
	  }

	  /**
	   * Get the name of the time zone.
	   * @type {string}
	   */
	  get zoneName() {
	    return this.isValid ? this.zone.name : null;
	  }

	  /**
	   * Get the year
	   * @example DateTime.local(2017, 5, 25).year //=> 2017
	   * @type {number}
	   */
	  get year() {
	    return this.isValid ? this.c.year : NaN;
	  }

	  /**
	   * Get the quarter
	   * @example DateTime.local(2017, 5, 25).quarter //=> 2
	   * @type {number}
	   */
	  get quarter() {
	    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
	  }

	  /**
	   * Get the month (1-12).
	   * @example DateTime.local(2017, 5, 25).month //=> 5
	   * @type {number}
	   */
	  get month() {
	    return this.isValid ? this.c.month : NaN;
	  }

	  /**
	   * Get the day of the month (1-30ish).
	   * @example DateTime.local(2017, 5, 25).day //=> 25
	   * @type {number}
	   */
	  get day() {
	    return this.isValid ? this.c.day : NaN;
	  }

	  /**
	   * Get the hour of the day (0-23).
	   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
	   * @type {number}
	   */
	  get hour() {
	    return this.isValid ? this.c.hour : NaN;
	  }

	  /**
	   * Get the minute of the hour (0-59).
	   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
	   * @type {number}
	   */
	  get minute() {
	    return this.isValid ? this.c.minute : NaN;
	  }

	  /**
	   * Get the second of the minute (0-59).
	   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
	   * @type {number}
	   */
	  get second() {
	    return this.isValid ? this.c.second : NaN;
	  }

	  /**
	   * Get the millisecond of the second (0-999).
	   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
	   * @type {number}
	   */
	  get millisecond() {
	    return this.isValid ? this.c.millisecond : NaN;
	  }

	  /**
	   * Get the week year
	   * @see https://en.wikipedia.org/wiki/ISO_week_date
	   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
	   * @type {number}
	   */
	  get weekYear() {
	    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
	  }

	  /**
	   * Get the week number of the week year (1-52ish).
	   * @see https://en.wikipedia.org/wiki/ISO_week_date
	   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
	   * @type {number}
	   */
	  get weekNumber() {
	    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
	  }

	  /**
	   * Get the day of the week.
	   * 1 is Monday and 7 is Sunday
	   * @see https://en.wikipedia.org/wiki/ISO_week_date
	   * @example DateTime.local(2014, 11, 31).weekday //=> 4
	   * @type {number}
	   */
	  get weekday() {
	    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
	  }

	  /**
	   * Returns true if this date is on a weekend according to the locale, false otherwise
	   * @returns {boolean}
	   */
	  get isWeekend() {
	    return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
	  }

	  /**
	   * Get the day of the week according to the locale.
	   * 1 is the first day of the week and 7 is the last day of the week.
	   * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
	   * @returns {number}
	   */
	  get localWeekday() {
	    return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
	  }

	  /**
	   * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
	   * because the week can start on different days of the week (see localWeekday) and because a different number of days
	   * is required for a week to count as the first week of a year.
	   * @returns {number}
	   */
	  get localWeekNumber() {
	    return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
	  }

	  /**
	   * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
	   * differently, see localWeekNumber.
	   * @returns {number}
	   */
	  get localWeekYear() {
	    return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
	  }

	  /**
	   * Get the ordinal (meaning the day of the year)
	   * @example DateTime.local(2017, 5, 25).ordinal //=> 145
	   * @type {number|DateTime}
	   */
	  get ordinal() {
	    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
	  }

	  /**
	   * Get the human readable short month name, such as 'Oct'.
	   * Defaults to the system's locale if no locale has been specified
	   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
	   * @type {string}
	   */
	  get monthShort() {
	    return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
	  }

	  /**
	   * Get the human readable long month name, such as 'October'.
	   * Defaults to the system's locale if no locale has been specified
	   * @example DateTime.local(2017, 10, 30).monthLong //=> October
	   * @type {string}
	   */
	  get monthLong() {
	    return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
	  }

	  /**
	   * Get the human readable short weekday, such as 'Mon'.
	   * Defaults to the system's locale if no locale has been specified
	   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
	   * @type {string}
	   */
	  get weekdayShort() {
	    return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
	  }

	  /**
	   * Get the human readable long weekday, such as 'Monday'.
	   * Defaults to the system's locale if no locale has been specified
	   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
	   * @type {string}
	   */
	  get weekdayLong() {
	    return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
	  }

	  /**
	   * Get the UTC offset of this DateTime in minutes
	   * @example DateTime.now().offset //=> -240
	   * @example DateTime.utc().offset //=> 0
	   * @type {number}
	   */
	  get offset() {
	    return this.isValid ? +this.o : NaN;
	  }

	  /**
	   * Get the short human name for the zone's current offset, for example "EST" or "EDT".
	   * Defaults to the system's locale if no locale has been specified
	   * @type {string}
	   */
	  get offsetNameShort() {
	    if (this.isValid) {
	      return this.zone.offsetName(this.ts, {
	        format: "short",
	        locale: this.locale,
	      });
	    } else {
	      return null;
	    }
	  }

	  /**
	   * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
	   * Defaults to the system's locale if no locale has been specified
	   * @type {string}
	   */
	  get offsetNameLong() {
	    if (this.isValid) {
	      return this.zone.offsetName(this.ts, {
	        format: "long",
	        locale: this.locale,
	      });
	    } else {
	      return null;
	    }
	  }

	  /**
	   * Get whether this zone's offset ever changes, as in a DST.
	   * @type {boolean}
	   */
	  get isOffsetFixed() {
	    return this.isValid ? this.zone.isUniversal : null;
	  }

	  /**
	   * Get whether the DateTime is in a DST.
	   * @type {boolean}
	   */
	  get isInDST() {
	    if (this.isOffsetFixed) {
	      return false;
	    } else {
	      return (
	        this.offset > this.set({ month: 1, day: 1 }).offset ||
	        this.offset > this.set({ month: 5 }).offset
	      );
	    }
	  }

	  /**
	   * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
	   * in this DateTime's zone. During DST changes local time can be ambiguous, for example
	   * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
	   * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
	   * @returns {DateTime[]}
	   */
	  getPossibleOffsets() {
	    if (!this.isValid || this.isOffsetFixed) {
	      return [this];
	    }
	    const dayMs = 86400000;
	    const minuteMs = 60000;
	    const localTS = objToLocalTS(this.c);
	    const oEarlier = this.zone.offset(localTS - dayMs);
	    const oLater = this.zone.offset(localTS + dayMs);

	    const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
	    const o2 = this.zone.offset(localTS - oLater * minuteMs);
	    if (o1 === o2) {
	      return [this];
	    }
	    const ts1 = localTS - o1 * minuteMs;
	    const ts2 = localTS - o2 * minuteMs;
	    const c1 = tsToObj(ts1, o1);
	    const c2 = tsToObj(ts2, o2);
	    if (
	      c1.hour === c2.hour &&
	      c1.minute === c2.minute &&
	      c1.second === c2.second &&
	      c1.millisecond === c2.millisecond
	    ) {
	      return [clone(this, { ts: ts1 }), clone(this, { ts: ts2 })];
	    }
	    return [this];
	  }

	  /**
	   * Returns true if this DateTime is in a leap year, false otherwise
	   * @example DateTime.local(2016).isInLeapYear //=> true
	   * @example DateTime.local(2013).isInLeapYear //=> false
	   * @type {boolean}
	   */
	  get isInLeapYear() {
	    return isLeapYear(this.year);
	  }

	  /**
	   * Returns the number of days in this DateTime's month
	   * @example DateTime.local(2016, 2).daysInMonth //=> 29
	   * @example DateTime.local(2016, 3).daysInMonth //=> 31
	   * @type {number}
	   */
	  get daysInMonth() {
	    return daysInMonth(this.year, this.month);
	  }

	  /**
	   * Returns the number of days in this DateTime's year
	   * @example DateTime.local(2016).daysInYear //=> 366
	   * @example DateTime.local(2013).daysInYear //=> 365
	   * @type {number}
	   */
	  get daysInYear() {
	    return this.isValid ? daysInYear(this.year) : NaN;
	  }

	  /**
	   * Returns the number of weeks in this DateTime's year
	   * @see https://en.wikipedia.org/wiki/ISO_week_date
	   * @example DateTime.local(2004).weeksInWeekYear //=> 53
	   * @example DateTime.local(2013).weeksInWeekYear //=> 52
	   * @type {number}
	   */
	  get weeksInWeekYear() {
	    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
	  }

	  /**
	   * Returns the number of weeks in this DateTime's local week year
	   * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
	   * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
	   * @type {number}
	   */
	  get weeksInLocalWeekYear() {
	    return this.isValid
	      ? weeksInWeekYear(
	          this.localWeekYear,
	          this.loc.getMinDaysInFirstWeek(),
	          this.loc.getStartOfWeek()
	        )
	      : NaN;
	  }

	  /**
	   * Returns the resolved Intl options for this DateTime.
	   * This is useful in understanding the behavior of formatting methods
	   * @param {Object} opts - the same options as toLocaleString
	   * @return {Object}
	   */
	  resolvedLocaleOptions(opts = {}) {
	    const { locale, numberingSystem, calendar } = Formatter.create(
	      this.loc.clone(opts),
	      opts
	    ).resolvedOptions(this);
	    return { locale, numberingSystem, outputCalendar: calendar };
	  }

	  // TRANSFORM

	  /**
	   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
	   *
	   * Equivalent to {@link DateTime#setZone}('utc')
	   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
	   * @param {Object} [opts={}] - options to pass to `setZone()`
	   * @return {DateTime}
	   */
	  toUTC(offset = 0, opts = {}) {
	    return this.setZone(FixedOffsetZone.instance(offset), opts);
	  }

	  /**
	   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
	   *
	   * Equivalent to `setZone('local')`
	   * @return {DateTime}
	   */
	  toLocal() {
	    return this.setZone(Settings.defaultZone);
	  }

	  /**
	   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
	   *
	   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
	   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
	   * @param {Object} opts - options
	   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
	   * @return {DateTime}
	   */
	  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
	    zone = normalizeZone(zone, Settings.defaultZone);
	    if (zone.equals(this.zone)) {
	      return this;
	    } else if (!zone.isValid) {
	      return DateTime.invalid(unsupportedZone(zone));
	    } else {
	      let newTS = this.ts;
	      if (keepLocalTime || keepCalendarTime) {
	        const offsetGuess = zone.offset(this.ts);
	        const asObj = this.toObject();
	        [newTS] = objToTS(asObj, offsetGuess, zone);
	      }
	      return clone(this, { ts: newTS, zone });
	    }
	  }

	  /**
	   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
	   * @param {Object} properties - the properties to set
	   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
	   * @return {DateTime}
	   */
	  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
	    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
	    return clone(this, { loc });
	  }

	  /**
	   * "Set" the locale. Returns a newly-constructed DateTime.
	   * Just a convenient alias for reconfigure({ locale })
	   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
	   * @return {DateTime}
	   */
	  setLocale(locale) {
	    return this.reconfigure({ locale });
	  }

	  /**
	   * "Set" the values of specified units. Returns a newly-constructed DateTime.
	   * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
	   *
	   * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
	   * They cannot be mixed with ISO-week units like `weekday`.
	   * @param {Object} values - a mapping of units to numbers
	   * @example dt.set({ year: 2017 })
	   * @example dt.set({ hour: 8, minute: 30 })
	   * @example dt.set({ weekday: 5 })
	   * @example dt.set({ year: 2005, ordinal: 234 })
	   * @return {DateTime}
	   */
	  set(values) {
	    if (!this.isValid) return this;

	    const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
	    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);

	    const settingWeekStuff =
	        !isUndefined$1(normalized.weekYear) ||
	        !isUndefined$1(normalized.weekNumber) ||
	        !isUndefined$1(normalized.weekday),
	      containsOrdinal = !isUndefined$1(normalized.ordinal),
	      containsGregorYear = !isUndefined$1(normalized.year),
	      containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day),
	      containsGregor = containsGregorYear || containsGregorMD,
	      definiteWeekDef = normalized.weekYear || normalized.weekNumber;

	    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
	      throw new ConflictingSpecificationError(
	        "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
	      );
	    }

	    if (containsGregorMD && containsOrdinal) {
	      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
	    }

	    let mixed;
	    if (settingWeekStuff) {
	      mixed = weekToGregorian(
	        { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },
	        minDaysInFirstWeek,
	        startOfWeek
	      );
	    } else if (!isUndefined$1(normalized.ordinal)) {
	      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
	    } else {
	      mixed = { ...this.toObject(), ...normalized };

	      // if we didn't set the day but we ended up on an overflow date,
	      // use the last day of the right month
	      if (isUndefined$1(normalized.day)) {
	        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
	      }
	    }

	    const [ts, o] = objToTS(mixed, this.o, this.zone);
	    return clone(this, { ts, o });
	  }

	  /**
	   * Add a period of time to this DateTime and return the resulting DateTime
	   *
	   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
	   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
	   * @example DateTime.now().plus(123) //~> in 123 milliseconds
	   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
	   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
	   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
	   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
	   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
	   * @return {DateTime}
	   */
	  plus(duration) {
	    if (!this.isValid) return this;
	    const dur = Duration.fromDurationLike(duration);
	    return clone(this, adjustTime(this, dur));
	  }

	  /**
	   * Subtract a period of time to this DateTime and return the resulting DateTime
	   * See {@link DateTime#plus}
	   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
	   @return {DateTime}
	   */
	  minus(duration) {
	    if (!this.isValid) return this;
	    const dur = Duration.fromDurationLike(duration).negate();
	    return clone(this, adjustTime(this, dur));
	  }

	  /**
	   * "Set" this DateTime to the beginning of a unit of time.
	   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
	   * @param {Object} opts - options
	   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
	   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
	   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
	   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
	   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
	   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
	   * @return {DateTime}
	   */
	  startOf(unit, { useLocaleWeeks = false } = {}) {
	    if (!this.isValid) return this;

	    const o = {},
	      normalizedUnit = Duration.normalizeUnit(unit);
	    switch (normalizedUnit) {
	      case "years":
	        o.month = 1;
	      // falls through
	      case "quarters":
	      case "months":
	        o.day = 1;
	      // falls through
	      case "weeks":
	      case "days":
	        o.hour = 0;
	      // falls through
	      case "hours":
	        o.minute = 0;
	      // falls through
	      case "minutes":
	        o.second = 0;
	      // falls through
	      case "seconds":
	        o.millisecond = 0;
	        break;
	      // no default, invalid units throw in normalizeUnit()
	    }

	    if (normalizedUnit === "weeks") {
	      if (useLocaleWeeks) {
	        const startOfWeek = this.loc.getStartOfWeek();
	        const { weekday } = this;
	        if (weekday < startOfWeek) {
	          o.weekNumber = this.weekNumber - 1;
	        }
	        o.weekday = startOfWeek;
	      } else {
	        o.weekday = 1;
	      }
	    }

	    if (normalizedUnit === "quarters") {
	      const q = Math.ceil(this.month / 3);
	      o.month = (q - 1) * 3 + 1;
	    }

	    return this.set(o);
	  }

	  /**
	   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
	   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
	   * @param {Object} opts - options
	   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
	   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
	   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
	   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
	   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
	   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
	   * @return {DateTime}
	   */
	  endOf(unit, opts) {
	    return this.isValid
	      ? this.plus({ [unit]: 1 })
	          .startOf(unit, opts)
	          .minus(1)
	      : this;
	  }

	  // OUTPUT

	  /**
	   * Returns a string representation of this DateTime formatted according to the specified format string.
	   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
	   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
	   * @param {string} fmt - the format string
	   * @param {Object} opts - opts to override the configuration options on this DateTime
	   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
	   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
	   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
	   * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
	   * @return {string}
	   */
	  toFormat(fmt, opts = {}) {
	    return this.isValid
	      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)
	      : INVALID;
	  }

	  /**
	   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
	   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
	   * of the DateTime in the assigned locale.
	   * Defaults to the system's locale if no locale has been specified
	   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
	   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
	   * @param {Object} opts - opts to override the configuration options on this DateTime
	   * @example DateTime.now().toLocaleString(); //=> 4/20/2017
	   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
	   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
	   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
	   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
	   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
	   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
	   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
	   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
	   * @return {string}
	   */
	  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
	    return this.isValid
	      ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)
	      : INVALID;
	  }

	  /**
	   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
	   * Defaults to the system's locale if no locale has been specified
	   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
	   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
	   * @example DateTime.now().toLocaleParts(); //=> [
	   *                                   //=>   { type: 'day', value: '25' },
	   *                                   //=>   { type: 'literal', value: '/' },
	   *                                   //=>   { type: 'month', value: '05' },
	   *                                   //=>   { type: 'literal', value: '/' },
	   *                                   //=>   { type: 'year', value: '1982' }
	   *                                   //=> ]
	   */
	  toLocaleParts(opts = {}) {
	    return this.isValid
	      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)
	      : [];
	  }

	  /**
	   * Returns an ISO 8601-compliant string representation of this DateTime
	   * @param {Object} opts - options
	   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
	   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
	   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
	   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
	   * @param {string} [opts.format='extended'] - choose between the basic and extended format
	   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
	   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
	   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
	   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
	   * @return {string}
	   */
	  toISO({
	    format = "extended",
	    suppressSeconds = false,
	    suppressMilliseconds = false,
	    includeOffset = true,
	    extendedZone = false,
	  } = {}) {
	    if (!this.isValid) {
	      return null;
	    }

	    const ext = format === "extended";

	    let c = toISODate(this, ext);
	    c += "T";
	    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
	    return c;
	  }

	  /**
	   * Returns an ISO 8601-compliant string representation of this DateTime's date component
	   * @param {Object} opts - options
	   * @param {string} [opts.format='extended'] - choose between the basic and extended format
	   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
	   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
	   * @return {string}
	   */
	  toISODate({ format = "extended" } = {}) {
	    if (!this.isValid) {
	      return null;
	    }

	    return toISODate(this, format === "extended");
	  }

	  /**
	   * Returns an ISO 8601-compliant string representation of this DateTime's week date
	   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
	   * @return {string}
	   */
	  toISOWeekDate() {
	    return toTechFormat(this, "kkkk-'W'WW-c");
	  }

	  /**
	   * Returns an ISO 8601-compliant string representation of this DateTime's time component
	   * @param {Object} opts - options
	   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
	   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
	   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
	   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
	   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
	   * @param {string} [opts.format='extended'] - choose between the basic and extended format
	   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
	   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
	   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
	   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
	   * @return {string}
	   */
	  toISOTime({
	    suppressMilliseconds = false,
	    suppressSeconds = false,
	    includeOffset = true,
	    includePrefix = false,
	    extendedZone = false,
	    format = "extended",
	  } = {}) {
	    if (!this.isValid) {
	      return null;
	    }

	    let c = includePrefix ? "T" : "";
	    return (
	      c +
	      toISOTime(
	        this,
	        format === "extended",
	        suppressSeconds,
	        suppressMilliseconds,
	        includeOffset,
	        extendedZone
	      )
	    );
	  }

	  /**
	   * Returns an RFC 2822-compatible string representation of this DateTime
	   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
	   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
	   * @return {string}
	   */
	  toRFC2822() {
	    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
	  }

	  /**
	   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
	   * Specifically, the string conforms to RFC 1123.
	   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
	   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
	   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
	   * @return {string}
	   */
	  toHTTP() {
	    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
	  }

	  /**
	   * Returns a string representation of this DateTime appropriate for use in SQL Date
	   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
	   * @return {string}
	   */
	  toSQLDate() {
	    if (!this.isValid) {
	      return null;
	    }
	    return toISODate(this, true);
	  }

	  /**
	   * Returns a string representation of this DateTime appropriate for use in SQL Time
	   * @param {Object} opts - options
	   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
	   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
	   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
	   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
	   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
	   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
	   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
	   * @return {string}
	   */
	  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
	    let fmt = "HH:mm:ss.SSS";

	    if (includeZone || includeOffset) {
	      if (includeOffsetSpace) {
	        fmt += " ";
	      }
	      if (includeZone) {
	        fmt += "z";
	      } else if (includeOffset) {
	        fmt += "ZZ";
	      }
	    }

	    return toTechFormat(this, fmt, true);
	  }

	  /**
	   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
	   * @param {Object} opts - options
	   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
	   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
	   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
	   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
	   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
	   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
	   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
	   * @return {string}
	   */
	  toSQL(opts = {}) {
	    if (!this.isValid) {
	      return null;
	    }

	    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
	  }

	  /**
	   * Returns a string representation of this DateTime appropriate for debugging
	   * @return {string}
	   */
	  toString() {
	    return this.isValid ? this.toISO() : INVALID;
	  }

	  /**
	   * Returns a string representation of this DateTime appropriate for the REPL.
	   * @return {string}
	   */
	  [Symbol.for("nodejs.util.inspect.custom")]() {
	    if (this.isValid) {
	      return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
	    } else {
	      return `DateTime { Invalid, reason: ${this.invalidReason} }`;
	    }
	  }

	  /**
	   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
	   * @return {number}
	   */
	  valueOf() {
	    return this.toMillis();
	  }

	  /**
	   * Returns the epoch milliseconds of this DateTime.
	   * @return {number}
	   */
	  toMillis() {
	    return this.isValid ? this.ts : NaN;
	  }

	  /**
	   * Returns the epoch seconds of this DateTime.
	   * @return {number}
	   */
	  toSeconds() {
	    return this.isValid ? this.ts / 1000 : NaN;
	  }

	  /**
	   * Returns the epoch seconds (as a whole number) of this DateTime.
	   * @return {number}
	   */
	  toUnixInteger() {
	    return this.isValid ? Math.floor(this.ts / 1000) : NaN;
	  }

	  /**
	   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
	   * @return {string}
	   */
	  toJSON() {
	    return this.toISO();
	  }

	  /**
	   * Returns a BSON serializable equivalent to this DateTime.
	   * @return {Date}
	   */
	  toBSON() {
	    return this.toJSDate();
	  }

	  /**
	   * Returns a JavaScript object with this DateTime's year, month, day, and so on.
	   * @param opts - options for generating the object
	   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
	   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
	   * @return {Object}
	   */
	  toObject(opts = {}) {
	    if (!this.isValid) return {};

	    const base = { ...this.c };

	    if (opts.includeConfig) {
	      base.outputCalendar = this.outputCalendar;
	      base.numberingSystem = this.loc.numberingSystem;
	      base.locale = this.loc.locale;
	    }
	    return base;
	  }

	  /**
	   * Returns a JavaScript Date equivalent to this DateTime.
	   * @return {Date}
	   */
	  toJSDate() {
	    return new Date(this.isValid ? this.ts : NaN);
	  }

	  // COMPARE

	  /**
	   * Return the difference between two DateTimes as a Duration.
	   * @param {DateTime} otherDateTime - the DateTime to compare this one to
	   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
	   * @param {Object} opts - options that affect the creation of the Duration
	   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
	   * @example
	   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
	   *     i2 = DateTime.fromISO('1983-10-14T10:30');
	   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
	   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
	   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
	   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
	   * @return {Duration}
	   */
	  diff(otherDateTime, unit = "milliseconds", opts = {}) {
	    if (!this.isValid || !otherDateTime.isValid) {
	      return Duration.invalid("created by diffing an invalid DateTime");
	    }

	    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };

	    const units = maybeArray(unit).map(Duration.normalizeUnit),
	      otherIsLater = otherDateTime.valueOf() > this.valueOf(),
	      earlier = otherIsLater ? this : otherDateTime,
	      later = otherIsLater ? otherDateTime : this,
	      diffed = diff(earlier, later, units, durOpts);

	    return otherIsLater ? diffed.negate() : diffed;
	  }

	  /**
	   * Return the difference between this DateTime and right now.
	   * See {@link DateTime#diff}
	   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
	   * @param {Object} opts - options that affect the creation of the Duration
	   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
	   * @return {Duration}
	   */
	  diffNow(unit = "milliseconds", opts = {}) {
	    return this.diff(DateTime.now(), unit, opts);
	  }

	  /**
	   * Return an Interval spanning between this DateTime and another DateTime
	   * @param {DateTime} otherDateTime - the other end point of the Interval
	   * @return {Interval}
	   */
	  until(otherDateTime) {
	    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
	  }

	  /**
	   * Return whether this DateTime is in the same unit of time as another DateTime.
	   * Higher-order units must also be identical for this function to return `true`.
	   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
	   * @param {DateTime} otherDateTime - the other DateTime
	   * @param {string} unit - the unit of time to check sameness on
	   * @param {Object} opts - options
	   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
	   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
	   * @return {boolean}
	   */
	  hasSame(otherDateTime, unit, opts) {
	    if (!this.isValid) return false;

	    const inputMs = otherDateTime.valueOf();
	    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
	    return (
	      adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts)
	    );
	  }

	  /**
	   * Equality check
	   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
	   * To compare just the millisecond values, use `+dt1 === +dt2`.
	   * @param {DateTime} other - the other DateTime
	   * @return {boolean}
	   */
	  equals(other) {
	    return (
	      this.isValid &&
	      other.isValid &&
	      this.valueOf() === other.valueOf() &&
	      this.zone.equals(other.zone) &&
	      this.loc.equals(other.loc)
	    );
	  }

	  /**
	   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
	   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
	   * @param {Object} options - options that affect the output
	   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
	   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
	   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
	   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
	   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
	   * @param {string} options.locale - override the locale of this DateTime
	   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
	   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
	   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
	   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
	   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
	   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
	   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
	   */
	  toRelative(options = {}) {
	    if (!this.isValid) return null;
	    const base = options.base || DateTime.fromObject({}, { zone: this.zone }),
	      padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;
	    let units = ["years", "months", "days", "hours", "minutes", "seconds"];
	    let unit = options.unit;
	    if (Array.isArray(options.unit)) {
	      units = options.unit;
	      unit = undefined;
	    }
	    return diffRelative(base, this.plus(padding), {
	      ...options,
	      numeric: "always",
	      units,
	      unit,
	    });
	  }

	  /**
	   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
	   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
	   * @param {Object} options - options that affect the output
	   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
	   * @param {string} options.locale - override the locale of this DateTime
	   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
	   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
	   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
	   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
	   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
	   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
	   */
	  toRelativeCalendar(options = {}) {
	    if (!this.isValid) return null;

	    return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {
	      ...options,
	      numeric: "auto",
	      units: ["years", "months", "days"],
	      calendary: true,
	    });
	  }

	  /**
	   * Return the min of several date times
	   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
	   * @return {DateTime} the min DateTime, or undefined if called with no argument
	   */
	  static min(...dateTimes) {
	    if (!dateTimes.every(DateTime.isDateTime)) {
	      throw new InvalidArgumentError("min requires all arguments be DateTimes");
	    }
	    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
	  }

	  /**
	   * Return the max of several date times
	   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
	   * @return {DateTime} the max DateTime, or undefined if called with no argument
	   */
	  static max(...dateTimes) {
	    if (!dateTimes.every(DateTime.isDateTime)) {
	      throw new InvalidArgumentError("max requires all arguments be DateTimes");
	    }
	    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
	  }

	  // MISC

	  /**
	   * Explain how a string would be parsed by fromFormat()
	   * @param {string} text - the string to parse
	   * @param {string} fmt - the format the string is expected to be in (see description)
	   * @param {Object} options - options taken by fromFormat()
	   * @return {Object}
	   */
	  static fromFormatExplain(text, fmt, options = {}) {
	    const { locale = null, numberingSystem = null } = options,
	      localeToUse = Locale.fromOpts({
	        locale,
	        numberingSystem,
	        defaultToEN: true,
	      });
	    return explainFromTokens(localeToUse, text, fmt);
	  }

	  /**
	   * @deprecated use fromFormatExplain instead
	   */
	  static fromStringExplain(text, fmt, options = {}) {
	    return DateTime.fromFormatExplain(text, fmt, options);
	  }

	  /**
	   * Build a parser for `fmt` using the given locale. This parser can be passed
	   * to {@link DateTime.fromFormatParser} to a parse a date in this format. This
	   * can be used to optimize cases where many dates need to be parsed in a
	   * specific format.
	   *
	   * @param {String} fmt - the format the string is expected to be in (see
	   * description)
	   * @param {Object} options - options used to set locale and numberingSystem
	   * for parser
	   * @returns {TokenParser} - opaque object to be used
	   */
	  static buildFormatParser(fmt, options = {}) {
	    const { locale = null, numberingSystem = null } = options,
	      localeToUse = Locale.fromOpts({
	        locale,
	        numberingSystem,
	        defaultToEN: true,
	      });
	    return new TokenParser(localeToUse, fmt);
	  }

	  /**
	   * Create a DateTime from an input string and format parser.
	   *
	   * The format parser must have been created with the same locale as this call.
	   *
	   * @param {String} text - the string to parse
	   * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}
	   * @param {Object} opts - options taken by fromFormat()
	   * @returns {DateTime}
	   */
	  static fromFormatParser(text, formatParser, opts = {}) {
	    if (isUndefined$1(text) || isUndefined$1(formatParser)) {
	      throw new InvalidArgumentError(
	        "fromFormatParser requires an input string and a format parser"
	      );
	    }
	    const { locale = null, numberingSystem = null } = opts,
	      localeToUse = Locale.fromOpts({
	        locale,
	        numberingSystem,
	        defaultToEN: true,
	      });

	    if (!localeToUse.equals(formatParser.locale)) {
	      throw new InvalidArgumentError(
	        `fromFormatParser called with a locale of ${localeToUse}, ` +
	          `but the format parser was created for ${formatParser.locale}`
	      );
	    }

	    const { result, zone, specificOffset, invalidReason } = formatParser.explainFromTokens(text);

	    if (invalidReason) {
	      return DateTime.invalid(invalidReason);
	    } else {
	      return parseDataToDateTime(
	        result,
	        zone,
	        opts,
	        `format ${formatParser.format}`,
	        text,
	        specificOffset
	      );
	    }
	  }

	  // FORMAT PRESETS

	  /**
	   * {@link DateTime#toLocaleString} format like 10/14/1983
	   * @type {Object}
	   */
	  static get DATE_SHORT() {
	    return DATE_SHORT;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
	   * @type {Object}
	   */
	  static get DATE_MED() {
	    return DATE_MED;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
	   * @type {Object}
	   */
	  static get DATE_MED_WITH_WEEKDAY() {
	    return DATE_MED_WITH_WEEKDAY;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'October 14, 1983'
	   * @type {Object}
	   */
	  static get DATE_FULL() {
	    return DATE_FULL;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
	   * @type {Object}
	   */
	  static get DATE_HUGE() {
	    return DATE_HUGE;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get TIME_SIMPLE() {
	    return TIME_SIMPLE;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get TIME_WITH_SECONDS() {
	    return TIME_WITH_SECONDS;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get TIME_WITH_SHORT_OFFSET() {
	    return TIME_WITH_SHORT_OFFSET;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get TIME_WITH_LONG_OFFSET() {
	    return TIME_WITH_LONG_OFFSET;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
	   * @type {Object}
	   */
	  static get TIME_24_SIMPLE() {
	    return TIME_24_SIMPLE;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
	   * @type {Object}
	   */
	  static get TIME_24_WITH_SECONDS() {
	    return TIME_24_WITH_SECONDS;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
	   * @type {Object}
	   */
	  static get TIME_24_WITH_SHORT_OFFSET() {
	    return TIME_24_WITH_SHORT_OFFSET;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
	   * @type {Object}
	   */
	  static get TIME_24_WITH_LONG_OFFSET() {
	    return TIME_24_WITH_LONG_OFFSET;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get DATETIME_SHORT() {
	    return DATETIME_SHORT;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get DATETIME_SHORT_WITH_SECONDS() {
	    return DATETIME_SHORT_WITH_SECONDS;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get DATETIME_MED() {
	    return DATETIME_MED;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get DATETIME_MED_WITH_SECONDS() {
	    return DATETIME_MED_WITH_SECONDS;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get DATETIME_MED_WITH_WEEKDAY() {
	    return DATETIME_MED_WITH_WEEKDAY;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get DATETIME_FULL() {
	    return DATETIME_FULL;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get DATETIME_FULL_WITH_SECONDS() {
	    return DATETIME_FULL_WITH_SECONDS;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get DATETIME_HUGE() {
	    return DATETIME_HUGE;
	  }

	  /**
	   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
	   * @type {Object}
	   */
	  static get DATETIME_HUGE_WITH_SECONDS() {
	    return DATETIME_HUGE_WITH_SECONDS;
	  }
	}

	/**
	 * @private
	 */
	function friendlyDateTime(dateTimeish) {
	  if (DateTime.isDateTime(dateTimeish)) {
	    return dateTimeish;
	  } else if (dateTimeish && dateTimeish.valueOf && isNumber$1(dateTimeish.valueOf())) {
	    return DateTime.fromJSDate(dateTimeish);
	  } else if (dateTimeish && typeof dateTimeish === "object") {
	    return DateTime.fromObject(dateTimeish);
	  } else {
	    throw new InvalidArgumentError(
	      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
	    );
	  }
	}

	const _state = {};
	let getRandomValues;
	const randoms8 = new Uint8Array(16);
	const byteToHex = [];
	for (let i = 0; i < 256; ++i) {
	  byteToHex.push((i + 256).toString(16).slice(1));
	}
	function updateV7State(state, now, randoms) {
	  state.msecs ??= -Infinity;
	  state.seq ??= 0;
	  if (now > state.msecs) {
	    state.seq = randoms[6] << 23 | randoms[7] << 16 | randoms[8] << 8 | randoms[9];
	    state.msecs = now;
	  } else {
	    state.seq = state.seq + 1 | 0;
	    if (state.seq === 0) {
	      state.msecs++;
	    }
	  }
	  return state;
	}
	function v7Bytes(randoms, msecs, seq, buf, offset = 0) {
	  if (!buf) {
	    buf = new Uint8Array(16);
	    offset = 0;
	  }
	  msecs ??= Date.now();
	  seq ??= randoms[6] * 127 << 24 | randoms[7] << 16 | randoms[8] << 8 | randoms[9];
	  buf[offset++] = msecs / 1099511627776 & 255;
	  buf[offset++] = msecs / 4294967296 & 255;
	  buf[offset++] = msecs / 16777216 & 255;
	  buf[offset++] = msecs / 65536 & 255;
	  buf[offset++] = msecs / 256 & 255;
	  buf[offset++] = msecs & 255;
	  buf[offset++] = 112 | seq >>> 28 & 15;
	  buf[offset++] = seq >>> 20 & 255;
	  buf[offset++] = 128 | seq >>> 14 & 63;
	  buf[offset++] = seq >>> 6 & 255;
	  buf[offset++] = seq << 2 & 255 | randoms[10] & 3;
	  buf[offset++] = randoms[11];
	  buf[offset++] = randoms[12];
	  buf[offset++] = randoms[13];
	  buf[offset++] = randoms[14];
	  buf[offset++] = randoms[15];
	  return buf;
	}
	function unsafeStringify(arr, offset = 0) {
	  return (byteToHex[arr[offset]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
	}
	function uuidv7() {
	  let bytes;
	  const buf = void 0;
	  const offset = void 0;
	  const now = Date.now();
	  if (!getRandomValues) {
	    if (typeof crypto === "undefined" || !crypto.getRandomValues) {
	      throw new Error(
	        "crypto.getRandomValues() not supported."
	      );
	    }
	    getRandomValues = crypto.getRandomValues.bind(crypto);
	  }
	  const randoms = getRandomValues(randoms8);
	  updateV7State(_state, now, randoms);
	  bytes = v7Bytes(randoms, _state.msecs, _state.seq, buf, offset);
	  return unsafeStringify(bytes);
	}

	const reEscape = /[&<>'"]/g;
	const reUnescape = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34)/g;
	const escapeEntities = {
	  "&": "&amp",
	  "<": "&lt",
	  ">": "&gt",
	  "'": "&#39",
	  '"': "&quot"
	};
	const unescapeEntities = {
	  "&amp": "&",
	  "&#38": "&",
	  "&lt": "<",
	  "&#60": "<",
	  "&gt": ">",
	  "&#62": ">",
	  "&apos": "'",
	  "&#39": "'",
	  "&quot": '"',
	  "&#34": '"'
	};
	class TextManager {
	  getRandom(length = 8) {
	    return [...Array(length)].map(() => (~~(Math.random() * 36)).toString(36)).join("");
	  }
	  /**
	   * Generates UUID
	   */
	  getUniqId() {
	    return "xxxxxxxx-xlsx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
	      const r = Math.random() * 16 | 0;
	      const v = c === "x" ? r : r & 3 | 8;
	      return v.toString(16);
	    });
	  }
	  /**
	   * Generate uuid v7
	   * @return {string}
	   */
	  getUuidRfc4122() {
	    return uuidv7();
	  }
	  /**
	   * Encodes all unsafe entities
	   * @param {string} value
	   * @return {string}
	   */
	  encode(value) {
	    if (Type.isString(value)) {
	      return value.replace(reEscape, (item) => escapeEntities[item]);
	    }
	    return value;
	  }
	  /**
	   * Decodes all encoded entities
	   * @param {string} value
	   * @return {string}
	   */
	  decode(value) {
	    if (Type.isString(value)) {
	      return value.replace(reUnescape, (item) => unescapeEntities[item]);
	    }
	    return value;
	  }
	  toNumber(value) {
	    const parsedValue = Number.parseFloat(value);
	    if (Type.isNumber(parsedValue)) {
	      return parsedValue;
	    }
	    return 0;
	  }
	  toInteger(value) {
	    return this.toNumber(Number.parseInt(value, 10));
	  }
	  toBoolean(value, trueValues = []) {
	    const transformedValue = Type.isString(value) ? value.toLowerCase() : value;
	    return ["true", "y", "1", 1, true, ...trueValues].includes(transformedValue);
	  }
	  toCamelCase(str) {
	    if (!Type.isStringFilled(str)) {
	      return str;
	    }
	    const regex = /[-_\s]+(.)?/g;
	    if (!regex.test(str)) {
	      return str.match(/^[A-Z]+$/) ? str.toLowerCase() : str[0].toLowerCase() + str.slice(1);
	    }
	    str = str.toLowerCase();
	    str = str.replace(regex, (_match, letter) => letter ? letter.toUpperCase() : "");
	    return str[0].toLowerCase() + str.substring(1);
	  }
	  toPascalCase(str) {
	    if (!Type.isStringFilled(str)) {
	      return str;
	    }
	    return this.capitalize(this.toCamelCase(str));
	  }
	  toKebabCase(str) {
	    if (!Type.isStringFilled(str)) {
	      return str;
	    }
	    const matches = str.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g);
	    if (!matches) {
	      return str;
	    }
	    return matches.map((x) => x.toLowerCase()).join("-");
	  }
	  capitalize(str) {
	    if (!Type.isStringFilled(str)) {
	      return str;
	    }
	    return str[0].toUpperCase() + str.substring(1);
	  }
	  numberFormat(number, decimals = 0, decPoint = ".", thousandsSep = ",") {
	    const n = !Number.isFinite(number) ? 0 : number;
	    const fractionDigits = !Number.isFinite(decimals) ? 0 : Math.abs(decimals);
	    const toFixedFix = (n2, fractionDigits2) => {
	      const k = Math.pow(10, fractionDigits2);
	      return Math.round(n2 * k) / k;
	    };
	    let s = (fractionDigits ? toFixedFix(n, fractionDigits) : Math.round(n)).toString().split(".");
	    if (s[0].length > 3) {
	      s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, thousandsSep);
	    }
	    if ((s[1] || "").length < fractionDigits) {
	      s[1] = s[1] || "";
	      s[1] += new Array(fractionDigits - s[1].length + 1).join("0");
	    }
	    return s.join(decPoint);
	  }
	  /**
	   * Convert string to DateTime from ISO 8601 or self template
	   *
	   * @param {string} dateString
	   * @param {string} template
	   * @param opts
	   * @returns {DateTime}
	   *
	   * @link https://moment.github.io/luxon/#/parsing?id=parsing-technical-formats
	   */
	  toDateTime(dateString, template, opts) {
	    if (!(typeof template === "undefined") && Type.isStringFilled(template)) {
	      return DateTime.fromFormat(
	        dateString,
	        template,
	        opts
	      );
	    }
	    return DateTime.fromISO(dateString, opts);
	  }
	  getDateForLog() {
	    const now = DateTime.now();
	    return now.toFormat("y-MM-dd HH:mm:ss");
	  }
	  buildQueryString(params) {
	    let result = "";
	    for (let key in params) {
	      if (!params.hasOwnProperty(key)) {
	        continue;
	      }
	      const value = params[key];
	      if (Type.isArray(value)) {
	        value.forEach((valueElement, index) => {
	          result += encodeURIComponent(key + "[" + index + "]") + "=" + encodeURIComponent(valueElement) + "&";
	        });
	      } else {
	        result += encodeURIComponent(key) + "=" + encodeURIComponent(value) + "&";
	      }
	    }
	    if (result.length > 0) {
	      result = result.substring(0, result.length - 1);
	    }
	    return result;
	  }
	}
	const Text = new TextManager();

	let UA = "";
	try {
	  UA = navigator?.userAgent.toLowerCase();
	} catch (error) {
	  UA = "?";
	}
	class BrowserManager {
	  isOpera() {
	    return UA.includes("opera");
	  }
	  isIE() {
	    return "attachEvent" in document && !this.isOpera();
	  }
	  isIE6() {
	    return UA.includes("msie 6");
	  }
	  isIE7() {
	    return UA.includes("msie 7");
	  }
	  isIE8() {
	    return UA.includes("msie 8");
	  }
	  isIE9() {
	    return "documentMode" in document && document.documentMode >= 9;
	  }
	  isIE10() {
	    return "documentMode" in document && document.documentMode >= 10;
	  }
	  isSafari() {
	    return UA.includes("safari") && !UA.includes("chrome");
	  }
	  isFirefox() {
	    return UA.includes("firefox");
	  }
	  isChrome() {
	    return UA.includes("chrome");
	  }
	  detectIEVersion() {
	    if (this.isOpera() || this.isSafari() || this.isFirefox() || this.isChrome()) {
	      return -1;
	    }
	    let rv = -1;
	    if (
	      // @ts-ignore ////
	      !!window.MSStream && !window.ActiveXObject && "ActiveXObject" in window
	    ) {
	      rv = 11;
	    } else if (this.isIE10()) {
	      rv = 10;
	    } else if (this.isIE9()) {
	      rv = 9;
	    } else if (this.isIE()) {
	      rv = 8;
	    }
	    if (rv === -1 || rv === 8) {
	      if (navigator.appName === "Microsoft Internet Explorer") {
	        const re = new RegExp("MSIE ([0-9]+[.0-9]*)");
	        const res = navigator.userAgent.match(re);
	        if (Type.isArrayLike(res) && res.length > 0) {
	          rv = parseFloat(res[1]);
	        }
	      }
	      if (navigator.appName === "Netscape") {
	        rv = 11;
	        const re = new RegExp("Trident/.*rv:([0-9]+[.0-9]*)");
	        if (re.exec(navigator.userAgent) != null) {
	          const res = navigator.userAgent.match(re);
	          if (Type.isArrayLike(res) && res.length > 0) {
	            rv = parseFloat(res[1]);
	          }
	        }
	      }
	    }
	    return rv;
	  }
	  isIE11() {
	    return this.detectIEVersion() >= 11;
	  }
	  isMac() {
	    return UA.includes("macintosh");
	  }
	  isWin() {
	    return UA.includes("windows");
	  }
	  isLinux() {
	    return UA.includes("linux") && !this.isAndroid();
	  }
	  isAndroid() {
	    return UA.includes("android");
	  }
	  isIPad() {
	    return UA.includes("ipad;") || this.isMac() && this.isTouchDevice();
	  }
	  isIPhone() {
	    return UA.includes("iphone;");
	  }
	  isIOS() {
	    return this.isIPad() || this.isIPhone();
	  }
	  isMobile() {
	    return this.isIPhone() || this.isIPad() || this.isAndroid() || UA.includes("mobile") || UA.includes("touch");
	  }
	  isRetina() {
	    return (window.devicePixelRatio && window.devicePixelRatio >= 2) === true;
	  }
	  isTouchDevice() {
	    return "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
	  }
	  isDoctype(target) {
	    const doc = target || document;
	    if (doc.compatMode) {
	      return doc.compatMode === "CSS1Compat";
	    }
	    return doc.documentElement && doc.documentElement.clientHeight;
	  }
	  isLocalStorageSupported() {
	    try {
	      localStorage.setItem("test", "test");
	      localStorage.removeItem("test");
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	  detectAndroidVersion() {
	    const re = new RegExp("Android ([0-9]+[.0-9]*)");
	    if (re.exec(navigator.userAgent) != null) {
	      const res = navigator.userAgent.match(re);
	      if (Type.isArrayLike(res) && res.length > 0) {
	        return parseFloat(res[1]);
	      }
	    }
	    return 0;
	  }
	}
	const Browser = new BrowserManager();

	const RestrictionManagerParamsBase = {
	  sleep: 1e3,
	  speed: 1e-3,
	  amount: 30
	};
	const RestrictionManagerParamsForEnterprise = {
	  sleep: 600,
	  speed: 0.01,
	  amount: 30 * 5
	};

	var EnumCrmEntityType = /* @__PURE__ */ ((EnumCrmEntityType2) => {
	  EnumCrmEntityType2["undefined"] = "UNDEFINED";
	  EnumCrmEntityType2["lead"] = "CRM_LEAD";
	  EnumCrmEntityType2["deal"] = "CRM_DEAL";
	  EnumCrmEntityType2["contact"] = "CRM_CONTACT";
	  EnumCrmEntityType2["company"] = "CRM_COMPANY";
	  EnumCrmEntityType2["oldInvoice"] = "CRM_INVOICE";
	  EnumCrmEntityType2["invoice"] = "CRM_SMART_INVOICE";
	  EnumCrmEntityType2["quote"] = "CRM_QUOTE";
	  EnumCrmEntityType2["requisite"] = "CRM_REQUISITE";
	  return EnumCrmEntityType2;
	})(EnumCrmEntityType || {});
	var EnumCrmEntityTypeId = /* @__PURE__ */ ((EnumCrmEntityTypeId2) => {
	  EnumCrmEntityTypeId2[EnumCrmEntityTypeId2["undefined"] = 0] = "undefined";
	  EnumCrmEntityTypeId2[EnumCrmEntityTypeId2["lead"] = 1] = "lead";
	  EnumCrmEntityTypeId2[EnumCrmEntityTypeId2["deal"] = 2] = "deal";
	  EnumCrmEntityTypeId2[EnumCrmEntityTypeId2["contact"] = 3] = "contact";
	  EnumCrmEntityTypeId2[EnumCrmEntityTypeId2["company"] = 4] = "company";
	  EnumCrmEntityTypeId2[EnumCrmEntityTypeId2["oldInvoice"] = 5] = "oldInvoice";
	  EnumCrmEntityTypeId2[EnumCrmEntityTypeId2["invoice"] = 31] = "invoice";
	  EnumCrmEntityTypeId2[EnumCrmEntityTypeId2["quote"] = 7] = "quote";
	  EnumCrmEntityTypeId2[EnumCrmEntityTypeId2["requisite"] = 8] = "requisite";
	  return EnumCrmEntityTypeId2;
	})(EnumCrmEntityTypeId || {});

	var LoadDataType = /* @__PURE__ */ ((LoadDataType2) => {
	  LoadDataType2["App"] = "app";
	  LoadDataType2["Profile"] = "profile";
	  LoadDataType2["Currency"] = "currency";
	  LoadDataType2["AppOptions"] = "appOptions";
	  LoadDataType2["UserOptions"] = "userOptions";
	  return LoadDataType2;
	})(LoadDataType || {});
	const EnumAppStatus = {
	  // free ////
	  Free: "F",
	  // demo version ////
	  Demo: "D",
	  // trial version (limited time) ////
	  Trial: "T",
	  // paid application ////
	  Paid: "P",
	  // local application ////
	  Local: "L",
	  // subscription application ////
	  Subscription: "S"
	};
	const StatusDescriptions = {
	  [EnumAppStatus.Free]: "Free",
	  [EnumAppStatus.Demo]: "Demo",
	  [EnumAppStatus.Trial]: "Trial",
	  [EnumAppStatus.Paid]: "Paid",
	  [EnumAppStatus.Local]: "Local",
	  [EnumAppStatus.Subscription]: "Subscription"
	};
	const TypeSpecificUrl = {
	  MainSettings: "MainSettings",
	  UfList: "UfList",
	  UfPage: "UfPage"
	};
	var TypeOption = /* @__PURE__ */ ((TypeOption2) => {
	  TypeOption2["NotSet"] = "notSet";
	  TypeOption2["JsonArray"] = "jsonArray";
	  TypeOption2["JsonObject"] = "jsonObject";
	  TypeOption2["FloatVal"] = "float";
	  TypeOption2["IntegerVal"] = "integer";
	  TypeOption2["BoolYN"] = "boolYN";
	  TypeOption2["StringVal"] = "string";
	  return TypeOption2;
	})(TypeOption || {});

	var ConnectionType = /* @__PURE__ */ ((ConnectionType2) => {
	  ConnectionType2["Undefined"] = "undefined";
	  ConnectionType2["WebSocket"] = "webSocket";
	  ConnectionType2["LongPolling"] = "longPolling";
	  return ConnectionType2;
	})(ConnectionType || {});
	var LsKeys = /* @__PURE__ */ ((LsKeys2) => {
	  LsKeys2["PullConfig"] = "bx-pull-config";
	  LsKeys2["WebsocketBlocked"] = "bx-pull-websocket-blocked";
	  LsKeys2["LongPollingBlocked"] = "bx-pull-longpolling-blocked";
	  LsKeys2["LoggingEnabled"] = "bx-pull-logging-enabled";
	  return LsKeys2;
	})(LsKeys || {});
	var PullStatus = /* @__PURE__ */ ((PullStatus2) => {
	  PullStatus2["Online"] = "online";
	  PullStatus2["Offline"] = "offline";
	  PullStatus2["Connecting"] = "connect";
	  return PullStatus2;
	})(PullStatus || {});
	var SenderType = /* @__PURE__ */ ((SenderType2) => {
	  SenderType2[SenderType2["Unknown"] = 0] = "Unknown";
	  SenderType2[SenderType2["Client"] = 1] = "Client";
	  SenderType2[SenderType2["Backend"] = 2] = "Backend";
	  return SenderType2;
	})(SenderType || {});
	var SubscriptionType = /* @__PURE__ */ ((SubscriptionType2) => {
	  SubscriptionType2["Server"] = "server";
	  SubscriptionType2["Client"] = "client";
	  SubscriptionType2["Online"] = "online";
	  SubscriptionType2["Status"] = "status";
	  SubscriptionType2["Revision"] = "revision";
	  return SubscriptionType2;
	})(SubscriptionType || {});
	var CloseReasons = /* @__PURE__ */ ((CloseReasons2) => {
	  CloseReasons2[CloseReasons2["NORMAL_CLOSURE"] = 1e3] = "NORMAL_CLOSURE";
	  CloseReasons2[CloseReasons2["SERVER_DIE"] = 1001] = "SERVER_DIE";
	  CloseReasons2[CloseReasons2["CONFIG_REPLACED"] = 3e3] = "CONFIG_REPLACED";
	  CloseReasons2[CloseReasons2["CHANNEL_EXPIRED"] = 3001] = "CHANNEL_EXPIRED";
	  CloseReasons2[CloseReasons2["SERVER_RESTARTED"] = 3002] = "SERVER_RESTARTED";
	  CloseReasons2[CloseReasons2["CONFIG_EXPIRED"] = 3003] = "CONFIG_EXPIRED";
	  CloseReasons2[CloseReasons2["MANUAL"] = 3004] = "MANUAL";
	  CloseReasons2[CloseReasons2["STUCK"] = 3005] = "STUCK";
	  CloseReasons2[CloseReasons2["WRONG_CHANNEL_ID"] = 4010] = "WRONG_CHANNEL_ID";
	  return CloseReasons2;
	})(CloseReasons || {});
	var SystemCommands = /* @__PURE__ */ ((SystemCommands2) => {
	  SystemCommands2["CHANNEL_EXPIRE"] = "CHANNEL_EXPIRE";
	  SystemCommands2["CONFIG_EXPIRE"] = "CONFIG_EXPIRE";
	  SystemCommands2["SERVER_RESTART"] = "SERVER_RESTART";
	  return SystemCommands2;
	})(SystemCommands || {});
	var ServerMode = /* @__PURE__ */ ((ServerMode2) => {
	  ServerMode2["Shared"] = "shared";
	  ServerMode2["Personal"] = "personal";
	  return ServerMode2;
	})(ServerMode || {});
	const ListRpcError = {
	  Parse: { code: -32700, message: "Parse error" },
	  InvalidRequest: { code: -32600, message: "Invalid Request" },
	  MethodNotFound: { code: -32601, message: "Method not found" },
	  InvalidParams: { code: -32602, message: "Invalid params" },
	  Internal: { code: -32603, message: "Internal error" }
	};
	var RpcMethod = /* @__PURE__ */ ((RpcMethod2) => {
	  RpcMethod2["Publish"] = "publish";
	  RpcMethod2["GetUsersLastSeen"] = "getUsersLastSeen";
	  RpcMethod2["Ping"] = "ping";
	  RpcMethod2["ListChannels"] = "listChannels";
	  RpcMethod2["SubscribeStatusChange"] = "subscribeStatusChange";
	  RpcMethod2["UnsubscribeStatusChange"] = "unsubscribeStatusChange";
	  return RpcMethod2;
	})(RpcMethod || {});

	class Result {
	  _errorCollection;
	  _data;
	  constructor() {
	    this._errorCollection = /* @__PURE__ */ new Set();
	    this._data = null;
	  }
	  /**
	   * Getter for the `isSuccess` property.
	   * Checks if the `_errorCollection` is empty to determine success.
	   *
	   * @returns Whether the operation resulted in success (no errors).
	   */
	  get isSuccess() {
	    return this._errorCollection.size < 1;
	  }
	  /**
	   * Sets the data associated with the result.
	   *
	   * @param data The data to be stored in the result.
	   * @returns The current Result object for chaining methods.
	   */
	  setData(data) {
	    this._data = data;
	    return this;
	  }
	  /**
	   * Retrieves the data associated with the result.
	   *
	   * @returns The data stored in the result, if any.
	   */
	  getData() {
	    return this._data;
	  }
	  /**
	   * Adds an error message or Error object to the result.
	   *
	   * @param error The error message or Error object to be added.
	   * @returns The current Result object for chaining methods.
	   */
	  addError(error) {
	    if (error instanceof Error) {
	      this._errorCollection.add(error);
	    } else {
	      this._errorCollection.add(new Error(error.toString()));
	    }
	    return this;
	  }
	  /**
	   * Adds multiple errors to the result in a single call.
	   *
	   * @param errors An array of errors or strings that will be converted to errors.
	   * @returns The current Result object for chaining methods.
	   */
	  addErrors(errors) {
	    errors.forEach((error) => {
	      if (error instanceof Error) {
	        this._errorCollection.add(error);
	      } else {
	        this._errorCollection.add(new Error(error.toString()));
	      }
	    });
	    return this;
	  }
	  /**
	   * Retrieves an iterator for the errors collected in the result.
	   * @returns An iterator over the stored Error objects.
	   */
	  getErrors() {
	    return this._errorCollection.values();
	  }
	  /**
	   * Retrieves an array of error messages from the collected errors.
	   *
	   * @returns An array of strings representing the error messages. Each string
	   *          contains the message of a corresponding error object.
	   */
	  getErrorMessages() {
	    return Array.from(this.getErrors()).map((error) => error.message);
	  }
	  /**
	   * Converts the Result object to a string.
	   *
	   * @returns {string} Returns a string representation of the result operation
	   */
	  toString() {
	    if (this.isSuccess) {
	      return `Result (success): data: ${JSON.stringify(this._data)}`;
	    }
	    return `Result (failure): errors: ${this.getErrorMessages().join(", ")}`;
	  }
	}

	class AjaxError extends Error {
	  cause;
	  _status;
	  _answerError;
	  constructor(params) {
	    const message = `${params.answerError.error}${!!params.answerError.errorDescription ? ": " + params.answerError.errorDescription : ""}`;
	    super(message);
	    this.cause = params.cause || null;
	    this.name = this.constructor.name;
	    this._status = params.status;
	    this._answerError = params.answerError;
	  }
	  get answerError() {
	    return this._answerError;
	  }
	  get status() {
	    return this._status;
	  }
	  set status(status) {
	    this._status = status;
	  }
	  toString() {
	    return `${this.answerError.error}${!!this.answerError.errorDescription ? ": " + this.answerError.errorDescription : ""} (${this.status})`;
	  }
	}

	class AjaxResult extends Result {
	  _status;
	  _query;
	  _data;
	  constructor(answer, query, status) {
	    super();
	    this._data = answer;
	    this._query = structuredClone(query);
	    this._status = status;
	    if (typeof this._data.error !== "undefined") {
	      let error = typeof this._data.error === "string" ? this._data : this._data.error;
	      this.addError(new AjaxError({
	        status: this._status,
	        answerError: {
	          error: error.error || "",
	          errorDescription: error.error_description || ""
	        }
	      }));
	    }
	  }
	  // @ts-ignore
	  setData(data) {
	    throw new Error("AjaxResult not support setData()");
	  }
	  getData() {
	    return this._data;
	  }
	  isMore() {
	    return Type.isNumber(this._data?.next);
	  }
	  getTotal() {
	    return Text.toInteger(this._data?.total);
	  }
	  getStatus() {
	    return this._status;
	  }
	  getQuery() {
	    return this._query;
	  }
	  async getNext(http) {
	    if (this.isMore() && this.isSuccess) {
	      this._query.start = parseInt(this._data?.next);
	      return http.call(
	        this._query.method,
	        this._query.params,
	        this._query.start
	      );
	    }
	    return Promise.resolve(false);
	  }
	}

	class RestrictionManager {
	  #params;
	  #lastDecrement;
	  #currentAmount;
	  _logger = null;
	  constructor() {
	    this.#params = RestrictionManagerParamsBase;
	    this.#currentAmount = 0;
	    this.#lastDecrement = 0;
	  }
	  setLogger(logger) {
	    this._logger = logger;
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  get params() {
	    return { ...this.#params };
	  }
	  set params(params) {
	    this.#params = params;
	    this.getLogger().log(
	      `new restriction manager params`,
	      params
	    );
	  }
	  check(hash = "") {
	    return new Promise((resolve) => {
	      this.#decrementStorage();
	      if (this.#checkStorage()) {
	        this.getLogger().log(`>> no sleep >>> ${hash}`, this.#getStorageStatus());
	        this.#incrementStorage();
	        return resolve(null);
	      } else {
	        const sleep = (callback) => {
	          this.getLogger().info(`>> go sleep >>> ${hash}`, this.#getStorageStatus());
	          setTimeout(() => {
	            callback();
	          }, this.#params.sleep);
	        };
	        const wait = () => {
	          this.#decrementStorage();
	          if (!this.#checkStorage()) {
	            sleep(wait);
	          } else {
	            this.getLogger().info(`<< stop sleep <<< ${hash}`, this.#getStorageStatus());
	            this.#incrementStorage();
	            return resolve(null);
	          }
	        };
	        sleep(wait);
	      }
	    });
	  }
	  #getStorageStatus() {
	    return `${this.#currentAmount.toFixed(4)} from ${this.#params.amount}`;
	  }
	  #decrementStorage() {
	    if (this.#lastDecrement > 0) {
	      this.#currentAmount -= ((/* @__PURE__ */ new Date()).valueOf() - this.#lastDecrement) * this.#params.speed;
	      if (this.#currentAmount < 0) {
	        this.#currentAmount = 0;
	      }
	    }
	    this.#lastDecrement = (/* @__PURE__ */ new Date()).valueOf();
	  }
	  #incrementStorage() {
	    this.#currentAmount++;
	  }
	  #checkStorage() {
	    return this.#currentAmount < this.#params.amount;
	  }
	}

	const DEFAULT_REQUEST_ID_HEADER_FIELD_NAME = "X-Request-ID";
	const DEFAULT_QUERY_STRING_PARAMETER_NAME = "bx24_request_id";
	const DEFAULT_QUERY_STRING_SDK_PARAMETER_NAME = "bx24_sdk_ver";
	class DefaultRequestIdGenerator {
	  getQueryStringParameterName() {
	    return DEFAULT_QUERY_STRING_PARAMETER_NAME;
	  }
	  getQueryStringSdkParameterName() {
	    return DEFAULT_QUERY_STRING_SDK_PARAMETER_NAME;
	  }
	  generate() {
	    return Text.getUuidRfc4122();
	  }
	  getRequestId() {
	    return this.generate();
	  }
	  getHeaderFieldName() {
	    return DEFAULT_REQUEST_ID_HEADER_FIELD_NAME;
	  }
	}

	function bind(fn, thisArg) {
	  return function wrap() {
	    return fn.apply(thisArg, arguments);
	  };
	}

	// utils is a library of generic helper functions non-specific to axios

	const {toString} = Object.prototype;
	const {getPrototypeOf} = Object;

	const kindOf = (cache => thing => {
	    const str = toString.call(thing);
	    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
	})(Object.create(null));

	const kindOfTest = (type) => {
	  type = type.toLowerCase();
	  return (thing) => kindOf(thing) === type
	};

	const typeOfTest = type => thing => typeof thing === type;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 *
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	const {isArray} = Array;

	/**
	 * Determine if a value is undefined
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	const isUndefined = typeOfTest('undefined');

	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */
	function isBuffer(val) {
	  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
	    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	const isArrayBuffer = kindOfTest('ArrayBuffer');


	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  let result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	const isString = typeOfTest('string');

	/**
	 * Determine if a value is a Function
	 *
	 * @param {*} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	const isFunction = typeOfTest('function');

	/**
	 * Determine if a value is a Number
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	const isNumber = typeOfTest('number');

	/**
	 * Determine if a value is an Object
	 *
	 * @param {*} thing The value to test
	 *
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	const isObject = (thing) => thing !== null && typeof thing === 'object';

	/**
	 * Determine if a value is a Boolean
	 *
	 * @param {*} thing The value to test
	 * @returns {boolean} True if value is a Boolean, otherwise false
	 */
	const isBoolean = thing => thing === true || thing === false;

	/**
	 * Determine if a value is a plain Object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a plain Object, otherwise false
	 */
	const isPlainObject = (val) => {
	  if (kindOf(val) !== 'object') {
	    return false;
	  }

	  const prototype = getPrototypeOf(val);
	  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
	};

	/**
	 * Determine if a value is a Date
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	const isDate = kindOfTest('Date');

	/**
	 * Determine if a value is a File
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	const isFile = kindOfTest('File');

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	const isBlob = kindOfTest('Blob');

	/**
	 * Determine if a value is a FileList
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	const isFileList = kindOfTest('FileList');

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	const isStream = (val) => isObject(val) && isFunction(val.pipe);

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {*} thing The value to test
	 *
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	const isFormData = (thing) => {
	  let kind;
	  return thing && (
	    (typeof FormData === 'function' && thing instanceof FormData) || (
	      isFunction(thing.append) && (
	        (kind = kindOf(thing)) === 'formdata' ||
	        // detect form-data instance
	        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
	      )
	    )
	  )
	};

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	const isURLSearchParams = kindOfTest('URLSearchParams');

	const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 *
	 * @returns {String} The String freed of excess whitespace
	 */
	const trim = (str) => str.trim ?
	  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 *
	 * @param {Boolean} [allOwnKeys = false]
	 * @returns {any}
	 */
	function forEach(obj, fn, {allOwnKeys = false} = {}) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  let i;
	  let l;

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
	    const len = keys.length;
	    let key;

	    for (i = 0; i < len; i++) {
	      key = keys[i];
	      fn.call(null, obj[key], key, obj);
	    }
	  }
	}

	function findKey(obj, key) {
	  key = key.toLowerCase();
	  const keys = Object.keys(obj);
	  let i = keys.length;
	  let _key;
	  while (i-- > 0) {
	    _key = keys[i];
	    if (key === _key.toLowerCase()) {
	      return _key;
	    }
	  }
	  return null;
	}

	const _global = (() => {
	  /*eslint no-undef:0*/
	  if (typeof globalThis !== "undefined") return globalThis;
	  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
	})();

	const isContextDefined = (context) => !isUndefined(context) && context !== _global;

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 *
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  const {caseless} = isContextDefined(this) && this || {};
	  const result = {};
	  const assignValue = (val, key) => {
	    const targetKey = caseless && findKey(result, key) || key;
	    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
	      result[targetKey] = merge(result[targetKey], val);
	    } else if (isPlainObject(val)) {
	      result[targetKey] = merge({}, val);
	    } else if (isArray(val)) {
	      result[targetKey] = val.slice();
	    } else {
	      result[targetKey] = val;
	    }
	  };

	  for (let i = 0, l = arguments.length; i < l; i++) {
	    arguments[i] && forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 *
	 * @param {Boolean} [allOwnKeys]
	 * @returns {Object} The resulting value of object a
	 */
	const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
	  forEach(b, (val, key) => {
	    if (thisArg && isFunction(val)) {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  }, {allOwnKeys});
	  return a;
	};

	/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 *
	 * @returns {string} content value without BOM
	 */
	const stripBOM = (content) => {
	  if (content.charCodeAt(0) === 0xFEFF) {
	    content = content.slice(1);
	  }
	  return content;
	};

	/**
	 * Inherit the prototype methods from one constructor into another
	 * @param {function} constructor
	 * @param {function} superConstructor
	 * @param {object} [props]
	 * @param {object} [descriptors]
	 *
	 * @returns {void}
	 */
	const inherits = (constructor, superConstructor, props, descriptors) => {
	  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
	  constructor.prototype.constructor = constructor;
	  Object.defineProperty(constructor, 'super', {
	    value: superConstructor.prototype
	  });
	  props && Object.assign(constructor.prototype, props);
	};

	/**
	 * Resolve object with deep prototype chain to a flat object
	 * @param {Object} sourceObj source object
	 * @param {Object} [destObj]
	 * @param {Function|Boolean} [filter]
	 * @param {Function} [propFilter]
	 *
	 * @returns {Object}
	 */
	const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
	  let props;
	  let i;
	  let prop;
	  const merged = {};

	  destObj = destObj || {};
	  // eslint-disable-next-line no-eq-null,eqeqeq
	  if (sourceObj == null) return destObj;

	  do {
	    props = Object.getOwnPropertyNames(sourceObj);
	    i = props.length;
	    while (i-- > 0) {
	      prop = props[i];
	      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
	        destObj[prop] = sourceObj[prop];
	        merged[prop] = true;
	      }
	    }
	    sourceObj = filter !== false && getPrototypeOf(sourceObj);
	  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

	  return destObj;
	};

	/**
	 * Determines whether a string ends with the characters of a specified string
	 *
	 * @param {String} str
	 * @param {String} searchString
	 * @param {Number} [position= 0]
	 *
	 * @returns {boolean}
	 */
	const endsWith = (str, searchString, position) => {
	  str = String(str);
	  if (position === undefined || position > str.length) {
	    position = str.length;
	  }
	  position -= searchString.length;
	  const lastIndex = str.indexOf(searchString, position);
	  return lastIndex !== -1 && lastIndex === position;
	};


	/**
	 * Returns new array from array like object or null if failed
	 *
	 * @param {*} [thing]
	 *
	 * @returns {?Array}
	 */
	const toArray = (thing) => {
	  if (!thing) return null;
	  if (isArray(thing)) return thing;
	  let i = thing.length;
	  if (!isNumber(i)) return null;
	  const arr = new Array(i);
	  while (i-- > 0) {
	    arr[i] = thing[i];
	  }
	  return arr;
	};

	/**
	 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
	 * thing passed in is an instance of Uint8Array
	 *
	 * @param {TypedArray}
	 *
	 * @returns {Array}
	 */
	// eslint-disable-next-line func-names
	const isTypedArray = (TypedArray => {
	  // eslint-disable-next-line func-names
	  return thing => {
	    return TypedArray && thing instanceof TypedArray;
	  };
	})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

	/**
	 * For each entry in the object, call the function with the key and value.
	 *
	 * @param {Object<any, any>} obj - The object to iterate over.
	 * @param {Function} fn - The function to call for each entry.
	 *
	 * @returns {void}
	 */
	const forEachEntry = (obj, fn) => {
	  const generator = obj && obj[Symbol.iterator];

	  const iterator = generator.call(obj);

	  let result;

	  while ((result = iterator.next()) && !result.done) {
	    const pair = result.value;
	    fn.call(obj, pair[0], pair[1]);
	  }
	};

	/**
	 * It takes a regular expression and a string, and returns an array of all the matches
	 *
	 * @param {string} regExp - The regular expression to match against.
	 * @param {string} str - The string to search.
	 *
	 * @returns {Array<boolean>}
	 */
	const matchAll = (regExp, str) => {
	  let matches;
	  const arr = [];

	  while ((matches = regExp.exec(str)) !== null) {
	    arr.push(matches);
	  }

	  return arr;
	};

	/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
	const isHTMLForm = kindOfTest('HTMLFormElement');

	const toCamelCase = str => {
	  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
	    function replacer(m, p1, p2) {
	      return p1.toUpperCase() + p2;
	    }
	  );
	};

	/* Creating a function that will check if an object has a property. */
	const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

	/**
	 * Determine if a value is a RegExp object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a RegExp object, otherwise false
	 */
	const isRegExp = kindOfTest('RegExp');

	const reduceDescriptors = (obj, reducer) => {
	  const descriptors = Object.getOwnPropertyDescriptors(obj);
	  const reducedDescriptors = {};

	  forEach(descriptors, (descriptor, name) => {
	    let ret;
	    if ((ret = reducer(descriptor, name, obj)) !== false) {
	      reducedDescriptors[name] = ret || descriptor;
	    }
	  });

	  Object.defineProperties(obj, reducedDescriptors);
	};

	/**
	 * Makes all methods read-only
	 * @param {Object} obj
	 */

	const freezeMethods = (obj) => {
	  reduceDescriptors(obj, (descriptor, name) => {
	    // skip restricted props in strict mode
	    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
	      return false;
	    }

	    const value = obj[name];

	    if (!isFunction(value)) return;

	    descriptor.enumerable = false;

	    if ('writable' in descriptor) {
	      descriptor.writable = false;
	      return;
	    }

	    if (!descriptor.set) {
	      descriptor.set = () => {
	        throw Error('Can not rewrite read-only method \'' + name + '\'');
	      };
	    }
	  });
	};

	const toObjectSet = (arrayOrString, delimiter) => {
	  const obj = {};

	  const define = (arr) => {
	    arr.forEach(value => {
	      obj[value] = true;
	    });
	  };

	  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

	  return obj;
	};

	const noop = () => {};

	const toFiniteNumber = (value, defaultValue) => {
	  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
	};

	const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

	const DIGIT = '0123456789';

	const ALPHABET = {
	  DIGIT,
	  ALPHA,
	  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
	};

	const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
	  let str = '';
	  const {length} = alphabet;
	  while (size--) {
	    str += alphabet[Math.random() * length|0];
	  }

	  return str;
	};

	/**
	 * If the thing is a FormData object, return true, otherwise return false.
	 *
	 * @param {unknown} thing - The thing to check.
	 *
	 * @returns {boolean}
	 */
	function isSpecCompliantForm(thing) {
	  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
	}

	const toJSONObject = (obj) => {
	  const stack = new Array(10);

	  const visit = (source, i) => {

	    if (isObject(source)) {
	      if (stack.indexOf(source) >= 0) {
	        return;
	      }

	      if(!('toJSON' in source)) {
	        stack[i] = source;
	        const target = isArray(source) ? [] : {};

	        forEach(source, (value, key) => {
	          const reducedValue = visit(value, i + 1);
	          !isUndefined(reducedValue) && (target[key] = reducedValue);
	        });

	        stack[i] = undefined;

	        return target;
	      }
	    }

	    return source;
	  };

	  return visit(obj, 0);
	};

	const isAsyncFn = kindOfTest('AsyncFunction');

	const isThenable = (thing) =>
	  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

	// original code
	// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

	const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
	  if (setImmediateSupported) {
	    return setImmediate;
	  }

	  return postMessageSupported ? ((token, callbacks) => {
	    _global.addEventListener("message", ({source, data}) => {
	      if (source === _global && data === token) {
	        callbacks.length && callbacks.shift()();
	      }
	    }, false);

	    return (cb) => {
	      callbacks.push(cb);
	      _global.postMessage(token, "*");
	    }
	  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
	})(
	  typeof setImmediate === 'function',
	  isFunction(_global.postMessage)
	);

	const asap = typeof queueMicrotask !== 'undefined' ?
	  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);

	// *********************

	const utils$2 = {
	  isArray,
	  isArrayBuffer,
	  isBuffer,
	  isFormData,
	  isArrayBufferView,
	  isString,
	  isNumber,
	  isBoolean,
	  isObject,
	  isPlainObject,
	  isReadableStream,
	  isRequest,
	  isResponse,
	  isHeaders,
	  isUndefined,
	  isDate,
	  isFile,
	  isBlob,
	  isRegExp,
	  isFunction,
	  isStream,
	  isURLSearchParams,
	  isTypedArray,
	  isFileList,
	  forEach,
	  merge,
	  extend,
	  trim,
	  stripBOM,
	  inherits,
	  toFlatObject,
	  kindOf,
	  kindOfTest,
	  endsWith,
	  toArray,
	  forEachEntry,
	  matchAll,
	  isHTMLForm,
	  hasOwnProperty,
	  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
	  reduceDescriptors,
	  freezeMethods,
	  toObjectSet,
	  toCamelCase,
	  noop,
	  toFiniteNumber,
	  findKey,
	  global: _global,
	  isContextDefined,
	  ALPHABET,
	  generateString,
	  isSpecCompliantForm,
	  toJSONObject,
	  isAsyncFn,
	  isThenable,
	  setImmediate: _setImmediate,
	  asap
	};

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [config] The config.
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 *
	 * @returns {Error} The created error.
	 */
	function AxiosError$1(message, code, config, request, response) {
	  Error.call(this);

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, this.constructor);
	  } else {
	    this.stack = (new Error()).stack;
	  }

	  this.message = message;
	  this.name = 'AxiosError';
	  code && (this.code = code);
	  config && (this.config = config);
	  request && (this.request = request);
	  if (response) {
	    this.response = response;
	    this.status = response.status ? response.status : null;
	  }
	}

	utils$2.inherits(AxiosError$1, Error, {
	  toJSON: function toJSON() {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: utils$2.toJSONObject(this.config),
	      code: this.code,
	      status: this.status
	    };
	  }
	});

	const prototype$1 = AxiosError$1.prototype;
	const descriptors = {};

	[
	  'ERR_BAD_OPTION_VALUE',
	  'ERR_BAD_OPTION',
	  'ECONNABORTED',
	  'ETIMEDOUT',
	  'ERR_NETWORK',
	  'ERR_FR_TOO_MANY_REDIRECTS',
	  'ERR_DEPRECATED',
	  'ERR_BAD_RESPONSE',
	  'ERR_BAD_REQUEST',
	  'ERR_CANCELED',
	  'ERR_NOT_SUPPORT',
	  'ERR_INVALID_URL'
	// eslint-disable-next-line func-names
	].forEach(code => {
	  descriptors[code] = {value: code};
	});

	Object.defineProperties(AxiosError$1, descriptors);
	Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

	// eslint-disable-next-line func-names
	AxiosError$1.from = (error, code, config, request, response, customProps) => {
	  const axiosError = Object.create(prototype$1);

	  utils$2.toFlatObject(error, axiosError, function filter(obj) {
	    return obj !== Error.prototype;
	  }, prop => {
	    return prop !== 'isAxiosError';
	  });

	  AxiosError$1.call(axiosError, error.message, code, config, request, response);

	  axiosError.cause = error;

	  axiosError.name = error.name;

	  customProps && Object.assign(axiosError, customProps);

	  return axiosError;
	};

	// eslint-disable-next-line strict
	const httpAdapter = null;

	/**
	 * Determines if the given thing is a array or js object.
	 *
	 * @param {string} thing - The object or array to be visited.
	 *
	 * @returns {boolean}
	 */
	function isVisitable(thing) {
	  return utils$2.isPlainObject(thing) || utils$2.isArray(thing);
	}

	/**
	 * It removes the brackets from the end of a string
	 *
	 * @param {string} key - The key of the parameter.
	 *
	 * @returns {string} the key without the brackets.
	 */
	function removeBrackets(key) {
	  return utils$2.endsWith(key, '[]') ? key.slice(0, -2) : key;
	}

	/**
	 * It takes a path, a key, and a boolean, and returns a string
	 *
	 * @param {string} path - The path to the current key.
	 * @param {string} key - The key of the current object being iterated over.
	 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
	 *
	 * @returns {string} The path to the current key.
	 */
	function renderKey(path, key, dots) {
	  if (!path) return key;
	  return path.concat(key).map(function each(token, i) {
	    // eslint-disable-next-line no-param-reassign
	    token = removeBrackets(token);
	    return !dots && i ? '[' + token + ']' : token;
	  }).join(dots ? '.' : '');
	}

	/**
	 * If the array is an array and none of its elements are visitable, then it's a flat array.
	 *
	 * @param {Array<any>} arr - The array to check
	 *
	 * @returns {boolean}
	 */
	function isFlatArray(arr) {
	  return utils$2.isArray(arr) && !arr.some(isVisitable);
	}

	const predicates = utils$2.toFlatObject(utils$2, {}, null, function filter(prop) {
	  return /^is[A-Z]/.test(prop);
	});

	/**
	 * Convert a data object to FormData
	 *
	 * @param {Object} obj
	 * @param {?Object} [formData]
	 * @param {?Object} [options]
	 * @param {Function} [options.visitor]
	 * @param {Boolean} [options.metaTokens = true]
	 * @param {Boolean} [options.dots = false]
	 * @param {?Boolean} [options.indexes = false]
	 *
	 * @returns {Object}
	 **/

	/**
	 * It converts an object into a FormData object
	 *
	 * @param {Object<any, any>} obj - The object to convert to form data.
	 * @param {string} formData - The FormData object to append to.
	 * @param {Object<string, any>} options
	 *
	 * @returns
	 */
	function toFormData$1(obj, formData, options) {
	  if (!utils$2.isObject(obj)) {
	    throw new TypeError('target must be an object');
	  }

	  // eslint-disable-next-line no-param-reassign
	  formData = formData || new (FormData)();

	  // eslint-disable-next-line no-param-reassign
	  options = utils$2.toFlatObject(options, {
	    metaTokens: true,
	    dots: false,
	    indexes: false
	  }, false, function defined(option, source) {
	    // eslint-disable-next-line no-eq-null,eqeqeq
	    return !utils$2.isUndefined(source[option]);
	  });

	  const metaTokens = options.metaTokens;
	  // eslint-disable-next-line no-use-before-define
	  const visitor = options.visitor || defaultVisitor;
	  const dots = options.dots;
	  const indexes = options.indexes;
	  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
	  const useBlob = _Blob && utils$2.isSpecCompliantForm(formData);

	  if (!utils$2.isFunction(visitor)) {
	    throw new TypeError('visitor must be a function');
	  }

	  function convertValue(value) {
	    if (value === null) return '';

	    if (utils$2.isDate(value)) {
	      return value.toISOString();
	    }

	    if (!useBlob && utils$2.isBlob(value)) {
	      throw new AxiosError$1('Blob is not supported. Use a Buffer instead.');
	    }

	    if (utils$2.isArrayBuffer(value) || utils$2.isTypedArray(value)) {
	      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
	    }

	    return value;
	  }

	  /**
	   * Default visitor.
	   *
	   * @param {*} value
	   * @param {String|Number} key
	   * @param {Array<String|Number>} path
	   * @this {FormData}
	   *
	   * @returns {boolean} return true to visit the each prop of the value recursively
	   */
	  function defaultVisitor(value, key, path) {
	    let arr = value;

	    if (value && !path && typeof value === 'object') {
	      if (utils$2.endsWith(key, '{}')) {
	        // eslint-disable-next-line no-param-reassign
	        key = metaTokens ? key : key.slice(0, -2);
	        // eslint-disable-next-line no-param-reassign
	        value = JSON.stringify(value);
	      } else if (
	        (utils$2.isArray(value) && isFlatArray(value)) ||
	        ((utils$2.isFileList(value) || utils$2.endsWith(key, '[]')) && (arr = utils$2.toArray(value))
	        )) {
	        // eslint-disable-next-line no-param-reassign
	        key = removeBrackets(key);

	        arr.forEach(function each(el, index) {
	          !(utils$2.isUndefined(el) || el === null) && formData.append(
	            // eslint-disable-next-line no-nested-ternary
	            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
	            convertValue(el)
	          );
	        });
	        return false;
	      }
	    }

	    if (isVisitable(value)) {
	      return true;
	    }

	    formData.append(renderKey(path, key, dots), convertValue(value));

	    return false;
	  }

	  const stack = [];

	  const exposedHelpers = Object.assign(predicates, {
	    defaultVisitor,
	    convertValue,
	    isVisitable
	  });

	  function build(value, path) {
	    if (utils$2.isUndefined(value)) return;

	    if (stack.indexOf(value) !== -1) {
	      throw Error('Circular reference detected in ' + path.join('.'));
	    }

	    stack.push(value);

	    utils$2.forEach(value, function each(el, key) {
	      const result = !(utils$2.isUndefined(el) || el === null) && visitor.call(
	        formData, el, utils$2.isString(key) ? key.trim() : key, path, exposedHelpers
	      );

	      if (result === true) {
	        build(el, path ? path.concat(key) : [key]);
	      }
	    });

	    stack.pop();
	  }

	  if (!utils$2.isObject(obj)) {
	    throw new TypeError('data must be an object');
	  }

	  build(obj);

	  return formData;
	}

	/**
	 * It encodes a string by replacing all characters that are not in the unreserved set with
	 * their percent-encoded equivalents
	 *
	 * @param {string} str - The string to encode.
	 *
	 * @returns {string} The encoded string.
	 */
	function encode$1(str) {
	  const charMap = {
	    '!': '%21',
	    "'": '%27',
	    '(': '%28',
	    ')': '%29',
	    '~': '%7E',
	    '%20': '+',
	    '%00': '\x00'
	  };
	  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
	    return charMap[match];
	  });
	}

	/**
	 * It takes a params object and converts it to a FormData object
	 *
	 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
	 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
	 *
	 * @returns {void}
	 */
	function AxiosURLSearchParams(params, options) {
	  this._pairs = [];

	  params && toFormData$1(params, this, options);
	}

	const prototype = AxiosURLSearchParams.prototype;

	prototype.append = function append(name, value) {
	  this._pairs.push([name, value]);
	};

	prototype.toString = function toString(encoder) {
	  const _encode = encoder ? function(value) {
	    return encoder.call(this, value, encode$1);
	  } : encode$1;

	  return this._pairs.map(function each(pair) {
	    return _encode(pair[0]) + '=' + _encode(pair[1]);
	  }, '').join('&');
	};

	/**
	 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
	 * URI encoded counterparts
	 *
	 * @param {string} val The value to be encoded.
	 *
	 * @returns {string} The encoded value.
	 */
	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @param {?object} options
	 *
	 * @returns {string} The formatted url
	 */
	function buildURL(url, params, options) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	  
	  const _encode = options && options.encode || encode;

	  const serializeFn = options && options.serialize;

	  let serializedParams;

	  if (serializeFn) {
	    serializedParams = serializeFn(params, options);
	  } else {
	    serializedParams = utils$2.isURLSearchParams(params) ?
	      params.toString() :
	      new AxiosURLSearchParams(params, options).toString(_encode);
	  }

	  if (serializedParams) {
	    const hashmarkIndex = url.indexOf("#");

	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	}

	class InterceptorManager {
	  constructor() {
	    this.handlers = [];
	  }

	  /**
	   * Add a new interceptor to the stack
	   *
	   * @param {Function} fulfilled The function to handle `then` for a `Promise`
	   * @param {Function} rejected The function to handle `reject` for a `Promise`
	   *
	   * @return {Number} An ID used to remove interceptor later
	   */
	  use(fulfilled, rejected, options) {
	    this.handlers.push({
	      fulfilled,
	      rejected,
	      synchronous: options ? options.synchronous : false,
	      runWhen: options ? options.runWhen : null
	    });
	    return this.handlers.length - 1;
	  }

	  /**
	   * Remove an interceptor from the stack
	   *
	   * @param {Number} id The ID that was returned by `use`
	   *
	   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
	   */
	  eject(id) {
	    if (this.handlers[id]) {
	      this.handlers[id] = null;
	    }
	  }

	  /**
	   * Clear all interceptors from the stack
	   *
	   * @returns {void}
	   */
	  clear() {
	    if (this.handlers) {
	      this.handlers = [];
	    }
	  }

	  /**
	   * Iterate over all the registered interceptors
	   *
	   * This method is particularly useful for skipping over any
	   * interceptors that may have become `null` calling `eject`.
	   *
	   * @param {Function} fn The function to call for each interceptor
	   *
	   * @returns {void}
	   */
	  forEach(fn) {
	    utils$2.forEach(this.handlers, function forEachHandler(h) {
	      if (h !== null) {
	        fn(h);
	      }
	    });
	  }
	}

	const transitionalDefaults = {
	  silentJSONParsing: true,
	  forcedJSONParsing: true,
	  clarifyTimeoutError: false
	};

	const URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

	const FormData$1 = typeof FormData !== 'undefined' ? FormData : null;

	const Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

	const platform$1 = {
	  isBrowser: true,
	  classes: {
	    URLSearchParams: URLSearchParams$1,
	    FormData: FormData$1,
	    Blob: Blob$1
	  },
	  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
	};

	const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

	const _navigator = typeof navigator === 'object' && navigator || undefined;

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 *
	 * @returns {boolean}
	 */
	const hasStandardBrowserEnv = hasBrowserEnv &&
	  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

	/**
	 * Determine if we're running in a standard browser webWorker environment
	 *
	 * Although the `isStandardBrowserEnv` method indicates that
	 * `allows axios to run in a web worker`, the WebWorker will still be
	 * filtered out due to its judgment standard
	 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
	 * This leads to a problem when axios post `FormData` in webWorker
	 */
	const hasStandardBrowserWebWorkerEnv = (() => {
	  return (
	    typeof WorkerGlobalScope !== 'undefined' &&
	    // eslint-disable-next-line no-undef
	    self instanceof WorkerGlobalScope &&
	    typeof self.importScripts === 'function'
	  );
	})();

	const origin = hasBrowserEnv && window.location.href || 'http://localhost';

	const utils$1 = {
		__proto__: null,
		hasBrowserEnv: hasBrowserEnv,
		hasStandardBrowserEnv: hasStandardBrowserEnv,
		hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
		navigator: _navigator,
		origin: origin
	};

	const platform = {
	  ...utils$1,
	  ...platform$1
	};

	function toURLEncodedForm(data, options) {
	  return toFormData$1(data, new platform.classes.URLSearchParams(), Object.assign({
	    visitor: function(value, key, path, helpers) {
	      if (platform.isNode && utils$2.isBuffer(value)) {
	        this.append(key, value.toString('base64'));
	        return false;
	      }

	      return helpers.defaultVisitor.apply(this, arguments);
	    }
	  }, options));
	}

	/**
	 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
	 *
	 * @param {string} name - The name of the property to get.
	 *
	 * @returns An array of strings.
	 */
	function parsePropPath(name) {
	  // foo[x][y][z]
	  // foo.x.y.z
	  // foo-x-y-z
	  // foo x y z
	  return utils$2.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
	    return match[0] === '[]' ? '' : match[1] || match[0];
	  });
	}

	/**
	 * Convert an array to an object.
	 *
	 * @param {Array<any>} arr - The array to convert to an object.
	 *
	 * @returns An object with the same keys and values as the array.
	 */
	function arrayToObject(arr) {
	  const obj = {};
	  const keys = Object.keys(arr);
	  let i;
	  const len = keys.length;
	  let key;
	  for (i = 0; i < len; i++) {
	    key = keys[i];
	    obj[key] = arr[key];
	  }
	  return obj;
	}

	/**
	 * It takes a FormData object and returns a JavaScript object
	 *
	 * @param {string} formData The FormData object to convert to JSON.
	 *
	 * @returns {Object<string, any> | null} The converted object.
	 */
	function formDataToJSON(formData) {
	  function buildPath(path, value, target, index) {
	    let name = path[index++];

	    if (name === '__proto__') return true;

	    const isNumericKey = Number.isFinite(+name);
	    const isLast = index >= path.length;
	    name = !name && utils$2.isArray(target) ? target.length : name;

	    if (isLast) {
	      if (utils$2.hasOwnProp(target, name)) {
	        target[name] = [target[name], value];
	      } else {
	        target[name] = value;
	      }

	      return !isNumericKey;
	    }

	    if (!target[name] || !utils$2.isObject(target[name])) {
	      target[name] = [];
	    }

	    const result = buildPath(path, value, target[name], index);

	    if (result && utils$2.isArray(target[name])) {
	      target[name] = arrayToObject(target[name]);
	    }

	    return !isNumericKey;
	  }

	  if (utils$2.isFormData(formData) && utils$2.isFunction(formData.entries)) {
	    const obj = {};

	    utils$2.forEachEntry(formData, (name, value) => {
	      buildPath(parsePropPath(name), value, obj, 0);
	    });

	    return obj;
	  }

	  return null;
	}

	/**
	 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
	 * of the input
	 *
	 * @param {any} rawValue - The value to be stringified.
	 * @param {Function} parser - A function that parses a string into a JavaScript object.
	 * @param {Function} encoder - A function that takes a value and returns a string.
	 *
	 * @returns {string} A stringified version of the rawValue.
	 */
	function stringifySafely(rawValue, parser, encoder) {
	  if (utils$2.isString(rawValue)) {
	    try {
	      (parser || JSON.parse)(rawValue);
	      return utils$2.trim(rawValue);
	    } catch (e) {
	      if (e.name !== 'SyntaxError') {
	        throw e;
	      }
	    }
	  }

	  return (0, JSON.stringify)(rawValue);
	}

	const defaults = {

	  transitional: transitionalDefaults,

	  adapter: ['xhr', 'http', 'fetch'],

	  transformRequest: [function transformRequest(data, headers) {
	    const contentType = headers.getContentType() || '';
	    const hasJSONContentType = contentType.indexOf('application/json') > -1;
	    const isObjectPayload = utils$2.isObject(data);

	    if (isObjectPayload && utils$2.isHTMLForm(data)) {
	      data = new FormData(data);
	    }

	    const isFormData = utils$2.isFormData(data);

	    if (isFormData) {
	      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
	    }

	    if (utils$2.isArrayBuffer(data) ||
	      utils$2.isBuffer(data) ||
	      utils$2.isStream(data) ||
	      utils$2.isFile(data) ||
	      utils$2.isBlob(data) ||
	      utils$2.isReadableStream(data)
	    ) {
	      return data;
	    }
	    if (utils$2.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils$2.isURLSearchParams(data)) {
	      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
	      return data.toString();
	    }

	    let isFileList;

	    if (isObjectPayload) {
	      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
	        return toURLEncodedForm(data, this.formSerializer).toString();
	      }

	      if ((isFileList = utils$2.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
	        const _FormData = this.env && this.env.FormData;

	        return toFormData$1(
	          isFileList ? {'files[]': data} : data,
	          _FormData && new _FormData(),
	          this.formSerializer
	        );
	      }
	    }

	    if (isObjectPayload || hasJSONContentType ) {
	      headers.setContentType('application/json', false);
	      return stringifySafely(data);
	    }

	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    const transitional = this.transitional || defaults.transitional;
	    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
	    const JSONRequested = this.responseType === 'json';

	    if (utils$2.isResponse(data) || utils$2.isReadableStream(data)) {
	      return data;
	    }

	    if (data && utils$2.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
	      const silentJSONParsing = transitional && transitional.silentJSONParsing;
	      const strictJSONParsing = !silentJSONParsing && JSONRequested;

	      try {
	        return JSON.parse(data);
	      } catch (e) {
	        if (strictJSONParsing) {
	          if (e.name === 'SyntaxError') {
	            throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
	          }
	          throw e;
	        }
	      }
	    }

	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,
	  maxBodyLength: -1,

	  env: {
	    FormData: platform.classes.FormData,
	    Blob: platform.classes.Blob
	  },

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  },

	  headers: {
	    common: {
	      'Accept': 'application/json, text/plain, */*',
	      'Content-Type': undefined
	    }
	  }
	};

	utils$2.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
	  defaults.headers[method] = {};
	});

	// RawAxiosHeaders whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	const ignoreDuplicateOf = utils$2.toObjectSet([
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	]);

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} rawHeaders Headers needing to be parsed
	 *
	 * @returns {Object} Headers parsed into an object
	 */
	const parseHeaders = rawHeaders => {
	  const parsed = {};
	  let key;
	  let val;
	  let i;

	  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
	    i = line.indexOf(':');
	    key = line.substring(0, i).trim().toLowerCase();
	    val = line.substring(i + 1).trim();

	    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
	      return;
	    }

	    if (key === 'set-cookie') {
	      if (parsed[key]) {
	        parsed[key].push(val);
	      } else {
	        parsed[key] = [val];
	      }
	    } else {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });

	  return parsed;
	};

	const $internals = Symbol('internals');

	function normalizeHeader(header) {
	  return header && String(header).trim().toLowerCase();
	}

	function normalizeValue(value) {
	  if (value === false || value == null) {
	    return value;
	  }

	  return utils$2.isArray(value) ? value.map(normalizeValue) : String(value);
	}

	function parseTokens(str) {
	  const tokens = Object.create(null);
	  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
	  let match;

	  while ((match = tokensRE.exec(str))) {
	    tokens[match[1]] = match[2];
	  }

	  return tokens;
	}

	const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

	function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
	  if (utils$2.isFunction(filter)) {
	    return filter.call(this, value, header);
	  }

	  if (isHeaderNameFilter) {
	    value = header;
	  }

	  if (!utils$2.isString(value)) return;

	  if (utils$2.isString(filter)) {
	    return value.indexOf(filter) !== -1;
	  }

	  if (utils$2.isRegExp(filter)) {
	    return filter.test(value);
	  }
	}

	function formatHeader(header) {
	  return header.trim()
	    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
	      return char.toUpperCase() + str;
	    });
	}

	function buildAccessors(obj, header) {
	  const accessorName = utils$2.toCamelCase(' ' + header);

	  ['get', 'set', 'has'].forEach(methodName => {
	    Object.defineProperty(obj, methodName + accessorName, {
	      value: function(arg1, arg2, arg3) {
	        return this[methodName].call(this, header, arg1, arg2, arg3);
	      },
	      configurable: true
	    });
	  });
	}

	let AxiosHeaders$1 = class AxiosHeaders {
	  constructor(headers) {
	    headers && this.set(headers);
	  }

	  set(header, valueOrRewrite, rewrite) {
	    const self = this;

	    function setHeader(_value, _header, _rewrite) {
	      const lHeader = normalizeHeader(_header);

	      if (!lHeader) {
	        throw new Error('header name must be a non-empty string');
	      }

	      const key = utils$2.findKey(self, lHeader);

	      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
	        self[key || _header] = normalizeValue(_value);
	      }
	    }

	    const setHeaders = (headers, _rewrite) =>
	      utils$2.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

	    if (utils$2.isPlainObject(header) || header instanceof this.constructor) {
	      setHeaders(header, valueOrRewrite);
	    } else if(utils$2.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
	      setHeaders(parseHeaders(header), valueOrRewrite);
	    } else if (utils$2.isHeaders(header)) {
	      for (const [key, value] of header.entries()) {
	        setHeader(value, key, rewrite);
	      }
	    } else {
	      header != null && setHeader(valueOrRewrite, header, rewrite);
	    }

	    return this;
	  }

	  get(header, parser) {
	    header = normalizeHeader(header);

	    if (header) {
	      const key = utils$2.findKey(this, header);

	      if (key) {
	        const value = this[key];

	        if (!parser) {
	          return value;
	        }

	        if (parser === true) {
	          return parseTokens(value);
	        }

	        if (utils$2.isFunction(parser)) {
	          return parser.call(this, value, key);
	        }

	        if (utils$2.isRegExp(parser)) {
	          return parser.exec(value);
	        }

	        throw new TypeError('parser must be boolean|regexp|function');
	      }
	    }
	  }

	  has(header, matcher) {
	    header = normalizeHeader(header);

	    if (header) {
	      const key = utils$2.findKey(this, header);

	      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
	    }

	    return false;
	  }

	  delete(header, matcher) {
	    const self = this;
	    let deleted = false;

	    function deleteHeader(_header) {
	      _header = normalizeHeader(_header);

	      if (_header) {
	        const key = utils$2.findKey(self, _header);

	        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
	          delete self[key];

	          deleted = true;
	        }
	      }
	    }

	    if (utils$2.isArray(header)) {
	      header.forEach(deleteHeader);
	    } else {
	      deleteHeader(header);
	    }

	    return deleted;
	  }

	  clear(matcher) {
	    const keys = Object.keys(this);
	    let i = keys.length;
	    let deleted = false;

	    while (i--) {
	      const key = keys[i];
	      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
	        delete this[key];
	        deleted = true;
	      }
	    }

	    return deleted;
	  }

	  normalize(format) {
	    const self = this;
	    const headers = {};

	    utils$2.forEach(this, (value, header) => {
	      const key = utils$2.findKey(headers, header);

	      if (key) {
	        self[key] = normalizeValue(value);
	        delete self[header];
	        return;
	      }

	      const normalized = format ? formatHeader(header) : String(header).trim();

	      if (normalized !== header) {
	        delete self[header];
	      }

	      self[normalized] = normalizeValue(value);

	      headers[normalized] = true;
	    });

	    return this;
	  }

	  concat(...targets) {
	    return this.constructor.concat(this, ...targets);
	  }

	  toJSON(asStrings) {
	    const obj = Object.create(null);

	    utils$2.forEach(this, (value, header) => {
	      value != null && value !== false && (obj[header] = asStrings && utils$2.isArray(value) ? value.join(', ') : value);
	    });

	    return obj;
	  }

	  [Symbol.iterator]() {
	    return Object.entries(this.toJSON())[Symbol.iterator]();
	  }

	  toString() {
	    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
	  }

	  get [Symbol.toStringTag]() {
	    return 'AxiosHeaders';
	  }

	  static from(thing) {
	    return thing instanceof this ? thing : new this(thing);
	  }

	  static concat(first, ...targets) {
	    const computed = new this(first);

	    targets.forEach((target) => computed.set(target));

	    return computed;
	  }

	  static accessor(header) {
	    const internals = this[$internals] = (this[$internals] = {
	      accessors: {}
	    });

	    const accessors = internals.accessors;
	    const prototype = this.prototype;

	    function defineAccessor(_header) {
	      const lHeader = normalizeHeader(_header);

	      if (!accessors[lHeader]) {
	        buildAccessors(prototype, _header);
	        accessors[lHeader] = true;
	      }
	    }

	    utils$2.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

	    return this;
	  }
	};

	AxiosHeaders$1.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

	// reserved names hotfix
	utils$2.reduceDescriptors(AxiosHeaders$1.prototype, ({value}, key) => {
	  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
	  return {
	    get: () => value,
	    set(headerValue) {
	      this[mapped] = headerValue;
	    }
	  }
	});

	utils$2.freezeMethods(AxiosHeaders$1);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Array|Function} fns A single function or Array of functions
	 * @param {?Object} response The response object
	 *
	 * @returns {*} The resulting transformed data
	 */
	function transformData(fns, response) {
	  const config = this || defaults;
	  const context = response || config;
	  const headers = AxiosHeaders$1.from(context.headers);
	  let data = context.data;

	  utils$2.forEach(fns, function transform(fn) {
	    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
	  });

	  headers.normalize();

	  return data;
	}

	function isCancel$1(value) {
	  return !!(value && value.__CANCEL__);
	}

	/**
	 * A `CanceledError` is an object that is thrown when an operation is canceled.
	 *
	 * @param {string=} message The message.
	 * @param {Object=} config The config.
	 * @param {Object=} request The request.
	 *
	 * @returns {CanceledError} The created error.
	 */
	function CanceledError$1(message, config, request) {
	  // eslint-disable-next-line no-eq-null,eqeqeq
	  AxiosError$1.call(this, message == null ? 'canceled' : message, AxiosError$1.ERR_CANCELED, config, request);
	  this.name = 'CanceledError';
	}

	utils$2.inherits(CanceledError$1, AxiosError$1, {
	  __CANCEL__: true
	});

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 *
	 * @returns {object} The response.
	 */
	function settle(resolve, reject, response) {
	  const validateStatus = response.config.validateStatus;
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(new AxiosError$1(
	      'Request failed with status code ' + response.status,
	      [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
	      response.config,
	      response.request,
	      response
	    ));
	  }
	}

	function parseProtocol(url) {
	  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
	  return match && match[1] || '';
	}

	/**
	 * Calculate data maxRate
	 * @param {Number} [samplesCount= 10]
	 * @param {Number} [min= 1000]
	 * @returns {Function}
	 */
	function speedometer(samplesCount, min) {
	  samplesCount = samplesCount || 10;
	  const bytes = new Array(samplesCount);
	  const timestamps = new Array(samplesCount);
	  let head = 0;
	  let tail = 0;
	  let firstSampleTS;

	  min = min !== undefined ? min : 1000;

	  return function push(chunkLength) {
	    const now = Date.now();

	    const startedAt = timestamps[tail];

	    if (!firstSampleTS) {
	      firstSampleTS = now;
	    }

	    bytes[head] = chunkLength;
	    timestamps[head] = now;

	    let i = tail;
	    let bytesCount = 0;

	    while (i !== head) {
	      bytesCount += bytes[i++];
	      i = i % samplesCount;
	    }

	    head = (head + 1) % samplesCount;

	    if (head === tail) {
	      tail = (tail + 1) % samplesCount;
	    }

	    if (now - firstSampleTS < min) {
	      return;
	    }

	    const passed = startedAt && now - startedAt;

	    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
	  };
	}

	/**
	 * Throttle decorator
	 * @param {Function} fn
	 * @param {Number} freq
	 * @return {Function}
	 */
	function throttle(fn, freq) {
	  let timestamp = 0;
	  let threshold = 1000 / freq;
	  let lastArgs;
	  let timer;

	  const invoke = (args, now = Date.now()) => {
	    timestamp = now;
	    lastArgs = null;
	    if (timer) {
	      clearTimeout(timer);
	      timer = null;
	    }
	    fn.apply(null, args);
	  };

	  const throttled = (...args) => {
	    const now = Date.now();
	    const passed = now - timestamp;
	    if ( passed >= threshold) {
	      invoke(args, now);
	    } else {
	      lastArgs = args;
	      if (!timer) {
	        timer = setTimeout(() => {
	          timer = null;
	          invoke(lastArgs);
	        }, threshold - passed);
	      }
	    }
	  };

	  const flush = () => lastArgs && invoke(lastArgs);

	  return [throttled, flush];
	}

	const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
	  let bytesNotified = 0;
	  const _speedometer = speedometer(50, 250);

	  return throttle(e => {
	    const loaded = e.loaded;
	    const total = e.lengthComputable ? e.total : undefined;
	    const progressBytes = loaded - bytesNotified;
	    const rate = _speedometer(progressBytes);
	    const inRange = loaded <= total;

	    bytesNotified = loaded;

	    const data = {
	      loaded,
	      total,
	      progress: total ? (loaded / total) : undefined,
	      bytes: progressBytes,
	      rate: rate ? rate : undefined,
	      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
	      event: e,
	      lengthComputable: total != null,
	      [isDownloadStream ? 'download' : 'upload']: true
	    };

	    listener(data);
	  }, freq);
	};

	const progressEventDecorator = (total, throttled) => {
	  const lengthComputable = total != null;

	  return [(loaded) => throttled[0]({
	    lengthComputable,
	    total,
	    loaded
	  }), throttled[1]];
	};

	const asyncDecorator = (fn) => (...args) => utils$2.asap(() => fn(...args));

	const isURLSameOrigin = platform.hasStandardBrowserEnv ?

	// Standard browser envs have full support of the APIs needed to test
	// whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    const msie = platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent);
	    const urlParsingNode = document.createElement('a');
	    let originURL;

	    /**
	    * Parse a URL to discover its components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      let href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	          urlParsingNode.pathname :
	          '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      const parsed = (utils$2.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	          parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })();

	const cookies = platform.hasStandardBrowserEnv ?

	  // Standard browser envs support document.cookie
	  {
	    write(name, value, expires, path, domain, secure) {
	      const cookie = [name + '=' + encodeURIComponent(value)];

	      utils$2.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

	      utils$2.isString(path) && cookie.push('path=' + path);

	      utils$2.isString(domain) && cookie.push('domain=' + domain);

	      secure === true && cookie.push('secure');

	      document.cookie = cookie.join('; ');
	    },

	    read(name) {
	      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	      return (match ? decodeURIComponent(match[3]) : null);
	    },

	    remove(name) {
	      this.write(name, '', Date.now() - 86400000);
	    }
	  }

	  :

	  // Non-standard browser env (web workers, react-native) lack needed support.
	  {
	    write() {},
	    read() {
	      return null;
	    },
	    remove() {}
	  };

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 *
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
	}

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 *
	 * @returns {string} The combined URL
	 */
	function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	}

	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 *
	 * @returns {string} The combined full path
	 */
	function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }
	  return requestedURL;
	}

	const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 *
	 * @returns {Object} New object resulting from merging config2 to config1
	 */
	function mergeConfig$1(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  const config = {};

	  function getMergedValue(target, source, caseless) {
	    if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source)) {
	      return utils$2.merge.call({caseless}, target, source);
	    } else if (utils$2.isPlainObject(source)) {
	      return utils$2.merge({}, source);
	    } else if (utils$2.isArray(source)) {
	      return source.slice();
	    }
	    return source;
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDeepProperties(a, b, caseless) {
	    if (!utils$2.isUndefined(b)) {
	      return getMergedValue(a, b, caseless);
	    } else if (!utils$2.isUndefined(a)) {
	      return getMergedValue(undefined, a, caseless);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function valueFromConfig2(a, b) {
	    if (!utils$2.isUndefined(b)) {
	      return getMergedValue(undefined, b);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function defaultToConfig2(a, b) {
	    if (!utils$2.isUndefined(b)) {
	      return getMergedValue(undefined, b);
	    } else if (!utils$2.isUndefined(a)) {
	      return getMergedValue(undefined, a);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDirectKeys(a, b, prop) {
	    if (prop in config2) {
	      return getMergedValue(a, b);
	    } else if (prop in config1) {
	      return getMergedValue(undefined, a);
	    }
	  }

	  const mergeMap = {
	    url: valueFromConfig2,
	    method: valueFromConfig2,
	    data: valueFromConfig2,
	    baseURL: defaultToConfig2,
	    transformRequest: defaultToConfig2,
	    transformResponse: defaultToConfig2,
	    paramsSerializer: defaultToConfig2,
	    timeout: defaultToConfig2,
	    timeoutMessage: defaultToConfig2,
	    withCredentials: defaultToConfig2,
	    withXSRFToken: defaultToConfig2,
	    adapter: defaultToConfig2,
	    responseType: defaultToConfig2,
	    xsrfCookieName: defaultToConfig2,
	    xsrfHeaderName: defaultToConfig2,
	    onUploadProgress: defaultToConfig2,
	    onDownloadProgress: defaultToConfig2,
	    decompress: defaultToConfig2,
	    maxContentLength: defaultToConfig2,
	    maxBodyLength: defaultToConfig2,
	    beforeRedirect: defaultToConfig2,
	    transport: defaultToConfig2,
	    httpAgent: defaultToConfig2,
	    httpsAgent: defaultToConfig2,
	    cancelToken: defaultToConfig2,
	    socketPath: defaultToConfig2,
	    responseEncoding: defaultToConfig2,
	    validateStatus: mergeDirectKeys,
	    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
	  };

	  utils$2.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
	    const merge = mergeMap[prop] || mergeDeepProperties;
	    const configValue = merge(config1[prop], config2[prop], prop);
	    (utils$2.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
	  });

	  return config;
	}

	const resolveConfig = (config) => {
	  const newConfig = mergeConfig$1({}, config);

	  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

	  newConfig.headers = headers = AxiosHeaders$1.from(headers);

	  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

	  // HTTP basic authentication
	  if (auth) {
	    headers.set('Authorization', 'Basic ' +
	      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
	    );
	  }

	  let contentType;

	  if (utils$2.isFormData(data)) {
	    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
	      headers.setContentType(undefined); // Let the browser set it
	    } else if ((contentType = headers.getContentType()) !== false) {
	      // fix semicolon duplication issue for ReactNative FormData implementation
	      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
	      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
	    }
	  }

	  // Add xsrf header
	  // This is only done if running in a standard browser environment.
	  // Specifically not if we're in a web worker, or react-native.

	  if (platform.hasStandardBrowserEnv) {
	    withXSRFToken && utils$2.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

	    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
	      // Add xsrf header
	      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

	      if (xsrfValue) {
	        headers.set(xsrfHeaderName, xsrfValue);
	      }
	    }
	  }

	  return newConfig;
	};

	const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

	const xhrAdapter = isXHRAdapterSupported && function (config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    const _config = resolveConfig(config);
	    let requestData = _config.data;
	    const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
	    let {responseType, onUploadProgress, onDownloadProgress} = _config;
	    let onCanceled;
	    let uploadThrottled, downloadThrottled;
	    let flushUpload, flushDownload;

	    function done() {
	      flushUpload && flushUpload(); // flush events
	      flushDownload && flushDownload(); // flush events

	      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

	      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
	    }

	    let request = new XMLHttpRequest();

	    request.open(_config.method.toUpperCase(), _config.url, true);

	    // Set the request timeout in MS
	    request.timeout = _config.timeout;

	    function onloadend() {
	      if (!request) {
	        return;
	      }
	      // Prepare the response
	      const responseHeaders = AxiosHeaders$1.from(
	        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
	      );
	      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
	        request.responseText : request.response;
	      const response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config,
	        request
	      };

	      settle(function _resolve(value) {
	        resolve(value);
	        done();
	      }, function _reject(err) {
	        reject(err);
	        done();
	      }, response);

	      // Clean up request
	      request = null;
	    }

	    if ('onloadend' in request) {
	      // Use onloadend if available
	      request.onloadend = onloadend;
	    } else {
	      // Listen for ready state to emulate onloadend
	      request.onreadystatechange = function handleLoad() {
	        if (!request || request.readyState !== 4) {
	          return;
	        }

	        // The request errored out and we didn't get a response, this will be
	        // handled by onerror instead
	        // With one exception: request that using file: protocol, most browsers
	        // will return status as 0 even though it's a successful request
	        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	          return;
	        }
	        // readystate handler is calling before onerror or ontimeout handlers,
	        // so we should call onloadend on the next 'tick'
	        setTimeout(onloadend);
	      };
	    }

	    // Handle browser request cancellation (as opposed to a manual cancellation)
	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }

	      reject(new AxiosError$1('Request aborted', AxiosError$1.ECONNABORTED, config, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
	      const transitional = _config.transitional || transitionalDefaults;
	      if (_config.timeoutErrorMessage) {
	        timeoutErrorMessage = _config.timeoutErrorMessage;
	      }
	      reject(new AxiosError$1(
	        timeoutErrorMessage,
	        transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED,
	        config,
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Remove Content-Type if data is undefined
	    requestData === undefined && requestHeaders.setContentType(null);

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils$2.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
	        request.setRequestHeader(key, val);
	      });
	    }

	    // Add withCredentials to request if needed
	    if (!utils$2.isUndefined(_config.withCredentials)) {
	      request.withCredentials = !!_config.withCredentials;
	    }

	    // Add responseType to request if needed
	    if (responseType && responseType !== 'json') {
	      request.responseType = _config.responseType;
	    }

	    // Handle progress if needed
	    if (onDownloadProgress) {
	      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));
	      request.addEventListener('progress', downloadThrottled);
	    }

	    // Not all browsers support upload events
	    if (onUploadProgress && request.upload) {
	      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));

	      request.upload.addEventListener('progress', uploadThrottled);

	      request.upload.addEventListener('loadend', flushUpload);
	    }

	    if (_config.cancelToken || _config.signal) {
	      // Handle cancellation
	      // eslint-disable-next-line func-names
	      onCanceled = cancel => {
	        if (!request) {
	          return;
	        }
	        reject(!cancel || cancel.type ? new CanceledError$1(null, config, request) : cancel);
	        request.abort();
	        request = null;
	      };

	      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
	      if (_config.signal) {
	        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
	      }
	    }

	    const protocol = parseProtocol(_config.url);

	    if (protocol && platform.protocols.indexOf(protocol) === -1) {
	      reject(new AxiosError$1('Unsupported protocol ' + protocol + ':', AxiosError$1.ERR_BAD_REQUEST, config));
	      return;
	    }


	    // Send the request
	    request.send(requestData || null);
	  });
	};

	const composeSignals = (signals, timeout) => {
	  const {length} = (signals = signals ? signals.filter(Boolean) : []);

	  if (timeout || length) {
	    let controller = new AbortController();

	    let aborted;

	    const onabort = function (reason) {
	      if (!aborted) {
	        aborted = true;
	        unsubscribe();
	        const err = reason instanceof Error ? reason : this.reason;
	        controller.abort(err instanceof AxiosError$1 ? err : new CanceledError$1(err instanceof Error ? err.message : err));
	      }
	    };

	    let timer = timeout && setTimeout(() => {
	      timer = null;
	      onabort(new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT));
	    }, timeout);

	    const unsubscribe = () => {
	      if (signals) {
	        timer && clearTimeout(timer);
	        timer = null;
	        signals.forEach(signal => {
	          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
	        });
	        signals = null;
	      }
	    };

	    signals.forEach((signal) => signal.addEventListener('abort', onabort));

	    const {signal} = controller;

	    signal.unsubscribe = () => utils$2.asap(unsubscribe);

	    return signal;
	  }
	};

	const streamChunk = function* (chunk, chunkSize) {
	  let len = chunk.byteLength;

	  if (len < chunkSize) {
	    yield chunk;
	    return;
	  }

	  let pos = 0;
	  let end;

	  while (pos < len) {
	    end = pos + chunkSize;
	    yield chunk.slice(pos, end);
	    pos = end;
	  }
	};

	const readBytes = async function* (iterable, chunkSize) {
	  for await (const chunk of readStream(iterable)) {
	    yield* streamChunk(chunk, chunkSize);
	  }
	};

	const readStream = async function* (stream) {
	  if (stream[Symbol.asyncIterator]) {
	    yield* stream;
	    return;
	  }

	  const reader = stream.getReader();
	  try {
	    for (;;) {
	      const {done, value} = await reader.read();
	      if (done) {
	        break;
	      }
	      yield value;
	    }
	  } finally {
	    await reader.cancel();
	  }
	};

	const trackStream = (stream, chunkSize, onProgress, onFinish) => {
	  const iterator = readBytes(stream, chunkSize);

	  let bytes = 0;
	  let done;
	  let _onFinish = (e) => {
	    if (!done) {
	      done = true;
	      onFinish && onFinish(e);
	    }
	  };

	  return new ReadableStream({
	    async pull(controller) {
	      try {
	        const {done, value} = await iterator.next();

	        if (done) {
	         _onFinish();
	          controller.close();
	          return;
	        }

	        let len = value.byteLength;
	        if (onProgress) {
	          let loadedBytes = bytes += len;
	          onProgress(loadedBytes);
	        }
	        controller.enqueue(new Uint8Array(value));
	      } catch (err) {
	        _onFinish(err);
	        throw err;
	      }
	    },
	    cancel(reason) {
	      _onFinish(reason);
	      return iterator.return();
	    }
	  }, {
	    highWaterMark: 2
	  })
	};

	const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
	const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

	// used only inside the fetch adapter
	const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
	    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
	    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
	);

	const test = (fn, ...args) => {
	  try {
	    return !!fn(...args);
	  } catch (e) {
	    return false
	  }
	};

	const supportsRequestStream = isReadableStreamSupported && test(() => {
	  let duplexAccessed = false;

	  const hasContentType = new Request(platform.origin, {
	    body: new ReadableStream(),
	    method: 'POST',
	    get duplex() {
	      duplexAccessed = true;
	      return 'half';
	    },
	  }).headers.has('Content-Type');

	  return duplexAccessed && !hasContentType;
	});

	const DEFAULT_CHUNK_SIZE = 64 * 1024;

	const supportsResponseStream = isReadableStreamSupported &&
	  test(() => utils$2.isReadableStream(new Response('').body));


	const resolvers = {
	  stream: supportsResponseStream && ((res) => res.body)
	};

	isFetchSupported && (((res) => {
	  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
	    !resolvers[type] && (resolvers[type] = utils$2.isFunction(res[type]) ? (res) => res[type]() :
	      (_, config) => {
	        throw new AxiosError$1(`Response type '${type}' is not supported`, AxiosError$1.ERR_NOT_SUPPORT, config);
	      });
	  });
	})(new Response));

	const getBodyLength = async (body) => {
	  if (body == null) {
	    return 0;
	  }

	  if(utils$2.isBlob(body)) {
	    return body.size;
	  }

	  if(utils$2.isSpecCompliantForm(body)) {
	    const _request = new Request(platform.origin, {
	      method: 'POST',
	      body,
	    });
	    return (await _request.arrayBuffer()).byteLength;
	  }

	  if(utils$2.isArrayBufferView(body) || utils$2.isArrayBuffer(body)) {
	    return body.byteLength;
	  }

	  if(utils$2.isURLSearchParams(body)) {
	    body = body + '';
	  }

	  if(utils$2.isString(body)) {
	    return (await encodeText(body)).byteLength;
	  }
	};

	const resolveBodyLength = async (headers, body) => {
	  const length = utils$2.toFiniteNumber(headers.getContentLength());

	  return length == null ? getBodyLength(body) : length;
	};

	const fetchAdapter = isFetchSupported && (async (config) => {
	  let {
	    url,
	    method,
	    data,
	    signal,
	    cancelToken,
	    timeout,
	    onDownloadProgress,
	    onUploadProgress,
	    responseType,
	    headers,
	    withCredentials = 'same-origin',
	    fetchOptions
	  } = resolveConfig(config);

	  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

	  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

	  let request;

	  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
	      composedSignal.unsubscribe();
	  });

	  let requestContentLength;

	  try {
	    if (
	      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
	      (requestContentLength = await resolveBodyLength(headers, data)) !== 0
	    ) {
	      let _request = new Request(url, {
	        method: 'POST',
	        body: data,
	        duplex: "half"
	      });

	      let contentTypeHeader;

	      if (utils$2.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
	        headers.setContentType(contentTypeHeader);
	      }

	      if (_request.body) {
	        const [onProgress, flush] = progressEventDecorator(
	          requestContentLength,
	          progressEventReducer(asyncDecorator(onUploadProgress))
	        );

	        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
	      }
	    }

	    if (!utils$2.isString(withCredentials)) {
	      withCredentials = withCredentials ? 'include' : 'omit';
	    }

	    // Cloudflare Workers throws when credentials are defined
	    // see https://github.com/cloudflare/workerd/issues/902
	    const isCredentialsSupported = "credentials" in Request.prototype;
	    request = new Request(url, {
	      ...fetchOptions,
	      signal: composedSignal,
	      method: method.toUpperCase(),
	      headers: headers.normalize().toJSON(),
	      body: data,
	      duplex: "half",
	      credentials: isCredentialsSupported ? withCredentials : undefined
	    });

	    let response = await fetch(request);

	    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

	    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
	      const options = {};

	      ['status', 'statusText', 'headers'].forEach(prop => {
	        options[prop] = response[prop];
	      });

	      const responseContentLength = utils$2.toFiniteNumber(response.headers.get('content-length'));

	      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
	        responseContentLength,
	        progressEventReducer(asyncDecorator(onDownloadProgress), true)
	      ) || [];

	      response = new Response(
	        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
	          flush && flush();
	          unsubscribe && unsubscribe();
	        }),
	        options
	      );
	    }

	    responseType = responseType || 'text';

	    let responseData = await resolvers[utils$2.findKey(resolvers, responseType) || 'text'](response, config);

	    !isStreamResponse && unsubscribe && unsubscribe();

	    return await new Promise((resolve, reject) => {
	      settle(resolve, reject, {
	        data: responseData,
	        headers: AxiosHeaders$1.from(response.headers),
	        status: response.status,
	        statusText: response.statusText,
	        config,
	        request
	      });
	    })
	  } catch (err) {
	    unsubscribe && unsubscribe();

	    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
	      throw Object.assign(
	        new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request),
	        {
	          cause: err.cause || err
	        }
	      )
	    }

	    throw AxiosError$1.from(err, err && err.code, config, request);
	  }
	});

	const knownAdapters = {
	  http: httpAdapter,
	  xhr: xhrAdapter,
	  fetch: fetchAdapter
	};

	utils$2.forEach(knownAdapters, (fn, value) => {
	  if (fn) {
	    try {
	      Object.defineProperty(fn, 'name', {value});
	    } catch (e) {
	      // eslint-disable-next-line no-empty
	    }
	    Object.defineProperty(fn, 'adapterName', {value});
	  }
	});

	const renderReason = (reason) => `- ${reason}`;

	const isResolvedHandle = (adapter) => utils$2.isFunction(adapter) || adapter === null || adapter === false;

	const adapters = {
	  getAdapter: (adapters) => {
	    adapters = utils$2.isArray(adapters) ? adapters : [adapters];

	    const {length} = adapters;
	    let nameOrAdapter;
	    let adapter;

	    const rejectedReasons = {};

	    for (let i = 0; i < length; i++) {
	      nameOrAdapter = adapters[i];
	      let id;

	      adapter = nameOrAdapter;

	      if (!isResolvedHandle(nameOrAdapter)) {
	        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

	        if (adapter === undefined) {
	          throw new AxiosError$1(`Unknown adapter '${id}'`);
	        }
	      }

	      if (adapter) {
	        break;
	      }

	      rejectedReasons[id || '#' + i] = adapter;
	    }

	    if (!adapter) {

	      const reasons = Object.entries(rejectedReasons)
	        .map(([id, state]) => `adapter ${id} ` +
	          (state === false ? 'is not supported by the environment' : 'is not available in the build')
	        );

	      let s = length ?
	        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
	        'as no adapter specified';

	      throw new AxiosError$1(
	        `There is no suitable adapter to dispatch the request ` + s,
	        'ERR_NOT_SUPPORT'
	      );
	    }

	    return adapter;
	  },
	  adapters: knownAdapters
	};

	/**
	 * Throws a `CanceledError` if cancellation has been requested.
	 *
	 * @param {Object} config The config that is to be used for the request
	 *
	 * @returns {void}
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }

	  if (config.signal && config.signal.aborted) {
	    throw new CanceledError$1(null, config);
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 *
	 * @returns {Promise} The Promise to be fulfilled
	 */
	function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  config.headers = AxiosHeaders$1.from(config.headers);

	  // Transform request data
	  config.data = transformData.call(
	    config,
	    config.transformRequest
	  );

	  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
	    config.headers.setContentType('application/x-www-form-urlencoded', false);
	  }

	  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData.call(
	      config,
	      config.transformResponse,
	      response
	    );

	    response.headers = AxiosHeaders$1.from(response.headers);

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel$1(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData.call(
	          config,
	          config.transformResponse,
	          reason.response
	        );
	        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
	      }
	    }

	    return Promise.reject(reason);
	  });
	}

	const VERSION$1 = "1.7.7";

	const validators$1 = {};

	// eslint-disable-next-line func-names
	['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
	  validators$1[type] = function validator(thing) {
	    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
	  };
	});

	const deprecatedWarnings = {};

	/**
	 * Transitional option validator
	 *
	 * @param {function|boolean?} validator - set to false if the transitional option has been removed
	 * @param {string?} version - deprecated version / removed since version
	 * @param {string?} message - some message with additional info
	 *
	 * @returns {function}
	 */
	validators$1.transitional = function transitional(validator, version, message) {
	  function formatMessage(opt, desc) {
	    return '[Axios v' + VERSION$1 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
	  }

	  // eslint-disable-next-line func-names
	  return (value, opt, opts) => {
	    if (validator === false) {
	      throw new AxiosError$1(
	        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
	        AxiosError$1.ERR_DEPRECATED
	      );
	    }

	    if (version && !deprecatedWarnings[opt]) {
	      deprecatedWarnings[opt] = true;
	      // eslint-disable-next-line no-console
	      console.warn(
	        formatMessage(
	          opt,
	          ' has been deprecated since v' + version + ' and will be removed in the near future'
	        )
	      );
	    }

	    return validator ? validator(value, opt, opts) : true;
	  };
	};

	/**
	 * Assert object's properties type
	 *
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 *
	 * @returns {object}
	 */

	function assertOptions(options, schema, allowUnknown) {
	  if (typeof options !== 'object') {
	    throw new AxiosError$1('options must be an object', AxiosError$1.ERR_BAD_OPTION_VALUE);
	  }
	  const keys = Object.keys(options);
	  let i = keys.length;
	  while (i-- > 0) {
	    const opt = keys[i];
	    const validator = schema[opt];
	    if (validator) {
	      const value = options[opt];
	      const result = value === undefined || validator(value, opt, options);
	      if (result !== true) {
	        throw new AxiosError$1('option ' + opt + ' must be ' + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
	      }
	      continue;
	    }
	    if (allowUnknown !== true) {
	      throw new AxiosError$1('Unknown option ' + opt, AxiosError$1.ERR_BAD_OPTION);
	    }
	  }
	}

	const validator = {
	  assertOptions,
	  validators: validators$1
	};

	const validators = validator.validators;

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 *
	 * @return {Axios} A new instance of Axios
	 */
	let Axios$1 = class Axios {
	  constructor(instanceConfig) {
	    this.defaults = instanceConfig;
	    this.interceptors = {
	      request: new InterceptorManager(),
	      response: new InterceptorManager()
	    };
	  }

	  /**
	   * Dispatch a request
	   *
	   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
	   * @param {?Object} config
	   *
	   * @returns {Promise} The Promise to be fulfilled
	   */
	  async request(configOrUrl, config) {
	    try {
	      return await this._request(configOrUrl, config);
	    } catch (err) {
	      if (err instanceof Error) {
	        let dummy;

	        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

	        // slice off the Error: ... line
	        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
	        try {
	          if (!err.stack) {
	            err.stack = stack;
	            // match without the 2 top stack lines
	          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
	            err.stack += '\n' + stack;
	          }
	        } catch (e) {
	          // ignore the case where "stack" is an un-writable property
	        }
	      }

	      throw err;
	    }
	  }

	  _request(configOrUrl, config) {
	    /*eslint no-param-reassign:0*/
	    // Allow for axios('example/url'[, config]) a la fetch API
	    if (typeof configOrUrl === 'string') {
	      config = config || {};
	      config.url = configOrUrl;
	    } else {
	      config = configOrUrl || {};
	    }

	    config = mergeConfig$1(this.defaults, config);

	    const {transitional, paramsSerializer, headers} = config;

	    if (transitional !== undefined) {
	      validator.assertOptions(transitional, {
	        silentJSONParsing: validators.transitional(validators.boolean),
	        forcedJSONParsing: validators.transitional(validators.boolean),
	        clarifyTimeoutError: validators.transitional(validators.boolean)
	      }, false);
	    }

	    if (paramsSerializer != null) {
	      if (utils$2.isFunction(paramsSerializer)) {
	        config.paramsSerializer = {
	          serialize: paramsSerializer
	        };
	      } else {
	        validator.assertOptions(paramsSerializer, {
	          encode: validators.function,
	          serialize: validators.function
	        }, true);
	      }
	    }

	    // Set config.method
	    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

	    // Flatten headers
	    let contextHeaders = headers && utils$2.merge(
	      headers.common,
	      headers[config.method]
	    );

	    headers && utils$2.forEach(
	      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	      (method) => {
	        delete headers[method];
	      }
	    );

	    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

	    // filter out skipped interceptors
	    const requestInterceptorChain = [];
	    let synchronousRequestInterceptors = true;
	    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
	        return;
	      }

	      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

	      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
	    });

	    const responseInterceptorChain = [];
	    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
	    });

	    let promise;
	    let i = 0;
	    let len;

	    if (!synchronousRequestInterceptors) {
	      const chain = [dispatchRequest.bind(this), undefined];
	      chain.unshift.apply(chain, requestInterceptorChain);
	      chain.push.apply(chain, responseInterceptorChain);
	      len = chain.length;

	      promise = Promise.resolve(config);

	      while (i < len) {
	        promise = promise.then(chain[i++], chain[i++]);
	      }

	      return promise;
	    }

	    len = requestInterceptorChain.length;

	    let newConfig = config;

	    i = 0;

	    while (i < len) {
	      const onFulfilled = requestInterceptorChain[i++];
	      const onRejected = requestInterceptorChain[i++];
	      try {
	        newConfig = onFulfilled(newConfig);
	      } catch (error) {
	        onRejected.call(this, error);
	        break;
	      }
	    }

	    try {
	      promise = dispatchRequest.call(this, newConfig);
	    } catch (error) {
	      return Promise.reject(error);
	    }

	    i = 0;
	    len = responseInterceptorChain.length;

	    while (i < len) {
	      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
	    }

	    return promise;
	  }

	  getUri(config) {
	    config = mergeConfig$1(this.defaults, config);
	    const fullPath = buildFullPath(config.baseURL, config.url);
	    return buildURL(fullPath, config.params, config.paramsSerializer);
	  }
	};

	// Provide aliases for supported request methods
	utils$2.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios$1.prototype[method] = function(url, config) {
	    return this.request(mergeConfig$1(config || {}, {
	      method,
	      url,
	      data: (config || {}).data
	    }));
	  };
	});

	utils$2.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/

	  function generateHTTPMethod(isForm) {
	    return function httpMethod(url, data, config) {
	      return this.request(mergeConfig$1(config || {}, {
	        method,
	        headers: isForm ? {
	          'Content-Type': 'multipart/form-data'
	        } : {},
	        url,
	        data
	      }));
	    };
	  }

	  Axios$1.prototype[method] = generateHTTPMethod();

	  Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
	});

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @param {Function} executor The executor function.
	 *
	 * @returns {CancelToken}
	 */
	let CancelToken$1 = class CancelToken {
	  constructor(executor) {
	    if (typeof executor !== 'function') {
	      throw new TypeError('executor must be a function.');
	    }

	    let resolvePromise;

	    this.promise = new Promise(function promiseExecutor(resolve) {
	      resolvePromise = resolve;
	    });

	    const token = this;

	    // eslint-disable-next-line func-names
	    this.promise.then(cancel => {
	      if (!token._listeners) return;

	      let i = token._listeners.length;

	      while (i-- > 0) {
	        token._listeners[i](cancel);
	      }
	      token._listeners = null;
	    });

	    // eslint-disable-next-line func-names
	    this.promise.then = onfulfilled => {
	      let _resolve;
	      // eslint-disable-next-line func-names
	      const promise = new Promise(resolve => {
	        token.subscribe(resolve);
	        _resolve = resolve;
	      }).then(onfulfilled);

	      promise.cancel = function reject() {
	        token.unsubscribe(_resolve);
	      };

	      return promise;
	    };

	    executor(function cancel(message, config, request) {
	      if (token.reason) {
	        // Cancellation has already been requested
	        return;
	      }

	      token.reason = new CanceledError$1(message, config, request);
	      resolvePromise(token.reason);
	    });
	  }

	  /**
	   * Throws a `CanceledError` if cancellation has been requested.
	   */
	  throwIfRequested() {
	    if (this.reason) {
	      throw this.reason;
	    }
	  }

	  /**
	   * Subscribe to the cancel signal
	   */

	  subscribe(listener) {
	    if (this.reason) {
	      listener(this.reason);
	      return;
	    }

	    if (this._listeners) {
	      this._listeners.push(listener);
	    } else {
	      this._listeners = [listener];
	    }
	  }

	  /**
	   * Unsubscribe from the cancel signal
	   */

	  unsubscribe(listener) {
	    if (!this._listeners) {
	      return;
	    }
	    const index = this._listeners.indexOf(listener);
	    if (index !== -1) {
	      this._listeners.splice(index, 1);
	    }
	  }

	  toAbortSignal() {
	    const controller = new AbortController();

	    const abort = (err) => {
	      controller.abort(err);
	    };

	    this.subscribe(abort);

	    controller.signal.unsubscribe = () => this.unsubscribe(abort);

	    return controller.signal;
	  }

	  /**
	   * Returns an object that contains a new `CancelToken` and a function that, when called,
	   * cancels the `CancelToken`.
	   */
	  static source() {
	    let cancel;
	    const token = new CancelToken(function executor(c) {
	      cancel = c;
	    });
	    return {
	      token,
	      cancel
	    };
	  }
	};

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 *
	 * @returns {Function}
	 */
	function spread$1(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	}

	/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 *
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */
	function isAxiosError$1(payload) {
	  return utils$2.isObject(payload) && (payload.isAxiosError === true);
	}

	const HttpStatusCode$1 = {
	  Continue: 100,
	  SwitchingProtocols: 101,
	  Processing: 102,
	  EarlyHints: 103,
	  Ok: 200,
	  Created: 201,
	  Accepted: 202,
	  NonAuthoritativeInformation: 203,
	  NoContent: 204,
	  ResetContent: 205,
	  PartialContent: 206,
	  MultiStatus: 207,
	  AlreadyReported: 208,
	  ImUsed: 226,
	  MultipleChoices: 300,
	  MovedPermanently: 301,
	  Found: 302,
	  SeeOther: 303,
	  NotModified: 304,
	  UseProxy: 305,
	  Unused: 306,
	  TemporaryRedirect: 307,
	  PermanentRedirect: 308,
	  BadRequest: 400,
	  Unauthorized: 401,
	  PaymentRequired: 402,
	  Forbidden: 403,
	  NotFound: 404,
	  MethodNotAllowed: 405,
	  NotAcceptable: 406,
	  ProxyAuthenticationRequired: 407,
	  RequestTimeout: 408,
	  Conflict: 409,
	  Gone: 410,
	  LengthRequired: 411,
	  PreconditionFailed: 412,
	  PayloadTooLarge: 413,
	  UriTooLong: 414,
	  UnsupportedMediaType: 415,
	  RangeNotSatisfiable: 416,
	  ExpectationFailed: 417,
	  ImATeapot: 418,
	  MisdirectedRequest: 421,
	  UnprocessableEntity: 422,
	  Locked: 423,
	  FailedDependency: 424,
	  TooEarly: 425,
	  UpgradeRequired: 426,
	  PreconditionRequired: 428,
	  TooManyRequests: 429,
	  RequestHeaderFieldsTooLarge: 431,
	  UnavailableForLegalReasons: 451,
	  InternalServerError: 500,
	  NotImplemented: 501,
	  BadGateway: 502,
	  ServiceUnavailable: 503,
	  GatewayTimeout: 504,
	  HttpVersionNotSupported: 505,
	  VariantAlsoNegotiates: 506,
	  InsufficientStorage: 507,
	  LoopDetected: 508,
	  NotExtended: 510,
	  NetworkAuthenticationRequired: 511,
	};

	Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
	  HttpStatusCode$1[value] = key;
	});

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 *
	 * @returns {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  const context = new Axios$1(defaultConfig);
	  const instance = bind(Axios$1.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils$2.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});

	  // Copy context to instance
	  utils$2.extend(instance, context, null, {allOwnKeys: true});

	  // Factory for creating new instances
	  instance.create = function create(instanceConfig) {
	    return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
	  };

	  return instance;
	}

	// Create the default instance to be exported
	const axios = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios$1;

	// Expose Cancel & CancelToken
	axios.CanceledError = CanceledError$1;
	axios.CancelToken = CancelToken$1;
	axios.isCancel = isCancel$1;
	axios.VERSION = VERSION$1;
	axios.toFormData = toFormData$1;

	// Expose AxiosError class
	axios.AxiosError = AxiosError$1;

	// alias for CanceledError for backward compatibility
	axios.Cancel = axios.CanceledError;

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};

	axios.spread = spread$1;

	// Expose isAxiosError
	axios.isAxiosError = isAxiosError$1;

	// Expose mergeConfig
	axios.mergeConfig = mergeConfig$1;

	axios.AxiosHeaders = AxiosHeaders$1;

	axios.formToJSON = thing => formDataToJSON(utils$2.isHTMLForm(thing) ? new FormData(thing) : thing);

	axios.getAdapter = adapters.getAdapter;

	axios.HttpStatusCode = HttpStatusCode$1;

	axios.default = axios;

	// This module is intended to unwrap Axios default export as named.
	// Keep top-level export same with static properties
	// so that it can keep same with es module or cjs
	const {
	  Axios,
	  AxiosError,
	  CanceledError,
	  isCancel,
	  CancelToken,
	  VERSION,
	  all,
	  Cancel,
	  isAxiosError,
	  spread,
	  toFormData,
	  AxiosHeaders,
	  HttpStatusCode,
	  formToJSON,
	  getAdapter,
	  mergeConfig
	} = axios;

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
	        return Reflect.construct(f, arguments, this.constructor);
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var esErrors;
	var hasRequiredEsErrors;

	function requireEsErrors () {
		if (hasRequiredEsErrors) return esErrors;
		hasRequiredEsErrors = 1;

		/** @type {import('.')} */
		esErrors = Error;
		return esErrors;
	}

	var _eval;
	var hasRequired_eval;

	function require_eval () {
		if (hasRequired_eval) return _eval;
		hasRequired_eval = 1;

		/** @type {import('./eval')} */
		_eval = EvalError;
		return _eval;
	}

	var range;
	var hasRequiredRange;

	function requireRange () {
		if (hasRequiredRange) return range;
		hasRequiredRange = 1;

		/** @type {import('./range')} */
		range = RangeError;
		return range;
	}

	var ref;
	var hasRequiredRef;

	function requireRef () {
		if (hasRequiredRef) return ref;
		hasRequiredRef = 1;

		/** @type {import('./ref')} */
		ref = ReferenceError;
		return ref;
	}

	var syntax;
	var hasRequiredSyntax;

	function requireSyntax () {
		if (hasRequiredSyntax) return syntax;
		hasRequiredSyntax = 1;

		/** @type {import('./syntax')} */
		syntax = SyntaxError;
		return syntax;
	}

	var type$1;
	var hasRequiredType$1;

	function requireType$1 () {
		if (hasRequiredType$1) return type$1;
		hasRequiredType$1 = 1;

		/** @type {import('./type')} */
		type$1 = TypeError;
		return type$1;
	}

	var uri;
	var hasRequiredUri;

	function requireUri () {
		if (hasRequiredUri) return uri;
		hasRequiredUri = 1;

		/** @type {import('./uri')} */
		uri = URIError;
		return uri;
	}

	var shams;
	var hasRequiredShams;

	function requireShams () {
		if (hasRequiredShams) return shams;
		hasRequiredShams = 1;

		/* eslint complexity: [2, 18], max-statements: [2, 33] */
		shams = function hasSymbols() {
			if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
			if (typeof Symbol.iterator === 'symbol') { return true; }

			var obj = {};
			var sym = Symbol('test');
			var symObj = Object(sym);
			if (typeof sym === 'string') { return false; }

			if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
			if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

			// temp disabled per https://github.com/ljharb/object.assign/issues/17
			// if (sym instanceof Symbol) { return false; }
			// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
			// if (!(symObj instanceof Symbol)) { return false; }

			// if (typeof Symbol.prototype.toString !== 'function') { return false; }
			// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

			var symVal = 42;
			obj[sym] = symVal;
			for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
			if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

			if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

			var syms = Object.getOwnPropertySymbols(obj);
			if (syms.length !== 1 || syms[0] !== sym) { return false; }

			if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

			if (typeof Object.getOwnPropertyDescriptor === 'function') {
				var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
				if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
			}

			return true;
		};
		return shams;
	}

	var hasSymbols;
	var hasRequiredHasSymbols;

	function requireHasSymbols () {
		if (hasRequiredHasSymbols) return hasSymbols;
		hasRequiredHasSymbols = 1;

		var origSymbol = typeof Symbol !== 'undefined' && Symbol;
		var hasSymbolSham = requireShams();

		hasSymbols = function hasNativeSymbols() {
			if (typeof origSymbol !== 'function') { return false; }
			if (typeof Symbol !== 'function') { return false; }
			if (typeof origSymbol('foo') !== 'symbol') { return false; }
			if (typeof Symbol('bar') !== 'symbol') { return false; }

			return hasSymbolSham();
		};
		return hasSymbols;
	}

	var hasProto;
	var hasRequiredHasProto;

	function requireHasProto () {
		if (hasRequiredHasProto) return hasProto;
		hasRequiredHasProto = 1;

		var test = {
			__proto__: null,
			foo: {}
		};

		var $Object = Object;

		/** @type {import('.')} */
		hasProto = function hasProto() {
			// @ts-expect-error: TS errors on an inherited property for some reason
			return { __proto__: test }.foo === test.foo
				&& !(test instanceof $Object);
		};
		return hasProto;
	}

	var implementation;
	var hasRequiredImplementation;

	function requireImplementation () {
		if (hasRequiredImplementation) return implementation;
		hasRequiredImplementation = 1;

		/* eslint no-invalid-this: 1 */

		var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
		var toStr = Object.prototype.toString;
		var max = Math.max;
		var funcType = '[object Function]';

		var concatty = function concatty(a, b) {
		    var arr = [];

		    for (var i = 0; i < a.length; i += 1) {
		        arr[i] = a[i];
		    }
		    for (var j = 0; j < b.length; j += 1) {
		        arr[j + a.length] = b[j];
		    }

		    return arr;
		};

		var slicy = function slicy(arrLike, offset) {
		    var arr = [];
		    for (var i = offset, j = 0; i < arrLike.length; i += 1, j += 1) {
		        arr[j] = arrLike[i];
		    }
		    return arr;
		};

		var joiny = function (arr, joiner) {
		    var str = '';
		    for (var i = 0; i < arr.length; i += 1) {
		        str += arr[i];
		        if (i + 1 < arr.length) {
		            str += joiner;
		        }
		    }
		    return str;
		};

		implementation = function bind(that) {
		    var target = this;
		    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
		        throw new TypeError(ERROR_MESSAGE + target);
		    }
		    var args = slicy(arguments, 1);

		    var bound;
		    var binder = function () {
		        if (this instanceof bound) {
		            var result = target.apply(
		                this,
		                concatty(args, arguments)
		            );
		            if (Object(result) === result) {
		                return result;
		            }
		            return this;
		        }
		        return target.apply(
		            that,
		            concatty(args, arguments)
		        );

		    };

		    var boundLength = max(0, target.length - args.length);
		    var boundArgs = [];
		    for (var i = 0; i < boundLength; i++) {
		        boundArgs[i] = '$' + i;
		    }

		    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

		    if (target.prototype) {
		        var Empty = function Empty() {};
		        Empty.prototype = target.prototype;
		        bound.prototype = new Empty();
		        Empty.prototype = null;
		    }

		    return bound;
		};
		return implementation;
	}

	var functionBind;
	var hasRequiredFunctionBind;

	function requireFunctionBind () {
		if (hasRequiredFunctionBind) return functionBind;
		hasRequiredFunctionBind = 1;

		var implementation = requireImplementation();

		functionBind = Function.prototype.bind || implementation;
		return functionBind;
	}

	var hasown;
	var hasRequiredHasown;

	function requireHasown () {
		if (hasRequiredHasown) return hasown;
		hasRequiredHasown = 1;

		var call = Function.prototype.call;
		var $hasOwn = Object.prototype.hasOwnProperty;
		var bind = requireFunctionBind();

		/** @type {import('.')} */
		hasown = bind.call(call, $hasOwn);
		return hasown;
	}

	var getIntrinsic;
	var hasRequiredGetIntrinsic;

	function requireGetIntrinsic () {
		if (hasRequiredGetIntrinsic) return getIntrinsic;
		hasRequiredGetIntrinsic = 1;

		var undefined$1;

		var $Error = /*@__PURE__*/ requireEsErrors();
		var $EvalError = /*@__PURE__*/ require_eval();
		var $RangeError = /*@__PURE__*/ requireRange();
		var $ReferenceError = /*@__PURE__*/ requireRef();
		var $SyntaxError = /*@__PURE__*/ requireSyntax();
		var $TypeError = /*@__PURE__*/ requireType$1();
		var $URIError = /*@__PURE__*/ requireUri();

		var $Function = Function;

		// eslint-disable-next-line consistent-return
		var getEvalledConstructor = function (expressionSyntax) {
			try {
				return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
			} catch (e) {}
		};

		var $gOPD = Object.getOwnPropertyDescriptor;
		if ($gOPD) {
			try {
				$gOPD({}, '');
			} catch (e) {
				$gOPD = null; // this is IE 8, which has a broken gOPD
			}
		}

		var throwTypeError = function () {
			throw new $TypeError();
		};
		var ThrowTypeError = $gOPD
			? (function () {
				try {
					// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
					arguments.callee; // IE 8 does not throw here
					return throwTypeError;
				} catch (calleeThrows) {
					try {
						// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
						return $gOPD(arguments, 'callee').get;
					} catch (gOPDthrows) {
						return throwTypeError;
					}
				}
			}())
			: throwTypeError;

		var hasSymbols = requireHasSymbols()();
		var hasProto = /*@__PURE__*/ requireHasProto()();

		var getProto = Object.getPrototypeOf || (
			hasProto
				? function (x) { return x.__proto__; } // eslint-disable-line no-proto
				: null
		);

		var needsEval = {};

		var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined$1 : getProto(Uint8Array);

		var INTRINSICS = {
			__proto__: null,
			'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
			'%Array%': Array,
			'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
			'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
			'%AsyncFromSyncIteratorPrototype%': undefined$1,
			'%AsyncFunction%': needsEval,
			'%AsyncGenerator%': needsEval,
			'%AsyncGeneratorFunction%': needsEval,
			'%AsyncIteratorPrototype%': needsEval,
			'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
			'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
			'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
			'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
			'%Boolean%': Boolean,
			'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
			'%Date%': Date,
			'%decodeURI%': decodeURI,
			'%decodeURIComponent%': decodeURIComponent,
			'%encodeURI%': encodeURI,
			'%encodeURIComponent%': encodeURIComponent,
			'%Error%': $Error,
			'%eval%': eval, // eslint-disable-line no-eval
			'%EvalError%': $EvalError,
			'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
			'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
			'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
			'%Function%': $Function,
			'%GeneratorFunction%': needsEval,
			'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
			'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
			'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
			'%isFinite%': isFinite,
			'%isNaN%': isNaN,
			'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
			'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
			'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
			'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
			'%Math%': Math,
			'%Number%': Number,
			'%Object%': Object,
			'%parseFloat%': parseFloat,
			'%parseInt%': parseInt,
			'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
			'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
			'%RangeError%': $RangeError,
			'%ReferenceError%': $ReferenceError,
			'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
			'%RegExp%': RegExp,
			'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
			'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
			'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
			'%String%': String,
			'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined$1,
			'%Symbol%': hasSymbols ? Symbol : undefined$1,
			'%SyntaxError%': $SyntaxError,
			'%ThrowTypeError%': ThrowTypeError,
			'%TypedArray%': TypedArray,
			'%TypeError%': $TypeError,
			'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
			'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
			'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
			'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
			'%URIError%': $URIError,
			'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
			'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
			'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
		};

		if (getProto) {
			try {
				null.error; // eslint-disable-line no-unused-expressions
			} catch (e) {
				// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
				var errorProto = getProto(getProto(e));
				INTRINSICS['%Error.prototype%'] = errorProto;
			}
		}

		var doEval = function doEval(name) {
			var value;
			if (name === '%AsyncFunction%') {
				value = getEvalledConstructor('async function () {}');
			} else if (name === '%GeneratorFunction%') {
				value = getEvalledConstructor('function* () {}');
			} else if (name === '%AsyncGeneratorFunction%') {
				value = getEvalledConstructor('async function* () {}');
			} else if (name === '%AsyncGenerator%') {
				var fn = doEval('%AsyncGeneratorFunction%');
				if (fn) {
					value = fn.prototype;
				}
			} else if (name === '%AsyncIteratorPrototype%') {
				var gen = doEval('%AsyncGenerator%');
				if (gen && getProto) {
					value = getProto(gen.prototype);
				}
			}

			INTRINSICS[name] = value;

			return value;
		};

		var LEGACY_ALIASES = {
			__proto__: null,
			'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
			'%ArrayPrototype%': ['Array', 'prototype'],
			'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
			'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
			'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
			'%ArrayProto_values%': ['Array', 'prototype', 'values'],
			'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
			'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
			'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
			'%BooleanPrototype%': ['Boolean', 'prototype'],
			'%DataViewPrototype%': ['DataView', 'prototype'],
			'%DatePrototype%': ['Date', 'prototype'],
			'%ErrorPrototype%': ['Error', 'prototype'],
			'%EvalErrorPrototype%': ['EvalError', 'prototype'],
			'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
			'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
			'%FunctionPrototype%': ['Function', 'prototype'],
			'%Generator%': ['GeneratorFunction', 'prototype'],
			'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
			'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
			'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
			'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
			'%JSONParse%': ['JSON', 'parse'],
			'%JSONStringify%': ['JSON', 'stringify'],
			'%MapPrototype%': ['Map', 'prototype'],
			'%NumberPrototype%': ['Number', 'prototype'],
			'%ObjectPrototype%': ['Object', 'prototype'],
			'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
			'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
			'%PromisePrototype%': ['Promise', 'prototype'],
			'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
			'%Promise_all%': ['Promise', 'all'],
			'%Promise_reject%': ['Promise', 'reject'],
			'%Promise_resolve%': ['Promise', 'resolve'],
			'%RangeErrorPrototype%': ['RangeError', 'prototype'],
			'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
			'%RegExpPrototype%': ['RegExp', 'prototype'],
			'%SetPrototype%': ['Set', 'prototype'],
			'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
			'%StringPrototype%': ['String', 'prototype'],
			'%SymbolPrototype%': ['Symbol', 'prototype'],
			'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
			'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
			'%TypeErrorPrototype%': ['TypeError', 'prototype'],
			'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
			'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
			'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
			'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
			'%URIErrorPrototype%': ['URIError', 'prototype'],
			'%WeakMapPrototype%': ['WeakMap', 'prototype'],
			'%WeakSetPrototype%': ['WeakSet', 'prototype']
		};

		var bind = requireFunctionBind();
		var hasOwn = /*@__PURE__*/ requireHasown();
		var $concat = bind.call(Function.call, Array.prototype.concat);
		var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
		var $replace = bind.call(Function.call, String.prototype.replace);
		var $strSlice = bind.call(Function.call, String.prototype.slice);
		var $exec = bind.call(Function.call, RegExp.prototype.exec);

		/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
		var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
		var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
		var stringToPath = function stringToPath(string) {
			var first = $strSlice(string, 0, 1);
			var last = $strSlice(string, -1);
			if (first === '%' && last !== '%') {
				throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
			} else if (last === '%' && first !== '%') {
				throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
			}
			var result = [];
			$replace(string, rePropName, function (match, number, quote, subString) {
				result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
			});
			return result;
		};
		/* end adaptation */

		var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
			var intrinsicName = name;
			var alias;
			if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
				alias = LEGACY_ALIASES[intrinsicName];
				intrinsicName = '%' + alias[0] + '%';
			}

			if (hasOwn(INTRINSICS, intrinsicName)) {
				var value = INTRINSICS[intrinsicName];
				if (value === needsEval) {
					value = doEval(intrinsicName);
				}
				if (typeof value === 'undefined' && !allowMissing) {
					throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
				}

				return {
					alias: alias,
					name: intrinsicName,
					value: value
				};
			}

			throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
		};

		getIntrinsic = function GetIntrinsic(name, allowMissing) {
			if (typeof name !== 'string' || name.length === 0) {
				throw new $TypeError('intrinsic name must be a non-empty string');
			}
			if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
				throw new $TypeError('"allowMissing" argument must be a boolean');
			}

			if ($exec(/^%?[^%]*%?$/, name) === null) {
				throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
			}
			var parts = stringToPath(name);
			var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

			var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
			var intrinsicRealName = intrinsic.name;
			var value = intrinsic.value;
			var skipFurtherCaching = false;

			var alias = intrinsic.alias;
			if (alias) {
				intrinsicBaseName = alias[0];
				$spliceApply(parts, $concat([0, 1], alias));
			}

			for (var i = 1, isOwn = true; i < parts.length; i += 1) {
				var part = parts[i];
				var first = $strSlice(part, 0, 1);
				var last = $strSlice(part, -1);
				if (
					(
						(first === '"' || first === "'" || first === '`')
						|| (last === '"' || last === "'" || last === '`')
					)
					&& first !== last
				) {
					throw new $SyntaxError('property names with quotes must have matching quotes');
				}
				if (part === 'constructor' || !isOwn) {
					skipFurtherCaching = true;
				}

				intrinsicBaseName += '.' + part;
				intrinsicRealName = '%' + intrinsicBaseName + '%';

				if (hasOwn(INTRINSICS, intrinsicRealName)) {
					value = INTRINSICS[intrinsicRealName];
				} else if (value != null) {
					if (!(part in value)) {
						if (!allowMissing) {
							throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
						}
						return void undefined$1;
					}
					if ($gOPD && (i + 1) >= parts.length) {
						var desc = $gOPD(value, part);
						isOwn = !!desc;

						// By convention, when a data property is converted to an accessor
						// property to emulate a data property that does not suffer from
						// the override mistake, that accessor's getter is marked with
						// an `originalValue` property. Here, when we detect this, we
						// uphold the illusion by pretending to see that original data
						// property, i.e., returning the value rather than the getter
						// itself.
						if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
							value = desc.get;
						} else {
							value = value[part];
						}
					} else {
						isOwn = hasOwn(value, part);
						value = value[part];
					}

					if (isOwn && !skipFurtherCaching) {
						INTRINSICS[intrinsicRealName] = value;
					}
				}
			}
			return value;
		};
		return getIntrinsic;
	}

	var callBind = {exports: {}};

	var esDefineProperty;
	var hasRequiredEsDefineProperty;

	function requireEsDefineProperty () {
		if (hasRequiredEsDefineProperty) return esDefineProperty;
		hasRequiredEsDefineProperty = 1;

		var GetIntrinsic = /*@__PURE__*/ requireGetIntrinsic();

		/** @type {import('.')} */
		var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
		if ($defineProperty) {
			try {
				$defineProperty({}, 'a', { value: 1 });
			} catch (e) {
				// IE 8 has a broken defineProperty
				$defineProperty = false;
			}
		}

		esDefineProperty = $defineProperty;
		return esDefineProperty;
	}

	var gopd;
	var hasRequiredGopd;

	function requireGopd () {
		if (hasRequiredGopd) return gopd;
		hasRequiredGopd = 1;

		var GetIntrinsic = /*@__PURE__*/ requireGetIntrinsic();

		var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

		if ($gOPD) {
			try {
				$gOPD([], 'length');
			} catch (e) {
				// IE 8 has a broken gOPD
				$gOPD = null;
			}
		}

		gopd = $gOPD;
		return gopd;
	}

	var defineDataProperty;
	var hasRequiredDefineDataProperty;

	function requireDefineDataProperty () {
		if (hasRequiredDefineDataProperty) return defineDataProperty;
		hasRequiredDefineDataProperty = 1;

		var $defineProperty = /*@__PURE__*/ requireEsDefineProperty();

		var $SyntaxError = /*@__PURE__*/ requireSyntax();
		var $TypeError = /*@__PURE__*/ requireType$1();

		var gopd = /*@__PURE__*/ requireGopd();

		/** @type {import('.')} */
		defineDataProperty = function defineDataProperty(
			obj,
			property,
			value
		) {
			if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
				throw new $TypeError('`obj` must be an object or a function`');
			}
			if (typeof property !== 'string' && typeof property !== 'symbol') {
				throw new $TypeError('`property` must be a string or a symbol`');
			}
			if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
				throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
			}
			if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
				throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
			}
			if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
				throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
			}
			if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
				throw new $TypeError('`loose`, if provided, must be a boolean');
			}

			var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
			var nonWritable = arguments.length > 4 ? arguments[4] : null;
			var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
			var loose = arguments.length > 6 ? arguments[6] : false;

			/* @type {false | TypedPropertyDescriptor<unknown>} */
			var desc = !!gopd && gopd(obj, property);

			if ($defineProperty) {
				$defineProperty(obj, property, {
					configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
					enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
					value: value,
					writable: nonWritable === null && desc ? desc.writable : !nonWritable
				});
			} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
				// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
				obj[property] = value; // eslint-disable-line no-param-reassign
			} else {
				throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
			}
		};
		return defineDataProperty;
	}

	var hasPropertyDescriptors_1;
	var hasRequiredHasPropertyDescriptors;

	function requireHasPropertyDescriptors () {
		if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;
		hasRequiredHasPropertyDescriptors = 1;

		var $defineProperty = /*@__PURE__*/ requireEsDefineProperty();

		var hasPropertyDescriptors = function hasPropertyDescriptors() {
			return !!$defineProperty;
		};

		hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
			// node v0.6 has a bug where array lengths can be Set but not Defined
			if (!$defineProperty) {
				return null;
			}
			try {
				return $defineProperty([], 'length', { value: 1 }).length !== 1;
			} catch (e) {
				// In Firefox 4-22, defining length on an array throws an exception.
				return true;
			}
		};

		hasPropertyDescriptors_1 = hasPropertyDescriptors;
		return hasPropertyDescriptors_1;
	}

	var setFunctionLength;
	var hasRequiredSetFunctionLength;

	function requireSetFunctionLength () {
		if (hasRequiredSetFunctionLength) return setFunctionLength;
		hasRequiredSetFunctionLength = 1;

		var GetIntrinsic = /*@__PURE__*/ requireGetIntrinsic();
		var define = /*@__PURE__*/ requireDefineDataProperty();
		var hasDescriptors = /*@__PURE__*/ requireHasPropertyDescriptors()();
		var gOPD = /*@__PURE__*/ requireGopd();

		var $TypeError = /*@__PURE__*/ requireType$1();
		var $floor = GetIntrinsic('%Math.floor%');

		/** @type {import('.')} */
		setFunctionLength = function setFunctionLength(fn, length) {
			if (typeof fn !== 'function') {
				throw new $TypeError('`fn` is not a function');
			}
			if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
				throw new $TypeError('`length` must be a positive 32-bit integer');
			}

			var loose = arguments.length > 2 && !!arguments[2];

			var functionLengthIsConfigurable = true;
			var functionLengthIsWritable = true;
			if ('length' in fn && gOPD) {
				var desc = gOPD(fn, 'length');
				if (desc && !desc.configurable) {
					functionLengthIsConfigurable = false;
				}
				if (desc && !desc.writable) {
					functionLengthIsWritable = false;
				}
			}

			if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
				if (hasDescriptors) {
					define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
				} else {
					define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
				}
			}
			return fn;
		};
		return setFunctionLength;
	}

	var hasRequiredCallBind;

	function requireCallBind () {
		if (hasRequiredCallBind) return callBind.exports;
		hasRequiredCallBind = 1;
		(function (module) {

			var bind = requireFunctionBind();
			var GetIntrinsic = /*@__PURE__*/ requireGetIntrinsic();
			var setFunctionLength = /*@__PURE__*/ requireSetFunctionLength();

			var $TypeError = /*@__PURE__*/ requireType$1();
			var $apply = GetIntrinsic('%Function.prototype.apply%');
			var $call = GetIntrinsic('%Function.prototype.call%');
			var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

			var $defineProperty = /*@__PURE__*/ requireEsDefineProperty();
			var $max = GetIntrinsic('%Math.max%');

			module.exports = function callBind(originalFunction) {
				if (typeof originalFunction !== 'function') {
					throw new $TypeError('a function is required');
				}
				var func = $reflectApply(bind, $call, arguments);
				return setFunctionLength(
					func,
					1 + $max(0, originalFunction.length - (arguments.length - 1)),
					true
				);
			};

			var applyBind = function applyBind() {
				return $reflectApply(bind, $apply, arguments);
			};

			if ($defineProperty) {
				$defineProperty(module.exports, 'apply', { value: applyBind });
			} else {
				module.exports.apply = applyBind;
			} 
		} (callBind));
		return callBind.exports;
	}

	var callBound;
	var hasRequiredCallBound;

	function requireCallBound () {
		if (hasRequiredCallBound) return callBound;
		hasRequiredCallBound = 1;

		var GetIntrinsic = /*@__PURE__*/ requireGetIntrinsic();

		var callBind = requireCallBind();

		var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

		callBound = function callBoundIntrinsic(name, allowMissing) {
			var intrinsic = GetIntrinsic(name, !!allowMissing);
			if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
				return callBind(intrinsic);
			}
			return intrinsic;
		};
		return callBound;
	}

	const _nodeResolve_empty = {};

	const _nodeResolve_empty$1 = {
		__proto__: null,
		default: _nodeResolve_empty
	};

	const require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

	var objectInspect;
	var hasRequiredObjectInspect;

	function requireObjectInspect () {
		if (hasRequiredObjectInspect) return objectInspect;
		hasRequiredObjectInspect = 1;
		var hasMap = typeof Map === 'function' && Map.prototype;
		var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
		var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
		var mapForEach = hasMap && Map.prototype.forEach;
		var hasSet = typeof Set === 'function' && Set.prototype;
		var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
		var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
		var setForEach = hasSet && Set.prototype.forEach;
		var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
		var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
		var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
		var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
		var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
		var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
		var booleanValueOf = Boolean.prototype.valueOf;
		var objectToString = Object.prototype.toString;
		var functionToString = Function.prototype.toString;
		var $match = String.prototype.match;
		var $slice = String.prototype.slice;
		var $replace = String.prototype.replace;
		var $toUpperCase = String.prototype.toUpperCase;
		var $toLowerCase = String.prototype.toLowerCase;
		var $test = RegExp.prototype.test;
		var $concat = Array.prototype.concat;
		var $join = Array.prototype.join;
		var $arrSlice = Array.prototype.slice;
		var $floor = Math.floor;
		var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
		var gOPS = Object.getOwnPropertySymbols;
		var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
		var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
		// ie, `has-tostringtag/shams
		var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
		    ? Symbol.toStringTag
		    : null;
		var isEnumerable = Object.prototype.propertyIsEnumerable;

		var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
		    [].__proto__ === Array.prototype // eslint-disable-line no-proto
		        ? function (O) {
		            return O.__proto__; // eslint-disable-line no-proto
		        }
		        : null
		);

		function addNumericSeparator(num, str) {
		    if (
		        num === Infinity
		        || num === -Infinity
		        || num !== num
		        || (num && num > -1000 && num < 1000)
		        || $test.call(/e/, str)
		    ) {
		        return str;
		    }
		    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
		    if (typeof num === 'number') {
		        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
		        if (int !== num) {
		            var intStr = String(int);
		            var dec = $slice.call(str, intStr.length + 1);
		            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
		        }
		    }
		    return $replace.call(str, sepRegex, '$&_');
		}

		var utilInspect = require$$0;
		var inspectCustom = utilInspect.custom;
		var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;

		objectInspect = function inspect_(obj, options, depth, seen) {
		    var opts = options || {};

		    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
		        throw new TypeError('option "quoteStyle" must be "single" or "double"');
		    }
		    if (
		        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
		            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
		            : opts.maxStringLength !== null
		        )
		    ) {
		        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
		    }
		    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
		    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
		        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
		    }

		    if (
		        has(opts, 'indent')
		        && opts.indent !== null
		        && opts.indent !== '\t'
		        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
		    ) {
		        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
		    }
		    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
		        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
		    }
		    var numericSeparator = opts.numericSeparator;

		    if (typeof obj === 'undefined') {
		        return 'undefined';
		    }
		    if (obj === null) {
		        return 'null';
		    }
		    if (typeof obj === 'boolean') {
		        return obj ? 'true' : 'false';
		    }

		    if (typeof obj === 'string') {
		        return inspectString(obj, opts);
		    }
		    if (typeof obj === 'number') {
		        if (obj === 0) {
		            return Infinity / obj > 0 ? '0' : '-0';
		        }
		        var str = String(obj);
		        return numericSeparator ? addNumericSeparator(obj, str) : str;
		    }
		    if (typeof obj === 'bigint') {
		        var bigIntStr = String(obj) + 'n';
		        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
		    }

		    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
		    if (typeof depth === 'undefined') { depth = 0; }
		    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
		        return isArray(obj) ? '[Array]' : '[Object]';
		    }

		    var indent = getIndent(opts, depth);

		    if (typeof seen === 'undefined') {
		        seen = [];
		    } else if (indexOf(seen, obj) >= 0) {
		        return '[Circular]';
		    }

		    function inspect(value, from, noIndent) {
		        if (from) {
		            seen = $arrSlice.call(seen);
		            seen.push(from);
		        }
		        if (noIndent) {
		            var newOpts = {
		                depth: opts.depth
		            };
		            if (has(opts, 'quoteStyle')) {
		                newOpts.quoteStyle = opts.quoteStyle;
		            }
		            return inspect_(value, newOpts, depth + 1, seen);
		        }
		        return inspect_(value, opts, depth + 1, seen);
		    }

		    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
		        var name = nameOf(obj);
		        var keys = arrObjKeys(obj, inspect);
		        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
		    }
		    if (isSymbol(obj)) {
		        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
		        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
		    }
		    if (isElement(obj)) {
		        var s = '<' + $toLowerCase.call(String(obj.nodeName));
		        var attrs = obj.attributes || [];
		        for (var i = 0; i < attrs.length; i++) {
		            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
		        }
		        s += '>';
		        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
		        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
		        return s;
		    }
		    if (isArray(obj)) {
		        if (obj.length === 0) { return '[]'; }
		        var xs = arrObjKeys(obj, inspect);
		        if (indent && !singleLineValues(xs)) {
		            return '[' + indentedJoin(xs, indent) + ']';
		        }
		        return '[ ' + $join.call(xs, ', ') + ' ]';
		    }
		    if (isError(obj)) {
		        var parts = arrObjKeys(obj, inspect);
		        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
		            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
		        }
		        if (parts.length === 0) { return '[' + String(obj) + ']'; }
		        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
		    }
		    if (typeof obj === 'object' && customInspect) {
		        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
		            return utilInspect(obj, { depth: maxDepth - depth });
		        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
		            return obj.inspect();
		        }
		    }
		    if (isMap(obj)) {
		        var mapParts = [];
		        if (mapForEach) {
		            mapForEach.call(obj, function (value, key) {
		                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
		            });
		        }
		        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
		    }
		    if (isSet(obj)) {
		        var setParts = [];
		        if (setForEach) {
		            setForEach.call(obj, function (value) {
		                setParts.push(inspect(value, obj));
		            });
		        }
		        return collectionOf('Set', setSize.call(obj), setParts, indent);
		    }
		    if (isWeakMap(obj)) {
		        return weakCollectionOf('WeakMap');
		    }
		    if (isWeakSet(obj)) {
		        return weakCollectionOf('WeakSet');
		    }
		    if (isWeakRef(obj)) {
		        return weakCollectionOf('WeakRef');
		    }
		    if (isNumber(obj)) {
		        return markBoxed(inspect(Number(obj)));
		    }
		    if (isBigInt(obj)) {
		        return markBoxed(inspect(bigIntValueOf.call(obj)));
		    }
		    if (isBoolean(obj)) {
		        return markBoxed(booleanValueOf.call(obj));
		    }
		    if (isString(obj)) {
		        return markBoxed(inspect(String(obj)));
		    }
		    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
		    /* eslint-env browser */
		    if (typeof window !== 'undefined' && obj === window) {
		        return '{ [object Window] }';
		    }
		    if (
		        (typeof globalThis !== 'undefined' && obj === globalThis)
		        || (typeof commonjsGlobal !== 'undefined' && obj === commonjsGlobal)
		    ) {
		        return '{ [object globalThis] }';
		    }
		    if (!isDate(obj) && !isRegExp(obj)) {
		        var ys = arrObjKeys(obj, inspect);
		        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
		        var protoTag = obj instanceof Object ? '' : 'null prototype';
		        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
		        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
		        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
		        if (ys.length === 0) { return tag + '{}'; }
		        if (indent) {
		            return tag + '{' + indentedJoin(ys, indent) + '}';
		        }
		        return tag + '{ ' + $join.call(ys, ', ') + ' }';
		    }
		    return String(obj);
		};

		function wrapQuotes(s, defaultStyle, opts) {
		    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
		    return quoteChar + s + quoteChar;
		}

		function quote(s) {
		    return $replace.call(String(s), /"/g, '&quot;');
		}

		function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
		function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
		function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
		function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
		function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
		function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
		function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

		// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
		function isSymbol(obj) {
		    if (hasShammedSymbols) {
		        return obj && typeof obj === 'object' && obj instanceof Symbol;
		    }
		    if (typeof obj === 'symbol') {
		        return true;
		    }
		    if (!obj || typeof obj !== 'object' || !symToString) {
		        return false;
		    }
		    try {
		        symToString.call(obj);
		        return true;
		    } catch (e) {}
		    return false;
		}

		function isBigInt(obj) {
		    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
		        return false;
		    }
		    try {
		        bigIntValueOf.call(obj);
		        return true;
		    } catch (e) {}
		    return false;
		}

		var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
		function has(obj, key) {
		    return hasOwn.call(obj, key);
		}

		function toStr(obj) {
		    return objectToString.call(obj);
		}

		function nameOf(f) {
		    if (f.name) { return f.name; }
		    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
		    if (m) { return m[1]; }
		    return null;
		}

		function indexOf(xs, x) {
		    if (xs.indexOf) { return xs.indexOf(x); }
		    for (var i = 0, l = xs.length; i < l; i++) {
		        if (xs[i] === x) { return i; }
		    }
		    return -1;
		}

		function isMap(x) {
		    if (!mapSize || !x || typeof x !== 'object') {
		        return false;
		    }
		    try {
		        mapSize.call(x);
		        try {
		            setSize.call(x);
		        } catch (s) {
		            return true;
		        }
		        return x instanceof Map; // core-js workaround, pre-v2.5.0
		    } catch (e) {}
		    return false;
		}

		function isWeakMap(x) {
		    if (!weakMapHas || !x || typeof x !== 'object') {
		        return false;
		    }
		    try {
		        weakMapHas.call(x, weakMapHas);
		        try {
		            weakSetHas.call(x, weakSetHas);
		        } catch (s) {
		            return true;
		        }
		        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
		    } catch (e) {}
		    return false;
		}

		function isWeakRef(x) {
		    if (!weakRefDeref || !x || typeof x !== 'object') {
		        return false;
		    }
		    try {
		        weakRefDeref.call(x);
		        return true;
		    } catch (e) {}
		    return false;
		}

		function isSet(x) {
		    if (!setSize || !x || typeof x !== 'object') {
		        return false;
		    }
		    try {
		        setSize.call(x);
		        try {
		            mapSize.call(x);
		        } catch (m) {
		            return true;
		        }
		        return x instanceof Set; // core-js workaround, pre-v2.5.0
		    } catch (e) {}
		    return false;
		}

		function isWeakSet(x) {
		    if (!weakSetHas || !x || typeof x !== 'object') {
		        return false;
		    }
		    try {
		        weakSetHas.call(x, weakSetHas);
		        try {
		            weakMapHas.call(x, weakMapHas);
		        } catch (s) {
		            return true;
		        }
		        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
		    } catch (e) {}
		    return false;
		}

		function isElement(x) {
		    if (!x || typeof x !== 'object') { return false; }
		    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
		        return true;
		    }
		    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
		}

		function inspectString(str, opts) {
		    if (str.length > opts.maxStringLength) {
		        var remaining = str.length - opts.maxStringLength;
		        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
		        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
		    }
		    // eslint-disable-next-line no-control-regex
		    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
		    return wrapQuotes(s, 'single', opts);
		}

		function lowbyte(c) {
		    var n = c.charCodeAt(0);
		    var x = {
		        8: 'b',
		        9: 't',
		        10: 'n',
		        12: 'f',
		        13: 'r'
		    }[n];
		    if (x) { return '\\' + x; }
		    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
		}

		function markBoxed(str) {
		    return 'Object(' + str + ')';
		}

		function weakCollectionOf(type) {
		    return type + ' { ? }';
		}

		function collectionOf(type, size, entries, indent) {
		    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
		    return type + ' (' + size + ') {' + joinedEntries + '}';
		}

		function singleLineValues(xs) {
		    for (var i = 0; i < xs.length; i++) {
		        if (indexOf(xs[i], '\n') >= 0) {
		            return false;
		        }
		    }
		    return true;
		}

		function getIndent(opts, depth) {
		    var baseIndent;
		    if (opts.indent === '\t') {
		        baseIndent = '\t';
		    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
		        baseIndent = $join.call(Array(opts.indent + 1), ' ');
		    } else {
		        return null;
		    }
		    return {
		        base: baseIndent,
		        prev: $join.call(Array(depth + 1), baseIndent)
		    };
		}

		function indentedJoin(xs, indent) {
		    if (xs.length === 0) { return ''; }
		    var lineJoiner = '\n' + indent.prev + indent.base;
		    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
		}

		function arrObjKeys(obj, inspect) {
		    var isArr = isArray(obj);
		    var xs = [];
		    if (isArr) {
		        xs.length = obj.length;
		        for (var i = 0; i < obj.length; i++) {
		            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
		        }
		    }
		    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
		    var symMap;
		    if (hasShammedSymbols) {
		        symMap = {};
		        for (var k = 0; k < syms.length; k++) {
		            symMap['$' + syms[k]] = syms[k];
		        }
		    }

		    for (var key in obj) { // eslint-disable-line no-restricted-syntax
		        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
		        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
		        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
		            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
		            continue; // eslint-disable-line no-restricted-syntax, no-continue
		        } else if ($test.call(/[^\w$]/, key)) {
		            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
		        } else {
		            xs.push(key + ': ' + inspect(obj[key], obj));
		        }
		    }
		    if (typeof gOPS === 'function') {
		        for (var j = 0; j < syms.length; j++) {
		            if (isEnumerable.call(obj, syms[j])) {
		                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
		            }
		        }
		    }
		    return xs;
		}
		return objectInspect;
	}

	var sideChannel;
	var hasRequiredSideChannel;

	function requireSideChannel () {
		if (hasRequiredSideChannel) return sideChannel;
		hasRequiredSideChannel = 1;

		var GetIntrinsic = /*@__PURE__*/ requireGetIntrinsic();
		var callBound = requireCallBound();
		var inspect = /*@__PURE__*/ requireObjectInspect();

		var $TypeError = /*@__PURE__*/ requireType$1();
		var $WeakMap = GetIntrinsic('%WeakMap%', true);
		var $Map = GetIntrinsic('%Map%', true);

		var $weakMapGet = callBound('WeakMap.prototype.get', true);
		var $weakMapSet = callBound('WeakMap.prototype.set', true);
		var $weakMapHas = callBound('WeakMap.prototype.has', true);
		var $mapGet = callBound('Map.prototype.get', true);
		var $mapSet = callBound('Map.prototype.set', true);
		var $mapHas = callBound('Map.prototype.has', true);

		/*
		* This function traverses the list returning the node corresponding to the given key.
		*
		* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.
		*/
		/** @type {import('.').listGetNode} */
		var listGetNode = function (list, key) { // eslint-disable-line consistent-return
			/** @type {typeof list | NonNullable<(typeof list)['next']>} */
			var prev = list;
			/** @type {(typeof list)['next']} */
			var curr;
			for (; (curr = prev.next) !== null; prev = curr) {
				if (curr.key === key) {
					prev.next = curr.next;
					// eslint-disable-next-line no-extra-parens
					curr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);
					list.next = curr; // eslint-disable-line no-param-reassign
					return curr;
				}
			}
		};

		/** @type {import('.').listGet} */
		var listGet = function (objects, key) {
			var node = listGetNode(objects, key);
			return node && node.value;
		};
		/** @type {import('.').listSet} */
		var listSet = function (objects, key, value) {
			var node = listGetNode(objects, key);
			if (node) {
				node.value = value;
			} else {
				// Prepend the new node to the beginning of the list
				objects.next = /** @type {import('.').ListNode<typeof value>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens
					key: key,
					next: objects.next,
					value: value
				});
			}
		};
		/** @type {import('.').listHas} */
		var listHas = function (objects, key) {
			return !!listGetNode(objects, key);
		};

		/** @type {import('.')} */
		sideChannel = function getSideChannel() {
			/** @type {WeakMap<object, unknown>} */ var $wm;
			/** @type {Map<object, unknown>} */ var $m;
			/** @type {import('.').RootNode<unknown>} */ var $o;

			/** @type {import('.').Channel} */
			var channel = {
				assert: function (key) {
					if (!channel.has(key)) {
						throw new $TypeError('Side channel does not contain ' + inspect(key));
					}
				},
				get: function (key) { // eslint-disable-line consistent-return
					if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
						if ($wm) {
							return $weakMapGet($wm, key);
						}
					} else if ($Map) {
						if ($m) {
							return $mapGet($m, key);
						}
					} else {
						if ($o) { // eslint-disable-line no-lonely-if
							return listGet($o, key);
						}
					}
				},
				has: function (key) {
					if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
						if ($wm) {
							return $weakMapHas($wm, key);
						}
					} else if ($Map) {
						if ($m) {
							return $mapHas($m, key);
						}
					} else {
						if ($o) { // eslint-disable-line no-lonely-if
							return listHas($o, key);
						}
					}
					return false;
				},
				set: function (key, value) {
					if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
						if (!$wm) {
							$wm = new $WeakMap();
						}
						$weakMapSet($wm, key, value);
					} else if ($Map) {
						if (!$m) {
							$m = new $Map();
						}
						$mapSet($m, key, value);
					} else {
						if (!$o) {
							// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
							$o = { key: {}, next: null };
						}
						listSet($o, key, value);
					}
				}
			};
			return channel;
		};
		return sideChannel;
	}

	var formats;
	var hasRequiredFormats;

	function requireFormats () {
		if (hasRequiredFormats) return formats;
		hasRequiredFormats = 1;

		var replace = String.prototype.replace;
		var percentTwenties = /%20/g;

		var Format = {
		    RFC1738: 'RFC1738',
		    RFC3986: 'RFC3986'
		};

		formats = {
		    'default': Format.RFC3986,
		    formatters: {
		        RFC1738: function (value) {
		            return replace.call(value, percentTwenties, '+');
		        },
		        RFC3986: function (value) {
		            return String(value);
		        }
		    },
		    RFC1738: Format.RFC1738,
		    RFC3986: Format.RFC3986
		};
		return formats;
	}

	var utils;
	var hasRequiredUtils;

	function requireUtils () {
		if (hasRequiredUtils) return utils;
		hasRequiredUtils = 1;

		var formats = /*@__PURE__*/ requireFormats();

		var has = Object.prototype.hasOwnProperty;
		var isArray = Array.isArray;

		var hexTable = (function () {
		    var array = [];
		    for (var i = 0; i < 256; ++i) {
		        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
		    }

		    return array;
		}());

		var compactQueue = function compactQueue(queue) {
		    while (queue.length > 1) {
		        var item = queue.pop();
		        var obj = item.obj[item.prop];

		        if (isArray(obj)) {
		            var compacted = [];

		            for (var j = 0; j < obj.length; ++j) {
		                if (typeof obj[j] !== 'undefined') {
		                    compacted.push(obj[j]);
		                }
		            }

		            item.obj[item.prop] = compacted;
		        }
		    }
		};

		var arrayToObject = function arrayToObject(source, options) {
		    var obj = options && options.plainObjects ? Object.create(null) : {};
		    for (var i = 0; i < source.length; ++i) {
		        if (typeof source[i] !== 'undefined') {
		            obj[i] = source[i];
		        }
		    }

		    return obj;
		};

		var merge = function merge(target, source, options) {
		    /* eslint no-param-reassign: 0 */
		    if (!source) {
		        return target;
		    }

		    if (typeof source !== 'object') {
		        if (isArray(target)) {
		            target.push(source);
		        } else if (target && typeof target === 'object') {
		            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
		                target[source] = true;
		            }
		        } else {
		            return [target, source];
		        }

		        return target;
		    }

		    if (!target || typeof target !== 'object') {
		        return [target].concat(source);
		    }

		    var mergeTarget = target;
		    if (isArray(target) && !isArray(source)) {
		        mergeTarget = arrayToObject(target, options);
		    }

		    if (isArray(target) && isArray(source)) {
		        source.forEach(function (item, i) {
		            if (has.call(target, i)) {
		                var targetItem = target[i];
		                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
		                    target[i] = merge(targetItem, item, options);
		                } else {
		                    target.push(item);
		                }
		            } else {
		                target[i] = item;
		            }
		        });
		        return target;
		    }

		    return Object.keys(source).reduce(function (acc, key) {
		        var value = source[key];

		        if (has.call(acc, key)) {
		            acc[key] = merge(acc[key], value, options);
		        } else {
		            acc[key] = value;
		        }
		        return acc;
		    }, mergeTarget);
		};

		var assign = function assignSingleSource(target, source) {
		    return Object.keys(source).reduce(function (acc, key) {
		        acc[key] = source[key];
		        return acc;
		    }, target);
		};

		var decode = function (str, decoder, charset) {
		    var strWithoutPlus = str.replace(/\+/g, ' ');
		    if (charset === 'iso-8859-1') {
		        // unescape never throws, no try...catch needed:
		        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
		    }
		    // utf-8
		    try {
		        return decodeURIComponent(strWithoutPlus);
		    } catch (e) {
		        return strWithoutPlus;
		    }
		};

		var limit = 1024;

		/* eslint operator-linebreak: [2, "before"] */

		var encode = function encode(str, defaultEncoder, charset, kind, format) {
		    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
		    // It has been adapted here for stricter adherence to RFC 3986
		    if (str.length === 0) {
		        return str;
		    }

		    var string = str;
		    if (typeof str === 'symbol') {
		        string = Symbol.prototype.toString.call(str);
		    } else if (typeof str !== 'string') {
		        string = String(str);
		    }

		    if (charset === 'iso-8859-1') {
		        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
		            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
		        });
		    }

		    var out = '';
		    for (var j = 0; j < string.length; j += limit) {
		        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
		        var arr = [];

		        for (var i = 0; i < segment.length; ++i) {
		            var c = segment.charCodeAt(i);
		            if (
		                c === 0x2D // -
		                || c === 0x2E // .
		                || c === 0x5F // _
		                || c === 0x7E // ~
		                || (c >= 0x30 && c <= 0x39) // 0-9
		                || (c >= 0x41 && c <= 0x5A) // a-z
		                || (c >= 0x61 && c <= 0x7A) // A-Z
		                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
		            ) {
		                arr[arr.length] = segment.charAt(i);
		                continue;
		            }

		            if (c < 0x80) {
		                arr[arr.length] = hexTable[c];
		                continue;
		            }

		            if (c < 0x800) {
		                arr[arr.length] = hexTable[0xC0 | (c >> 6)]
		                    + hexTable[0x80 | (c & 0x3F)];
		                continue;
		            }

		            if (c < 0xD800 || c >= 0xE000) {
		                arr[arr.length] = hexTable[0xE0 | (c >> 12)]
		                    + hexTable[0x80 | ((c >> 6) & 0x3F)]
		                    + hexTable[0x80 | (c & 0x3F)];
		                continue;
		            }

		            i += 1;
		            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));

		            arr[arr.length] = hexTable[0xF0 | (c >> 18)]
		                + hexTable[0x80 | ((c >> 12) & 0x3F)]
		                + hexTable[0x80 | ((c >> 6) & 0x3F)]
		                + hexTable[0x80 | (c & 0x3F)];
		        }

		        out += arr.join('');
		    }

		    return out;
		};

		var compact = function compact(value) {
		    var queue = [{ obj: { o: value }, prop: 'o' }];
		    var refs = [];

		    for (var i = 0; i < queue.length; ++i) {
		        var item = queue[i];
		        var obj = item.obj[item.prop];

		        var keys = Object.keys(obj);
		        for (var j = 0; j < keys.length; ++j) {
		            var key = keys[j];
		            var val = obj[key];
		            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
		                queue.push({ obj: obj, prop: key });
		                refs.push(val);
		            }
		        }
		    }

		    compactQueue(queue);

		    return value;
		};

		var isRegExp = function isRegExp(obj) {
		    return Object.prototype.toString.call(obj) === '[object RegExp]';
		};

		var isBuffer = function isBuffer(obj) {
		    if (!obj || typeof obj !== 'object') {
		        return false;
		    }

		    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
		};

		var combine = function combine(a, b) {
		    return [].concat(a, b);
		};

		var maybeMap = function maybeMap(val, fn) {
		    if (isArray(val)) {
		        var mapped = [];
		        for (var i = 0; i < val.length; i += 1) {
		            mapped.push(fn(val[i]));
		        }
		        return mapped;
		    }
		    return fn(val);
		};

		utils = {
		    arrayToObject: arrayToObject,
		    assign: assign,
		    combine: combine,
		    compact: compact,
		    decode: decode,
		    encode: encode,
		    isBuffer: isBuffer,
		    isRegExp: isRegExp,
		    maybeMap: maybeMap,
		    merge: merge
		};
		return utils;
	}

	var stringify_1;
	var hasRequiredStringify;

	function requireStringify () {
		if (hasRequiredStringify) return stringify_1;
		hasRequiredStringify = 1;

		var getSideChannel = requireSideChannel();
		var utils = /*@__PURE__*/ requireUtils();
		var formats = /*@__PURE__*/ requireFormats();
		var has = Object.prototype.hasOwnProperty;

		var arrayPrefixGenerators = {
		    brackets: function brackets(prefix) {
		        return prefix + '[]';
		    },
		    comma: 'comma',
		    indices: function indices(prefix, key) {
		        return prefix + '[' + key + ']';
		    },
		    repeat: function repeat(prefix) {
		        return prefix;
		    }
		};

		var isArray = Array.isArray;
		var push = Array.prototype.push;
		var pushToArray = function (arr, valueOrArray) {
		    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
		};

		var toISO = Date.prototype.toISOString;

		var defaultFormat = formats['default'];
		var defaults = {
		    addQueryPrefix: false,
		    allowDots: false,
		    allowEmptyArrays: false,
		    arrayFormat: 'indices',
		    charset: 'utf-8',
		    charsetSentinel: false,
		    delimiter: '&',
		    encode: true,
		    encodeDotInKeys: false,
		    encoder: utils.encode,
		    encodeValuesOnly: false,
		    format: defaultFormat,
		    formatter: formats.formatters[defaultFormat],
		    // deprecated
		    indices: false,
		    serializeDate: function serializeDate(date) {
		        return toISO.call(date);
		    },
		    skipNulls: false,
		    strictNullHandling: false
		};

		var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
		    return typeof v === 'string'
		        || typeof v === 'number'
		        || typeof v === 'boolean'
		        || typeof v === 'symbol'
		        || typeof v === 'bigint';
		};

		var sentinel = {};

		var stringify = function stringify(
		    object,
		    prefix,
		    generateArrayPrefix,
		    commaRoundTrip,
		    allowEmptyArrays,
		    strictNullHandling,
		    skipNulls,
		    encodeDotInKeys,
		    encoder,
		    filter,
		    sort,
		    allowDots,
		    serializeDate,
		    format,
		    formatter,
		    encodeValuesOnly,
		    charset,
		    sideChannel
		) {
		    var obj = object;

		    var tmpSc = sideChannel;
		    var step = 0;
		    var findFlag = false;
		    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
		        // Where object last appeared in the ref tree
		        var pos = tmpSc.get(object);
		        step += 1;
		        if (typeof pos !== 'undefined') {
		            if (pos === step) {
		                throw new RangeError('Cyclic object value');
		            } else {
		                findFlag = true; // Break while
		            }
		        }
		        if (typeof tmpSc.get(sentinel) === 'undefined') {
		            step = 0;
		        }
		    }

		    if (typeof filter === 'function') {
		        obj = filter(prefix, obj);
		    } else if (obj instanceof Date) {
		        obj = serializeDate(obj);
		    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
		        obj = utils.maybeMap(obj, function (value) {
		            if (value instanceof Date) {
		                return serializeDate(value);
		            }
		            return value;
		        });
		    }

		    if (obj === null) {
		        if (strictNullHandling) {
		            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
		        }

		        obj = '';
		    }

		    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
		        if (encoder) {
		            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
		            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
		        }
		        return [formatter(prefix) + '=' + formatter(String(obj))];
		    }

		    var values = [];

		    if (typeof obj === 'undefined') {
		        return values;
		    }

		    var objKeys;
		    if (generateArrayPrefix === 'comma' && isArray(obj)) {
		        // we need to join elements in
		        if (encodeValuesOnly && encoder) {
		            obj = utils.maybeMap(obj, encoder);
		        }
		        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
		    } else if (isArray(filter)) {
		        objKeys = filter;
		    } else {
		        var keys = Object.keys(obj);
		        objKeys = sort ? keys.sort(sort) : keys;
		    }

		    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, '%2E') : prefix;

		    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;

		    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
		        return adjustedPrefix + '[]';
		    }

		    for (var j = 0; j < objKeys.length; ++j) {
		        var key = objKeys[j];
		        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

		        if (skipNulls && value === null) {
		            continue;
		        }

		        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, '%2E') : key;
		        var keyPrefix = isArray(obj)
		            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix
		            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');

		        sideChannel.set(object, step);
		        var valueSideChannel = getSideChannel();
		        valueSideChannel.set(sentinel, sideChannel);
		        pushToArray(values, stringify(
		            value,
		            keyPrefix,
		            generateArrayPrefix,
		            commaRoundTrip,
		            allowEmptyArrays,
		            strictNullHandling,
		            skipNulls,
		            encodeDotInKeys,
		            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,
		            filter,
		            sort,
		            allowDots,
		            serializeDate,
		            format,
		            formatter,
		            encodeValuesOnly,
		            charset,
		            valueSideChannel
		        ));
		    }

		    return values;
		};

		var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
		    if (!opts) {
		        return defaults;
		    }

		    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
		        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
		    }

		    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {
		        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');
		    }

		    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
		        throw new TypeError('Encoder has to be a function.');
		    }

		    var charset = opts.charset || defaults.charset;
		    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
		        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
		    }

		    var format = formats['default'];
		    if (typeof opts.format !== 'undefined') {
		        if (!has.call(formats.formatters, opts.format)) {
		            throw new TypeError('Unknown format option provided.');
		        }
		        format = opts.format;
		    }
		    var formatter = formats.formatters[format];

		    var filter = defaults.filter;
		    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
		        filter = opts.filter;
		    }

		    var arrayFormat;
		    if (opts.arrayFormat in arrayPrefixGenerators) {
		        arrayFormat = opts.arrayFormat;
		    } else if ('indices' in opts) {
		        arrayFormat = opts.indices ? 'indices' : 'repeat';
		    } else {
		        arrayFormat = defaults.arrayFormat;
		    }

		    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
		        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
		    }

		    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;

		    return {
		        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
		        allowDots: allowDots,
		        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
		        arrayFormat: arrayFormat,
		        charset: charset,
		        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
		        commaRoundTrip: opts.commaRoundTrip,
		        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
		        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
		        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
		        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
		        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
		        filter: filter,
		        format: format,
		        formatter: formatter,
		        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
		        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
		        sort: typeof opts.sort === 'function' ? opts.sort : null,
		        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
		    };
		};

		stringify_1 = function (object, opts) {
		    var obj = object;
		    var options = normalizeStringifyOptions(opts);

		    var objKeys;
		    var filter;

		    if (typeof options.filter === 'function') {
		        filter = options.filter;
		        obj = filter('', obj);
		    } else if (isArray(options.filter)) {
		        filter = options.filter;
		        objKeys = filter;
		    }

		    var keys = [];

		    if (typeof obj !== 'object' || obj === null) {
		        return '';
		    }

		    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
		    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;

		    if (!objKeys) {
		        objKeys = Object.keys(obj);
		    }

		    if (options.sort) {
		        objKeys.sort(options.sort);
		    }

		    var sideChannel = getSideChannel();
		    for (var i = 0; i < objKeys.length; ++i) {
		        var key = objKeys[i];

		        if (options.skipNulls && obj[key] === null) {
		            continue;
		        }
		        pushToArray(keys, stringify(
		            obj[key],
		            key,
		            generateArrayPrefix,
		            commaRoundTrip,
		            options.allowEmptyArrays,
		            options.strictNullHandling,
		            options.skipNulls,
		            options.encodeDotInKeys,
		            options.encode ? options.encoder : null,
		            options.filter,
		            options.sort,
		            options.allowDots,
		            options.serializeDate,
		            options.format,
		            options.formatter,
		            options.encodeValuesOnly,
		            options.charset,
		            sideChannel
		        ));
		    }

		    var joined = keys.join(options.delimiter);
		    var prefix = options.addQueryPrefix === true ? '?' : '';

		    if (options.charsetSentinel) {
		        if (options.charset === 'iso-8859-1') {
		            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
		            prefix += 'utf8=%26%2310003%3B&';
		        } else {
		            // encodeURIComponent('✓')
		            prefix += 'utf8=%E2%9C%93&';
		        }
		    }

		    return joined.length > 0 ? prefix + joined : '';
		};
		return stringify_1;
	}

	var parse;
	var hasRequiredParse$1;

	function requireParse$1 () {
		if (hasRequiredParse$1) return parse;
		hasRequiredParse$1 = 1;

		var utils = /*@__PURE__*/ requireUtils();

		var has = Object.prototype.hasOwnProperty;
		var isArray = Array.isArray;

		var defaults = {
		    allowDots: false,
		    allowEmptyArrays: false,
		    allowPrototypes: false,
		    allowSparse: false,
		    arrayLimit: 20,
		    charset: 'utf-8',
		    charsetSentinel: false,
		    comma: false,
		    decodeDotInKeys: false,
		    decoder: utils.decode,
		    delimiter: '&',
		    depth: 5,
		    duplicates: 'combine',
		    ignoreQueryPrefix: false,
		    interpretNumericEntities: false,
		    parameterLimit: 1000,
		    parseArrays: true,
		    plainObjects: false,
		    strictDepth: false,
		    strictNullHandling: false
		};

		var interpretNumericEntities = function (str) {
		    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
		        return String.fromCharCode(parseInt(numberStr, 10));
		    });
		};

		var parseArrayValue = function (val, options) {
		    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
		        return val.split(',');
		    }

		    return val;
		};

		// This is what browsers will submit when the ✓ character occurs in an
		// application/x-www-form-urlencoded body and the encoding of the page containing
		// the form is iso-8859-1, or when the submitted form has an accept-charset
		// attribute of iso-8859-1. Presumably also with other charsets that do not contain
		// the ✓ character, such as us-ascii.
		var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

		// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
		var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

		var parseValues = function parseQueryStringValues(str, options) {
		    var obj = { __proto__: null };

		    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
		    cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');
		    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
		    var parts = cleanStr.split(options.delimiter, limit);
		    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
		    var i;

		    var charset = options.charset;
		    if (options.charsetSentinel) {
		        for (i = 0; i < parts.length; ++i) {
		            if (parts[i].indexOf('utf8=') === 0) {
		                if (parts[i] === charsetSentinel) {
		                    charset = 'utf-8';
		                } else if (parts[i] === isoSentinel) {
		                    charset = 'iso-8859-1';
		                }
		                skipIndex = i;
		                i = parts.length; // The eslint settings do not allow break;
		            }
		        }
		    }

		    for (i = 0; i < parts.length; ++i) {
		        if (i === skipIndex) {
		            continue;
		        }
		        var part = parts[i];

		        var bracketEqualsPos = part.indexOf(']=');
		        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

		        var key, val;
		        if (pos === -1) {
		            key = options.decoder(part, defaults.decoder, charset, 'key');
		            val = options.strictNullHandling ? null : '';
		        } else {
		            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
		            val = utils.maybeMap(
		                parseArrayValue(part.slice(pos + 1), options),
		                function (encodedVal) {
		                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
		                }
		            );
		        }

		        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
		            val = interpretNumericEntities(val);
		        }

		        if (part.indexOf('[]=') > -1) {
		            val = isArray(val) ? [val] : val;
		        }

		        var existing = has.call(obj, key);
		        if (existing && options.duplicates === 'combine') {
		            obj[key] = utils.combine(obj[key], val);
		        } else if (!existing || options.duplicates === 'last') {
		            obj[key] = val;
		        }
		    }

		    return obj;
		};

		var parseObject = function (chain, val, options, valuesParsed) {
		    var leaf = valuesParsed ? val : parseArrayValue(val, options);

		    for (var i = chain.length - 1; i >= 0; --i) {
		        var obj;
		        var root = chain[i];

		        if (root === '[]' && options.parseArrays) {
		            obj = options.allowEmptyArrays && (leaf === '' || (options.strictNullHandling && leaf === null))
		                ? []
		                : [].concat(leaf);
		        } else {
		            obj = options.plainObjects ? Object.create(null) : {};
		            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
		            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;
		            var index = parseInt(decodedRoot, 10);
		            if (!options.parseArrays && decodedRoot === '') {
		                obj = { 0: leaf };
		            } else if (
		                !isNaN(index)
		                && root !== decodedRoot
		                && String(index) === decodedRoot
		                && index >= 0
		                && (options.parseArrays && index <= options.arrayLimit)
		            ) {
		                obj = [];
		                obj[index] = leaf;
		            } else if (decodedRoot !== '__proto__') {
		                obj[decodedRoot] = leaf;
		            }
		        }

		        leaf = obj;
		    }

		    return leaf;
		};

		var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
		    if (!givenKey) {
		        return;
		    }

		    // Transform dot notation to bracket notation
		    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

		    // The regex chunks

		    var brackets = /(\[[^[\]]*])/;
		    var child = /(\[[^[\]]*])/g;

		    // Get the parent

		    var segment = options.depth > 0 && brackets.exec(key);
		    var parent = segment ? key.slice(0, segment.index) : key;

		    // Stash the parent if it exists

		    var keys = [];
		    if (parent) {
		        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
		        if (!options.plainObjects && has.call(Object.prototype, parent)) {
		            if (!options.allowPrototypes) {
		                return;
		            }
		        }

		        keys.push(parent);
		    }

		    // Loop through children appending to the array until we hit depth

		    var i = 0;
		    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
		        i += 1;
		        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
		            if (!options.allowPrototypes) {
		                return;
		            }
		        }
		        keys.push(segment[1]);
		    }

		    // If there's a remainder, check strictDepth option for throw, else just add whatever is left

		    if (segment) {
		        if (options.strictDepth === true) {
		            throw new RangeError('Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true');
		        }
		        keys.push('[' + key.slice(segment.index) + ']');
		    }

		    return parseObject(keys, val, options, valuesParsed);
		};

		var normalizeParseOptions = function normalizeParseOptions(opts) {
		    if (!opts) {
		        return defaults;
		    }

		    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
		        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
		    }

		    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {
		        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');
		    }

		    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {
		        throw new TypeError('Decoder has to be a function.');
		    }

		    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
		        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
		    }
		    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;

		    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;

		    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {
		        throw new TypeError('The duplicates option must be either combine, first, or last');
		    }

		    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;

		    return {
		        allowDots: allowDots,
		        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
		        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
		        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
		        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
		        charset: charset,
		        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
		        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
		        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
		        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
		        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
		        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
		        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
		        duplicates: duplicates,
		        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
		        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
		        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
		        parseArrays: opts.parseArrays !== false,
		        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
		        strictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,
		        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
		    };
		};

		parse = function (str, opts) {
		    var options = normalizeParseOptions(opts);

		    if (str === '' || str === null || typeof str === 'undefined') {
		        return options.plainObjects ? Object.create(null) : {};
		    }

		    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
		    var obj = options.plainObjects ? Object.create(null) : {};

		    // Iterate over the keys and setup the new object

		    var keys = Object.keys(tempObj);
		    for (var i = 0; i < keys.length; ++i) {
		        var key = keys[i];
		        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
		        obj = utils.merge(obj, newObj, options);
		    }

		    if (options.allowSparse === true) {
		        return obj;
		    }

		    return utils.compact(obj);
		};
		return parse;
	}

	var lib;
	var hasRequiredLib;

	function requireLib () {
		if (hasRequiredLib) return lib;
		hasRequiredLib = 1;

		var stringify = /*@__PURE__*/ requireStringify();
		var parse = /*@__PURE__*/ requireParse$1();
		var formats = /*@__PURE__*/ requireFormats();

		lib = {
		    formats: formats,
		    parse: parse,
		    stringify: stringify
		};
		return lib;
	}

	var libExports = /*@__PURE__*/ requireLib();
	const qs = /*@__PURE__*/getDefaultExportFromCjs(libExports);

	class Http {
	  #clientAxios;
	  #authActions;
	  #restrictionManager;
	  #requestIdGenerator;
	  _logger = null;
	  #logTag = "";
	  constructor(baseURL, authActions, options) {
	    this.#clientAxios = axios.create({
	      baseURL,
	      ...options ?? {}
	    });
	    this.#authActions = authActions;
	    this.#restrictionManager = new RestrictionManager();
	    this.#requestIdGenerator = new DefaultRequestIdGenerator();
	  }
	  setLogger(logger) {
	    this._logger = logger;
	    this.#restrictionManager.setLogger(this.getLogger());
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  setRestrictionManagerParams(params) {
	    this.#restrictionManager.params = params;
	  }
	  getRestrictionManagerParams() {
	    return this.#restrictionManager.params;
	  }
	  setLogTag(logTag) {
	    this.#logTag = logTag;
	  }
	  clearLogTag() {
	    this.#logTag = "";
	  }
	  async batch(calls, isHaltOnError = true) {
	    const isArrayMode = Array.isArray(calls);
	    let cmd = isArrayMode ? [] : {};
	    let cnt = 0;
	    const processRow = (row, index) => {
	      let method = null;
	      let params = null;
	      if (Array.isArray(row)) {
	        method = row[0];
	        params = row[1];
	      } else if (!!row.method) {
	        method = row.method;
	        params = row.params;
	      }
	      if (!!method) {
	        cnt++;
	        let data = method + "?" + qs.stringify(params);
	        if (isArrayMode || Array.isArray(cmd)) {
	          cmd.push(data);
	        } else {
	          cmd[index] = data;
	        }
	      }
	    };
	    if (isArrayMode) {
	      calls.forEach((item, index) => processRow(item, index));
	    } else {
	      Object.entries(calls).forEach(([index, item]) => processRow(item, index));
	    }
	    if (cnt < 1) {
	      return Promise.resolve(new Result());
	    }
	    return this.call(
	      "batch",
	      {
	        halt: isHaltOnError ? 1 : 0,
	        cmd
	      }
	    ).then((response) => {
	      const responseResult = response.getData().result;
	      const results = isArrayMode ? [] : {};
	      const processResponse = (row, index) => {
	        if (
	          // @ts-ignore
	          typeof responseResult.result[index] !== "undefined" || typeof responseResult.result_error[index] !== "undefined"
	        ) {
	          let q = row.split("?");
	          let data = new AjaxResult(
	            {
	              // @ts-ignore
	              result: typeof responseResult.result[index] !== "undefined" ? responseResult.result[index] : {},
	              // @ts-ignore
	              error: responseResult?.result_error[index] || void 0,
	              // @ts-ignore
	              total: responseResult.result_total[index],
	              // @ts-ignore
	              next: responseResult.result_next[index]
	            },
	            {
	              method: q[0] || "",
	              params: qs.parse(q[1] || ""),
	              start: 0
	            },
	            response.getStatus()
	          );
	          if (isArrayMode || Array.isArray(results)) {
	            results.push(data);
	          } else {
	            results[index] = data;
	          }
	        }
	      };
	      if (Array.isArray(cmd)) {
	        cmd.forEach((item, index) => processResponse(item, index));
	      } else {
	        Object.entries(cmd).forEach(([index, item]) => processResponse(
	          item,
	          index
	        ));
	      }
	      let dataResult;
	      const initError = (result2) => {
	        return new AjaxError({
	          status: 0,
	          answerError: {
	            error: result2.getErrorMessages().join("; "),
	            errorDescription: `batch ${result2.getQuery().method}: ${qs.stringify(result2.getQuery().params, { encode: false })}`
	          },
	          cause: result2.getErrors().next().value
	        });
	      };
	      const result = new Result();
	      if (isArrayMode || Array.isArray(results)) {
	        dataResult = [];
	        for (let data of results) {
	          if (data.getStatus() !== 200 || !data.isSuccess) {
	            const error = initError(data);
	            if (!isHaltOnError && !data.isSuccess) {
	              result.addError(error);
	              continue;
	            }
	            return Promise.reject(error);
	          }
	          dataResult.push(data.getData().result);
	        }
	      } else {
	        dataResult = {};
	        for (let key of Object.keys(results)) {
	          let data = results[key];
	          if (data.getStatus() !== 200 || !data.isSuccess) {
	            const error = initError(data);
	            if (!isHaltOnError && !data.isSuccess) {
	              result.addError(error);
	              continue;
	            }
	            return Promise.reject(error);
	          }
	          dataResult[key] = data.getData().result;
	        }
	      }
	      result.setData(dataResult);
	      return Promise.resolve(result);
	    });
	  }
	  /**
	   * Calling the RestApi function
	   *
	   * If we get a problem with authorization, we make 1 attempt to update the access token
	   *
	   * @param method
	   * @param params
	   * @param start
	   */
	  async call(method, params, start = 0) {
	    let authData = this.#authActions.getAuthData();
	    if (authData === false) {
	      authData = await this.#authActions.refreshAuth();
	    }
	    await this.#restrictionManager.check();
	    return this.#clientAxios.post(
	      this.#prepareMethod(method),
	      this.#prepareParams(authData, params, start)
	    ).then(
	      (response) => {
	        const payload = response.data;
	        return Promise.resolve({
	          status: response.status,
	          payload
	        });
	      },
	      async (problem) => {
	        let answerError = {
	          error: problem?.code || 0,
	          errorDescription: problem?.message || ""
	        };
	        if (problem instanceof AxiosError && problem.response && problem.response.data) {
	          const response = problem.response.data;
	          answerError = {
	            error: response.error,
	            errorDescription: response.error_description
	          };
	        }
	        const problemError = new AjaxError({
	          status: problem.response?.status || 0,
	          answerError,
	          cause: problem
	        });
	        if (problemError.status === 401) {
	          if ([
	            "expired_token",
	            "invalid_token"
	          ].includes(problemError.answerError.error)) {
	            this.getLogger().info(`refreshAuth >> ${problemError.answerError.error} >>>`);
	            authData = await this.#authActions.refreshAuth();
	            await this.#restrictionManager.check();
	            return this.#clientAxios.post(
	              this.#prepareMethod(method),
	              this.#prepareParams(authData, params, start)
	            ).then(
	              async (response) => {
	                const payload = response.data;
	                return Promise.resolve({
	                  status: response.status,
	                  payload
	                });
	              },
	              async (problem2) => {
	                let answerError2 = {
	                  error: problem2?.code || 0,
	                  errorDescription: problem2?.message || ""
	                };
	                if (problem2 instanceof AxiosError && problem2.response && problem2.response.data) {
	                  const response = problem2.response.data;
	                  answerError2 = {
	                    error: response.error,
	                    errorDescription: response.error_description
	                  };
	                }
	                const problemError2 = new AjaxError({
	                  status: problem2.response?.status || 0,
	                  answerError: answerError2,
	                  cause: problem2
	                });
	                return Promise.reject(problemError2);
	              }
	            );
	          }
	        }
	        return Promise.reject(problemError);
	      }
	    ).then((response) => {
	      const result = new AjaxResult(
	        response.payload,
	        {
	          method,
	          params,
	          start
	        },
	        response.status
	      );
	      return Promise.resolve(result);
	    });
	  }
	  /**
	   * Processes function parameters and adds authorization
	   *
	   * @param authData
	   * @param params
	   * @param start
	   *
	   * @private
	   */
	  #prepareParams(authData, params, start = 0) {
	    let result = Object.assign({}, params);
	    if (this.#logTag.length > 0) {
	      result.logTag = this.#logTag;
	    }
	    result[this.#requestIdGenerator.getQueryStringParameterName()] = this.#requestIdGenerator.getRequestId();
	    result[this.#requestIdGenerator.getQueryStringSdkParameterName()] = "0.1.0";
	    if (!!result.data) {
	      if (!!result.data.start) {
	        delete result.data.start;
	      }
	    }
	    if (authData.refresh_token !== "hook") {
	      result.auth = authData.access_token;
	    }
	    result.start = start;
	    return result;
	  }
	  /**
	   * Makes the function name safe and adds json format
	   *
	   * @param method
	   * @private
	   */
	  #prepareMethod(method) {
	    return `${encodeURIComponent(method)}.json`;
	  }
	}

	class AbstractB24 {
	  static batchSize = 50;
	  _isInit = false;
	  _http = null;
	  _logger = null;
	  // region Init ////
	  constructor() {
	    this._isInit = false;
	  }
	  /**
	   * @inheritDoc
	   */
	  get isInit() {
	    return this._isInit;
	  }
	  async init() {
	    this._isInit = true;
	    return Promise.resolve();
	  }
	  destroy() {
	  }
	  setLogger(logger) {
	    this._logger = logger;
	    this.getHttpClient().setLogger(this.getLogger());
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  /**
	   * @inheritDoc
	   */
	  callMethod(method, params, start) {
	    return this.getHttpClient().call(
	      method,
	      params || {},
	      start || 0
	    );
	  }
	  /**
	   * @inheritDoc
	   */
	  async callListMethod(method, params = {}, progress = null, customKeyForResult = null) {
	    const result = new Result();
	    if (Type.isFunction(progress) && null !== progress) {
	      progress(0);
	    }
	    return this.callMethod(
	      method,
	      params,
	      0
	    ).then(async (response) => {
	      let list = [];
	      let resultData;
	      if (null !== customKeyForResult) {
	        resultData = response.getData().result[customKeyForResult];
	      } else {
	        resultData = response.getData().result;
	      }
	      list = list.concat(resultData);
	      if (response.isMore()) {
	        let responseLoop = response;
	        while (true) {
	          responseLoop = await responseLoop.getNext(this.getHttpClient());
	          if (responseLoop === false) {
	            break;
	          }
	          let resultData2 = void 0;
	          if (null !== customKeyForResult) {
	            resultData2 = responseLoop.getData().result[customKeyForResult];
	          } else {
	            resultData2 = responseLoop.getData().result;
	          }
	          list = list.concat(resultData2);
	          if (!!progress) {
	            const total = responseLoop.getTotal();
	            progress(total > 0 ? Math.round(100 * list.length / total) : 100);
	          }
	        }
	      }
	      result.setData(list);
	      if (!!progress) {
	        progress(100);
	      }
	      return Promise.resolve(result);
	    });
	  }
	  /**
	   * @inheritDoc
	   */
	  async *fetchListMethod(method, params = {}, idKey = "ID", customKeyForResult = null) {
	    params.order = params.order || {};
	    params.filter = params.filter || {};
	    params.start = -1;
	    let moreIdKey = `>${idKey}`;
	    params.order[idKey] = "ASC";
	    params.filter[moreIdKey] = 0;
	    do {
	      let result = await this.callMethod(method, params, params.start);
	      let data = void 0;
	      if (Type.isNull(customKeyForResult) && null !== customKeyForResult) {
	        data = result.getData().result[customKeyForResult];
	      } else {
	        data = result.getData().result;
	      }
	      if (data.length === 0) {
	        break;
	      }
	      yield data;
	      if (data.length < AbstractB24.batchSize) {
	        break;
	      }
	      const value = data[data.length - 1];
	      if (value && idKey in value) {
	        params.filter[moreIdKey] = value[idKey];
	      }
	    } while (true);
	  }
	  /**
	   * @inheritDoc
	   */
	  async callBatch(calls, isHaltOnError = true) {
	    return this.getHttpClient().batch(
	      calls,
	      isHaltOnError
	    );
	  }
	  chunkArray(array, chunkSize = 50) {
	    const result = [];
	    for (let i = 0; i < array.length; i += chunkSize) {
	      const chunk = array.slice(i, i + chunkSize);
	      result.push(chunk);
	    }
	    return result;
	  }
	  /**
	   * @inheritDoc
	   */
	  async callBatchByChunk(calls, isHaltOnError = true) {
	    const result = new Result();
	    const data = [];
	    const chunks = this.chunkArray(calls, AbstractB24.batchSize);
	    try {
	      for (const chunkRequest of chunks) {
	        const response = await this.callBatch(chunkRequest, isHaltOnError);
	        data.push(...response.getData());
	      }
	    } catch (error) {
	      return Promise.reject(error);
	    }
	    return Promise.resolve(result.setData(data));
	  }
	  // endregion ////
	  // region Tools ////
	  /**
	   * @inheritDoc
	   */
	  getHttpClient() {
	    if (!this.isInit || null === this._http) {
	      throw new Error(`Http not init`);
	    }
	    return this._http;
	  }
	  /**
	   * Returns settings for http connection
	   * @protected
	   */
	  _getHttpOptions() {
	    return null;
	  }
	  /**
	   * Generates an object not initialized error
	   * @protected
	   */
	  _ensureInitialized() {
	    if (!this._isInit) {
	      throw new Error("B24 not initialized");
	    }
	  }
	  // endregion ////
	}

	var B24LangList = /* @__PURE__ */ ((B24LangList2) => {
	  B24LangList2["en"] = "en";
	  B24LangList2["de"] = "de";
	  B24LangList2["la"] = "la";
	  B24LangList2["br"] = "br";
	  B24LangList2["fr"] = "fr";
	  B24LangList2["it"] = "it";
	  B24LangList2["pl"] = "pl";
	  B24LangList2["ru"] = "ru";
	  B24LangList2["ua"] = "ua";
	  B24LangList2["tr"] = "tr";
	  B24LangList2["sc"] = "sc";
	  B24LangList2["tc"] = "tc";
	  B24LangList2["ja"] = "ja";
	  B24LangList2["vn"] = "vn";
	  B24LangList2["id"] = "id";
	  B24LangList2["ms"] = "ms";
	  B24LangList2["th"] = "th";
	  B24LangList2["ar"] = "ar";
	  return B24LangList2;
	})(B24LangList || {});

	const useScrollSize = () => {
	  return {
	    scrollWidth: Math.max(
	      document.documentElement.scrollWidth,
	      document.documentElement.offsetWidth
	    ),
	    scrollHeight: Math.max(
	      document.documentElement.scrollHeight,
	      document.documentElement.offsetHeight
	    )
	  };
	};

	class FormatterNumbers {
	  static isInternalConstructing = false;
	  static instance = null;
	  _defLocale = null;
	  constructor() {
	    if (!FormatterNumbers.isInternalConstructing) {
	      throw new TypeError("FormatterNumber is not constructable");
	    }
	    FormatterNumbers.isInternalConstructing = false;
	  }
	  /**
	   * @return FormatterNumbers
	   */
	  static getInstance() {
	    if (!FormatterNumbers.instance) {
	      FormatterNumbers.isInternalConstructing = true;
	      FormatterNumbers.instance = new FormatterNumbers();
	    }
	    return FormatterNumbers.instance;
	  }
	  setDefLocale(locale) {
	    this._defLocale = locale;
	  }
	  format(value, locale) {
	    let formatter;
	    if (typeof locale === "undefined" || !Type.isStringFilled(locale)) {
	      locale = Type.isStringFilled(this._defLocale) ? this._defLocale || "en" : navigator?.language;
	    }
	    if (Number.isInteger(value)) {
	      formatter = new Intl.NumberFormat(
	        locale,
	        {
	          minimumFractionDigits: 0,
	          maximumFractionDigits: 0
	        }
	      );
	    } else {
	      formatter = new Intl.NumberFormat(
	        locale,
	        {
	          minimumFractionDigits: 2,
	          maximumFractionDigits: 2
	        }
	      );
	    }
	    let result = formatter.format(value);
	    if (locale.includes("ru")) {
	      result = result.replace(",", ".");
	    }
	    return result;
	  }
	}

	class IbanSpecification {
	  /**
	   * the code of the country
	   */
	  countryCode;
	  /**
	   * the length of the IBAN
	   */
	  length;
	  /**
	   * the structure of the underlying BBAN (for validation and formatting)
	   */
	  structure;
	  /**
	   * an example valid IBAN
	   */
	  example;
	  _cachedRegex = null;
	  constructor(countryCode, length, structure, example) {
	    this.countryCode = countryCode;
	    this.length = length;
	    this.structure = structure;
	    this.example = example;
	  }
	  /**
	   * Check if the passed iban is valid according to this specification.
	   *
	   * @param {String} iban the iban to validate
	   * @returns {boolean} true if valid, false otherwise
	   */
	  isValid(iban) {
	    return this.length === iban.length && this.countryCode === iban.slice(0, 2) && this._regex().test(iban.slice(4)) && this._iso7064Mod9710(this._iso13616Prepare(iban)) == 1;
	  }
	  /**
	   * Convert the passed IBAN to a country-specific BBAN.
	   *
	   * @param iban the IBAN to convert
	   * @param separator the separator to use between BBAN blocks
	   * @returns {string} the BBAN
	   */
	  toBBAN(iban, separator) {
	    return (this._regex().exec(iban.slice(4) || "") || []).slice(1).join(separator);
	  }
	  /**
	   * Convert the passed BBAN to an IBAN for this country specification.
	   * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
	   * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
	   *
	   * @param bban the BBAN to convert to IBAN
	   * @returns {string} the IBAN
	   */
	  fromBBAN(bban) {
	    if (!this.isValidBBAN(bban)) {
	      throw new Error("Invalid BBAN");
	    }
	    const remainder = this._iso7064Mod9710(
	      this._iso13616Prepare(
	        this.countryCode + "00" + bban
	      )
	    );
	    const checkDigit = ("0" + (98 - remainder)).slice(-2);
	    return this.countryCode + checkDigit + bban;
	  }
	  /**
	   * Check of the passed BBAN is valid.
	   * This function only checks the format of the BBAN (length and matching the letetr/number specs) but does not
	   * verify the check digit.
	   *
	   * @param bban the BBAN to validate
	   * @returns {boolean} true if the passed bban is a valid BBAN according to this specification, false otherwise
	   */
	  isValidBBAN(bban) {
	    return this.length - 4 === bban.length && this._regex().test(bban);
	  }
	  /**
	   * Lazy-loaded regex (parse the structure and construct the regular expression the first time we need it for validation)
	   */
	  _regex() {
	    if (null === this._cachedRegex) {
	      this._cachedRegex = this._parseStructure(this.structure);
	    }
	    return this._cachedRegex;
	  }
	  /**
	   * Parse the BBAN structure used to configure each IBAN Specification and returns a matching regular expression.
	   * A structure is composed of blocks of 3 characters (one letter and 2 digits). Each block represents
	   * a logical group in the typical representation of the BBAN. For each group, the letter indicates which characters
	   * are allowed in this group and the following 2-digits number tells the length of the group.
	   *
	   * @param {string} structure the structure to parse
	   * @returns {RegExp}
	   */
	  _parseStructure(structure) {
	    const regex = (structure.match(/(.{3})/g) || []).map((block) => {
	      let format;
	      const pattern = block.slice(0, 1);
	      const repeats = parseInt(block.slice(1), 10);
	      switch (pattern) {
	        case "A":
	          format = "0-9A-Za-z";
	          break;
	        case "B":
	          format = "0-9A-Z";
	          break;
	        case "C":
	          format = "A-Za-z";
	          break;
	        case "F":
	          format = "0-9";
	          break;
	        case "L":
	          format = "a-z";
	          break;
	        case "U":
	          format = "A-Z";
	          break;
	        case "W":
	          format = "0-9a-z";
	          break;
	      }
	      return "([" + format + "]{" + repeats + "})";
	    });
	    return new RegExp("^" + regex.join("") + "$");
	  }
	  /**
	   * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
	   * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
	   *
	   * @param {string} iban the IBAN
	   * @returns {string} the prepared IBAN
	   */
	  _iso13616Prepare(iban) {
	    const A = "A".charCodeAt(0);
	    const Z = "Z".charCodeAt(0);
	    iban = iban.toUpperCase();
	    iban = iban.substring(4) + iban.substring(0, 4);
	    return iban.split("").map((n) => {
	      const code = n.charCodeAt(0);
	      if (code >= A && code <= Z) {
	        return (code - A + 10).toString();
	      } else {
	        return n;
	      }
	    }).join("");
	  }
	  /**
	   * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
	   *
	   * @param iban
	   * @returns {number}
	   */
	  _iso7064Mod9710(iban) {
	    let remainder = iban;
	    let block;
	    while (remainder.length > 2) {
	      block = remainder.slice(0, 9);
	      remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
	    }
	    return parseInt(remainder, 10) % 97;
	  }
	}
	class FormatterIban {
	  static isInternalConstructing = false;
	  static instance = null;
	  _countries;
	  // region Init ////
	  constructor() {
	    if (!FormatterIban.isInternalConstructing) {
	      throw new TypeError("FormatterIban is not constructable");
	    }
	    FormatterIban.isInternalConstructing = false;
	    this._countries = /* @__PURE__ */ new Map();
	  }
	  /**
	   * @return FormatterIban
	   */
	  static getInstance() {
	    if (!FormatterIban.instance) {
	      FormatterIban.isInternalConstructing = true;
	      FormatterIban.instance = new FormatterIban();
	    }
	    return FormatterIban.instance;
	  }
	  addSpecification(IBAN) {
	    this._countries.set(
	      IBAN.countryCode,
	      IBAN
	    );
	  }
	  // endregion ////
	  // region IBAN ////
	  /**
	   * Check if an IBAN is valid.
	   *
	   * @param {String} iban the IBAN to validate.
	   * @returns {boolean} true if the passed IBAN is valid, false otherwise
	   */
	  isValid(iban) {
	    if (!this._isString(iban)) {
	      return false;
	    }
	    iban = this.electronicFormat(iban);
	    const countryCode = iban.slice(0, 2);
	    if (!this._countries.has(countryCode)) {
	      throw new Error(`No country with code ${countryCode}`);
	    }
	    let countryStructure = this._countries.get(countryCode);
	    return !!countryStructure && countryStructure.isValid(iban);
	  }
	  printFormat(iban, separator) {
	    if (typeof separator == "undefined") {
	      separator = " ";
	    }
	    const EVERY_FOUR_CHARS = /(.{4})(?!$)/g;
	    return this.electronicFormat(iban).replace(EVERY_FOUR_CHARS, "$1" + separator);
	  }
	  electronicFormat(iban) {
	    const NON_ALPHANUM = /[^a-zA-Z0-9]/g;
	    return iban.replace(NON_ALPHANUM, "").toUpperCase();
	  }
	  // endregion ////
	  // region BBAN ////
	  /**
	   * Convert an IBAN to a BBAN.
	   *
	   * @param iban
	   * @param {String} [separator] the separator to use between the blocks of the BBAN, defaults to ' '
	   * @returns {string|*}
	   */
	  toBBAN(iban, separator) {
	    if (typeof separator == "undefined") {
	      separator = " ";
	    }
	    iban = this.electronicFormat(iban);
	    const countryCode = iban.slice(0, 2);
	    if (!this._countries.has(countryCode)) {
	      throw new Error(`No country with code ${countryCode}`);
	    }
	    let countryStructure = this._countries.get(countryCode);
	    if (!countryStructure) {
	      throw new Error(`No country with code ${countryCode}`);
	    }
	    return countryStructure.toBBAN(
	      iban,
	      separator
	    );
	  }
	  /**
	   * Convert the passed BBAN to an IBAN for this country specification.
	   * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
	   * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
	   *
	   * @param countryCode the country of the BBAN
	   * @param bban the BBAN to convert to IBAN
	   * @returns {string} the IBAN
	   */
	  fromBBAN(countryCode, bban) {
	    if (!this._countries.has(countryCode)) {
	      throw new Error(`No country with code ${countryCode}`);
	    }
	    let countryStructure = this._countries.get(countryCode);
	    if (!countryStructure) {
	      throw new Error(`No country with code ${countryCode}`);
	    }
	    return countryStructure.fromBBAN(
	      this.electronicFormat(bban)
	    );
	  }
	  /**
	   * Check the validity of the passed BBAN.
	   *
	   * @param countryCode the country of the BBAN
	   * @param bban the BBAN to check the validity of
	   */
	  isValidBBAN(countryCode, bban) {
	    if (!this._isString(bban)) {
	      return false;
	    }
	    if (!this._countries.has(countryCode)) {
	      throw new Error(`No country with code ${countryCode}`);
	    }
	    let countryStructure = this._countries.get(countryCode);
	    return !!countryStructure && countryStructure.isValidBBAN(
	      this.electronicFormat(bban)
	    );
	  }
	  // endregion ////
	  // region Tools ////
	  _isString(value) {
	    return typeof value == "string" || value instanceof String;
	  }
	  // endregion ////
	}

	const useFormatter = () => {
	  const formatterNumber = FormatterNumbers.getInstance();
	  const formatterIban = FormatterIban.getInstance();
	  formatterIban.addSpecification(new IbanSpecification("AD", 24, "F04F04A12", "AD1200012030200359100100"));
	  formatterIban.addSpecification(new IbanSpecification("AE", 23, "F03F16", "AE070331234567890123456"));
	  formatterIban.addSpecification(new IbanSpecification("AL", 28, "F08A16", "AL47212110090000000235698741"));
	  formatterIban.addSpecification(new IbanSpecification("AT", 20, "F05F11", "AT611904300234573201"));
	  formatterIban.addSpecification(new IbanSpecification("AZ", 28, "U04A20", "AZ21NABZ00000000137010001944"));
	  formatterIban.addSpecification(new IbanSpecification("BA", 20, "F03F03F08F02", "BA391290079401028494"));
	  formatterIban.addSpecification(new IbanSpecification("BE", 16, "F03F07F02", "BE68539007547034"));
	  formatterIban.addSpecification(new IbanSpecification("BG", 22, "U04F04F02A08", "BG80BNBG96611020345678"));
	  formatterIban.addSpecification(new IbanSpecification("BH", 22, "U04A14", "BH67BMAG00001299123456"));
	  formatterIban.addSpecification(new IbanSpecification("BR", 29, "F08F05F10U01A01", "BR9700360305000010009795493P1"));
	  formatterIban.addSpecification(new IbanSpecification("BY", 28, "A04F04A16", "BY13NBRB3600900000002Z00AB00"));
	  formatterIban.addSpecification(new IbanSpecification("CH", 21, "F05A12", "CH9300762011623852957"));
	  formatterIban.addSpecification(new IbanSpecification("CR", 22, "F04F14", "CR72012300000171549015"));
	  formatterIban.addSpecification(new IbanSpecification("CY", 28, "F03F05A16", "CY17002001280000001200527600"));
	  formatterIban.addSpecification(new IbanSpecification("CZ", 24, "F04F06F10", "CZ6508000000192000145399"));
	  formatterIban.addSpecification(new IbanSpecification("DE", 22, "F08F10", "DE89370400440532013000"));
	  formatterIban.addSpecification(new IbanSpecification("DK", 18, "F04F09F01", "DK5000400440116243"));
	  formatterIban.addSpecification(new IbanSpecification("DO", 28, "U04F20", "DO28BAGR00000001212453611324"));
	  formatterIban.addSpecification(new IbanSpecification("EE", 20, "F02F02F11F01", "EE382200221020145685"));
	  formatterIban.addSpecification(new IbanSpecification("EG", 29, "F04F04F17", "EG800002000156789012345180002"));
	  formatterIban.addSpecification(new IbanSpecification("ES", 24, "F04F04F01F01F10", "ES9121000418450200051332"));
	  formatterIban.addSpecification(new IbanSpecification("FI", 18, "F06F07F01", "FI2112345600000785"));
	  formatterIban.addSpecification(new IbanSpecification("FO", 18, "F04F09F01", "FO6264600001631634"));
	  formatterIban.addSpecification(new IbanSpecification("FR", 27, "F05F05A11F02", "FR1420041010050500013M02606"));
	  formatterIban.addSpecification(new IbanSpecification("GB", 22, "U04F06F08", "GB29NWBK60161331926819"));
	  formatterIban.addSpecification(new IbanSpecification("GE", 22, "U02F16", "GE29NB0000000101904917"));
	  formatterIban.addSpecification(new IbanSpecification("GI", 23, "U04A15", "GI75NWBK000000007099453"));
	  formatterIban.addSpecification(new IbanSpecification("GL", 18, "F04F09F01", "GL8964710001000206"));
	  formatterIban.addSpecification(new IbanSpecification("GR", 27, "F03F04A16", "GR1601101250000000012300695"));
	  formatterIban.addSpecification(new IbanSpecification("GT", 28, "A04A20", "GT82TRAJ01020000001210029690"));
	  formatterIban.addSpecification(new IbanSpecification("HR", 21, "F07F10", "HR1210010051863000160"));
	  formatterIban.addSpecification(new IbanSpecification("HU", 28, "F03F04F01F15F01", "HU42117730161111101800000000"));
	  formatterIban.addSpecification(new IbanSpecification("IE", 22, "U04F06F08", "IE29AIBK93115212345678"));
	  formatterIban.addSpecification(new IbanSpecification("IL", 23, "F03F03F13", "IL620108000000099999999"));
	  formatterIban.addSpecification(new IbanSpecification("IS", 26, "F04F02F06F10", "IS140159260076545510730339"));
	  formatterIban.addSpecification(new IbanSpecification("IT", 27, "U01F05F05A12", "IT60X0542811101000000123456"));
	  formatterIban.addSpecification(new IbanSpecification("IQ", 23, "U04F03A12", "IQ98NBIQ850123456789012"));
	  formatterIban.addSpecification(new IbanSpecification("JO", 30, "A04F22", "JO15AAAA1234567890123456789012"));
	  formatterIban.addSpecification(new IbanSpecification("KW", 30, "U04A22", "KW81CBKU0000000000001234560101"));
	  formatterIban.addSpecification(new IbanSpecification("KZ", 20, "F03A13", "KZ86125KZT5004100100"));
	  formatterIban.addSpecification(new IbanSpecification("LB", 28, "F04A20", "LB62099900000001001901229114"));
	  formatterIban.addSpecification(new IbanSpecification("LC", 32, "U04F24", "LC07HEMM000100010012001200013015"));
	  formatterIban.addSpecification(new IbanSpecification("LI", 21, "F05A12", "LI21088100002324013AA"));
	  formatterIban.addSpecification(new IbanSpecification("LT", 20, "F05F11", "LT121000011101001000"));
	  formatterIban.addSpecification(new IbanSpecification("LU", 20, "F03A13", "LU280019400644750000"));
	  formatterIban.addSpecification(new IbanSpecification("LV", 21, "U04A13", "LV80BANK0000435195001"));
	  formatterIban.addSpecification(new IbanSpecification("MC", 27, "F05F05A11F02", "MC5811222000010123456789030"));
	  formatterIban.addSpecification(new IbanSpecification("MD", 24, "U02A18", "MD24AG000225100013104168"));
	  formatterIban.addSpecification(new IbanSpecification("ME", 22, "F03F13F02", "ME25505000012345678951"));
	  formatterIban.addSpecification(new IbanSpecification("MK", 19, "F03A10F02", "MK07250120000058984"));
	  formatterIban.addSpecification(new IbanSpecification("MR", 27, "F05F05F11F02", "MR1300020001010000123456753"));
	  formatterIban.addSpecification(new IbanSpecification("MT", 31, "U04F05A18", "MT84MALT011000012345MTLCAST001S"));
	  formatterIban.addSpecification(new IbanSpecification("MU", 30, "U04F02F02F12F03U03", "MU17BOMM0101101030300200000MUR"));
	  formatterIban.addSpecification(new IbanSpecification("NL", 18, "U04F10", "NL91ABNA0417164300"));
	  formatterIban.addSpecification(new IbanSpecification("NO", 15, "F04F06F01", "NO9386011117947"));
	  formatterIban.addSpecification(new IbanSpecification("PK", 24, "U04A16", "PK36SCBL0000001123456702"));
	  formatterIban.addSpecification(new IbanSpecification("PL", 28, "F08F16", "PL61109010140000071219812874"));
	  formatterIban.addSpecification(new IbanSpecification("PS", 29, "U04A21", "PS92PALS000000000400123456702"));
	  formatterIban.addSpecification(new IbanSpecification("PT", 25, "F04F04F11F02", "PT50000201231234567890154"));
	  formatterIban.addSpecification(new IbanSpecification("QA", 29, "U04A21", "QA30AAAA123456789012345678901"));
	  formatterIban.addSpecification(new IbanSpecification("RO", 24, "U04A16", "RO49AAAA1B31007593840000"));
	  formatterIban.addSpecification(new IbanSpecification("RS", 22, "F03F13F02", "RS35260005601001611379"));
	  formatterIban.addSpecification(new IbanSpecification("SA", 24, "F02A18", "SA0380000000608010167519"));
	  formatterIban.addSpecification(new IbanSpecification("SC", 31, "U04F04F16U03", "SC18SSCB11010000000000001497USD"));
	  formatterIban.addSpecification(new IbanSpecification("SE", 24, "F03F16F01", "SE4550000000058398257466"));
	  formatterIban.addSpecification(new IbanSpecification("SI", 19, "F05F08F02", "SI56263300012039086"));
	  formatterIban.addSpecification(new IbanSpecification("SK", 24, "F04F06F10", "SK3112000000198742637541"));
	  formatterIban.addSpecification(new IbanSpecification("SM", 27, "U01F05F05A12", "SM86U0322509800000000270100"));
	  formatterIban.addSpecification(new IbanSpecification("ST", 25, "F08F11F02", "ST68000100010051845310112"));
	  formatterIban.addSpecification(new IbanSpecification("SV", 28, "U04F20", "SV62CENR00000000000000700025"));
	  formatterIban.addSpecification(new IbanSpecification("TL", 23, "F03F14F02", "TL380080012345678910157"));
	  formatterIban.addSpecification(new IbanSpecification("TN", 24, "F02F03F13F02", "TN5910006035183598478831"));
	  formatterIban.addSpecification(new IbanSpecification("TR", 26, "F05F01A16", "TR330006100519786457841326"));
	  formatterIban.addSpecification(new IbanSpecification("UA", 29, "F25", "UA511234567890123456789012345"));
	  formatterIban.addSpecification(new IbanSpecification("VA", 22, "F18", "VA59001123000012345678"));
	  formatterIban.addSpecification(new IbanSpecification("VG", 24, "U04F16", "VG96VPVG0000012345678901"));
	  formatterIban.addSpecification(new IbanSpecification("XK", 20, "F04F10F02", "XK051212012345678906"));
	  formatterIban.addSpecification(new IbanSpecification("AO", 25, "F21", "AO69123456789012345678901"));
	  formatterIban.addSpecification(new IbanSpecification("BF", 27, "F23", "BF2312345678901234567890123"));
	  formatterIban.addSpecification(new IbanSpecification("BI", 16, "F12", "BI41123456789012"));
	  formatterIban.addSpecification(new IbanSpecification("BJ", 28, "F24", "BJ39123456789012345678901234"));
	  formatterIban.addSpecification(new IbanSpecification("CI", 28, "U02F22", "CI70CI1234567890123456789012"));
	  formatterIban.addSpecification(new IbanSpecification("CM", 27, "F23", "CM9012345678901234567890123"));
	  formatterIban.addSpecification(new IbanSpecification("CV", 25, "F21", "CV30123456789012345678901"));
	  formatterIban.addSpecification(new IbanSpecification("DZ", 24, "F20", "DZ8612345678901234567890"));
	  formatterIban.addSpecification(new IbanSpecification("IR", 26, "F22", "IR861234568790123456789012"));
	  formatterIban.addSpecification(new IbanSpecification("MG", 27, "F23", "MG1812345678901234567890123"));
	  formatterIban.addSpecification(new IbanSpecification("ML", 28, "U01F23", "ML15A12345678901234567890123"));
	  formatterIban.addSpecification(new IbanSpecification("MZ", 25, "F21", "MZ25123456789012345678901"));
	  formatterIban.addSpecification(new IbanSpecification("SN", 28, "U01F23", "SN52A12345678901234567890123"));
	  formatterIban.addSpecification(new IbanSpecification("GF", 27, "F05F05A11F02", "GF121234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("GP", 27, "F05F05A11F02", "GP791234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("MQ", 27, "F05F05A11F02", "MQ221234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("RE", 27, "F05F05A11F02", "RE131234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("PF", 27, "F05F05A11F02", "PF281234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("TF", 27, "F05F05A11F02", "TF891234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("YT", 27, "F05F05A11F02", "YT021234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("NC", 27, "F05F05A11F02", "NC551234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("BL", 27, "F05F05A11F02", "BL391234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("MF", 27, "F05F05A11F02", "MF551234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("PM", 27, "F05F05A11F02", "PM071234512345123456789AB13"));
	  formatterIban.addSpecification(new IbanSpecification("WF", 27, "F05F05A11F02", "WF621234512345123456789AB13"));
	  return {
	    formatterNumber,
	    formatterIban
	  };
	};

	class AuthHookManager {
	  #b24HookParams;
	  constructor(b24HookParams) {
	    this.#b24HookParams = Object.freeze(
	      Object.assign(
	        {},
	        b24HookParams
	      )
	    );
	  }
	  /**
	   * @see Http.#prepareParams
	   */
	  getAuthData() {
	    const domain = this.#b24HookParams.b24Url.replaceAll("https://", "").replaceAll("http://", "").replace(/:(80|443)$/, "");
	    return {
	      access_token: this.#b24HookParams.secret,
	      refresh_token: "hook",
	      expires_in: 0,
	      domain,
	      member_id: domain
	    };
	  }
	  refreshAuth() {
	    return Promise.resolve(this.getAuthData());
	  }
	  getUniq(prefix) {
	    const authData = this.getAuthData();
	    if (authData === false) {
	      throw new Error("AuthData not init");
	    }
	    return [
	      prefix,
	      authData.member_id
	    ].join("_");
	  }
	  /**
	   * Get the account address BX24 ( https://name.bitrix24.com )
	   */
	  getTargetOrigin() {
	    return `${this.#b24HookParams.b24Url}`;
	  }
	  /**
	   * Get the account address BX24 with Path ( https://name.bitrix24.com/rest/1/xxxxx )
	   */
	  getTargetOriginWithPath() {
	    return `${this.#b24HookParams.b24Url}/rest/${this.#b24HookParams.userId}/${this.#b24HookParams.secret}`;
	  }
	  /**
	   * We believe that hooks are created only by the admin
	   */
	  get isAdmin() {
	    return true;
	  }
	}

	class B24Hook extends AbstractB24 {
	  #authHookManager;
	  // region Init ////
	  constructor(b24HookParams) {
	    super();
	    this.#authHookManager = new AuthHookManager(
	      b24HookParams
	    );
	    this._http = new Http(
	      this.#authHookManager.getTargetOriginWithPath(),
	      this.#authHookManager,
	      this._getHttpOptions()
	    );
	    this._isInit = true;
	  }
	  setLogger(logger) {
	    super.setLogger(logger);
	  }
	  // endregion ////
	  get auth() {
	    return this.#authHookManager;
	  }
	  // region Core ////
	  // endregion ////
	  // region Get ////
	  /**
	   * Get the account address BX24 ( https://name.bitrix24.com )
	   */
	  getTargetOrigin() {
	    this._ensureInitialized();
	    return this.#authHookManager.getTargetOrigin();
	  }
	  /**
	   * Get the account address BX24 with Path ( https://name.bitrix24.com/rest/1/xxxxx )
	   */
	  getTargetOriginWithPath() {
	    this._ensureInitialized();
	    return this.#authHookManager.getTargetOriginWithPath();
	  }
	  // endregion ////
	  // region Tools ////
	  // endregion ////
	}

	var MessageCommands = /* @__PURE__ */ ((MessageCommands2) => {
	  MessageCommands2["getInitData"] = "getInitData";
	  MessageCommands2["setInstallFinish"] = "setInstallFinish";
	  MessageCommands2["setInstall"] = "setInstall";
	  MessageCommands2["refreshAuth"] = "refreshAuth";
	  MessageCommands2["setAppOption"] = "setAppOption";
	  MessageCommands2["setUserOption"] = "setUserOption";
	  MessageCommands2["resizeWindow"] = "resizeWindow";
	  MessageCommands2["reloadWindow"] = "reloadWindow";
	  MessageCommands2["setTitle"] = "setTitle";
	  MessageCommands2["setScroll"] = "setScroll";
	  MessageCommands2["openApplication"] = "openApplication";
	  MessageCommands2["closeApplication"] = "closeApplication";
	  MessageCommands2["openPath"] = "openPath";
	  MessageCommands2["imCallTo"] = "imCallTo";
	  MessageCommands2["imPhoneTo"] = "imPhoneTo";
	  MessageCommands2["imOpenMessenger"] = "imOpenMessenger";
	  MessageCommands2["imOpenHistory"] = "imOpenHistory";
	  MessageCommands2["selectUser"] = "selectUser";
	  MessageCommands2["selectAccess"] = "selectAccess";
	  MessageCommands2["selectCRM"] = "selectCRM";
	  MessageCommands2["showAppForm"] = "showAppForm";
	  return MessageCommands2;
	})(MessageCommands || {});

	class MessageManager {
	  #appFrame;
	  #callbackPromises;
	  _logger = null;
	  runCallbackHandler;
	  constructor(appFrame) {
	    this.#appFrame = appFrame;
	    this.#callbackPromises = /* @__PURE__ */ new Map();
	    this.runCallbackHandler = this._runCallback.bind(this);
	  }
	  setLogger(logger) {
	    this._logger = logger;
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  // region Events ////
	  /**
	   * Subscribe to the onMessage event of the parent window
	   */
	  subscribe() {
	    window.addEventListener(
	      "message",
	      this.runCallbackHandler
	    );
	  }
	  /**
	   * Unsubscribe from the onMessage event of the parent window
	   */
	  unsubscribe() {
	    window.removeEventListener(
	      "message",
	      this.runCallbackHandler
	    );
	  }
	  // endregion ////
	  /**
	   * Send message to parent window
	   * The answer (if) we will get in _runCallback
	   *
	   * @param command
	   * @param params
	   */
	  async send(command, params = null) {
	    return new Promise((resolve, reject) => {
	      let cmd;
	      const promiseHandler = { resolve, reject, timeoutId: null };
	      const keyPromise = this.#setCallbackPromise(promiseHandler);
	      if (command.toString().indexOf(":") >= 0) {
	        cmd = {
	          method: command.toString(),
	          params: !!params ? params : "",
	          callback: keyPromise,
	          appSid: this.#appFrame.getAppSid()
	        };
	      } else {
	        cmd = command.toString();
	        let listParams = [
	          !!params ? JSON.stringify(params) : null,
	          keyPromise,
	          this.#appFrame.getAppSid()
	        ];
	        cmd += ":" + listParams.filter(Boolean).join(":");
	      }
	      this.getLogger().log(`send to ${this.#appFrame.getTargetOrigin()}`, { cmd });
	      parent.postMessage(
	        cmd,
	        this.#appFrame.getTargetOrigin()
	      );
	      if (params?.isSafely) {
	        this.#callbackPromises.get(keyPromise).timeoutId = window.setTimeout(
	          () => {
	            if (this.#callbackPromises.has(keyPromise)) {
	              this.getLogger().warn(
	                `Action ${command.toString()} stop by timeout`
	              );
	              this.#callbackPromises.delete(keyPromise);
	              resolve({ isSafely: true });
	            }
	          },
	          parseInt(String(params?.safelyTime || 900))
	        );
	      }
	    });
	  }
	  /**
	   * Fulfilling a promise based on messages from the parent window
	   *
	   * @param event
	   * @private
	   */
	  _runCallback(event) {
	    if (event.origin !== this.#appFrame.getTargetOrigin()) {
	      return;
	    }
	    if (!!event.data) {
	      this.getLogger().log(`get from ${event.origin}`, {
	        data: event.data
	      });
	      let tmp = event.data.split(":");
	      const cmd = {
	        id: tmp[0],
	        args: tmp.slice(1).join(":")
	      };
	      if (!!cmd.args) {
	        cmd.args = JSON.parse(cmd.args);
	      }
	      if (this.#callbackPromises.has(cmd.id)) {
	        const promise = this.#callbackPromises.get(cmd.id);
	        if (!!promise.timeoutId) {
	          clearTimeout(promise.timeoutId);
	        }
	        this.#callbackPromises.delete(cmd.id);
	        promise.resolve(cmd.args);
	      }
	    }
	  }
	  /**
	   * Storing a promise for a message from the parent window
	   *
	   * @param promiseHandler
	   * @private
	   *
	   * @memo We don't use Symbol here, because we need to pass it to the parent and then find and restore it.
	   */
	  #setCallbackPromise(promiseHandler) {
	    let key = Text.getUniqId();
	    this.#callbackPromises.set(
	      key,
	      promiseHandler
	    );
	    return key;
	  }
	}

	class AppFrame {
	  #domain = "";
	  #protocol = true;
	  #appSid = null;
	  #path = null;
	  #lang = null;
	  constructor(queryParams) {
	    if (queryParams.DOMAIN) {
	      this.#domain = queryParams.DOMAIN;
	      this.#domain = this.#domain.replace(/:(80|443)$/, "");
	    }
	    this.#protocol = queryParams.PROTOCOL === true;
	    if (queryParams.LANG) {
	      this.#lang = queryParams.LANG;
	    }
	    if (queryParams.APP_SID) {
	      this.#appSid = queryParams.APP_SID;
	    }
	  }
	  /**
	   * Initializes the data received from the parent window message.
	   * @param data
	   */
	  initData(data) {
	    if (!this.#domain) {
	      this.#domain = data.DOMAIN;
	    }
	    if (!this.#path) {
	      this.#path = data.PATH;
	    }
	    if (!this.#lang) {
	      this.#lang = data.LANG;
	    }
	    this.#protocol = parseInt(data.PROTOCOL) === 1;
	    this.#domain = this.#domain.replace(/:(80|443)$/, "");
	    return this;
	  }
	  /**
	   * Returns the sid of the application relative to the parent window like this `9c33468728e1d2c8c97562475edfd96`
	   */
	  getAppSid() {
	    if (null === this.#appSid) {
	      throw new Error(`Not init appSid`);
	    }
	    return this.#appSid;
	  }
	  /**
	   * Get the account address BX24 ( https://name.bitrix24.com )
	   */
	  getTargetOrigin() {
	    return `${this.#protocol ? "https" : "http"}://${this.#domain}`;
	  }
	  /**
	   * Get the account address BX24 with Path ( https://name.bitrix24.com/rest )
	   */
	  getTargetOriginWithPath() {
	    return this.getTargetOrigin() + (this.#path ?? "");
	  }
	  /**
	   * Returns the localization of the B24 interface
	   * @return {B24LangList} - default B24LangList.en
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-get-lang.html
	   */
	  getLang() {
	    return this.#lang || B24LangList.en;
	  }
	}

	class AuthManager {
	  #accessToken = null;
	  #refreshId = null;
	  #authExpires = 0;
	  #memberId = null;
	  #isAdmin = false;
	  #appFrame;
	  #messageManager;
	  constructor(appFrame, messageManager) {
	    this.#appFrame = appFrame;
	    this.#messageManager = messageManager;
	  }
	  /**
	   * Initializes the data received from the parent window message.
	   * @param data
	   */
	  initData(data) {
	    if (!!data.AUTH_ID) {
	      this.#accessToken = data.AUTH_ID;
	      this.#refreshId = data.REFRESH_ID;
	      this.#authExpires = (/* @__PURE__ */ new Date()).valueOf() + parseInt(data.AUTH_EXPIRES) * 1e3;
	      this.#isAdmin = data.IS_ADMIN;
	      this.#memberId = data.MEMBER_ID || "";
	    }
	    return this;
	  }
	  /**
	   * Returns authorization data
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/system-functions/bx24-get-auth.html
	   */
	  getAuthData() {
	    return this.#authExpires > (/* @__PURE__ */ new Date()).valueOf() ? {
	      access_token: this.#accessToken,
	      refresh_token: this.#refreshId,
	      expires_in: this.#authExpires,
	      domain: this.#appFrame.getTargetOrigin(),
	      member_id: this.#memberId
	    } : false;
	  }
	  /**
	   * Updates authorization data through the parent window
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/system-functions/bx24-refresh-auth.html
	   */
	  async refreshAuth() {
	    return this.#messageManager.send(
	      MessageCommands.refreshAuth,
	      {}
	    ).then((data) => {
	      this.#accessToken = data.AUTH_ID;
	      this.#refreshId = data.REFRESH_ID;
	      this.#authExpires = (/* @__PURE__ */ new Date()).valueOf() + parseInt(data.AUTH_EXPIRES) * 1e3;
	      return Promise.resolve(
	        this.getAuthData()
	      );
	    });
	  }
	  getUniq(prefix) {
	    return [
	      prefix,
	      this.#memberId || ""
	    ].join("_");
	  }
	  /**
	   * Determines whether the current user has administrator rights
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-is-admin.html
	   */
	  get isAdmin() {
	    return this.#isAdmin;
	  }
	}

	class ParentManager {
	  #messageManager;
	  constructor(messageManager) {
	    this.#messageManager = messageManager;
	  }
	  /**
	   * The method closes the open modal window with the application
	   *
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-close-application.html
	   */
	  async closeApplication() {
	    return this.#messageManager.send(
	      MessageCommands.closeApplication,
	      {
	        /**
	         * @memo There is no point - everything will be closed and timeout will not be able to do anything
	         */
	        isSafely: false
	      }
	    );
	  }
	  /**
	   * Sets the size of the frame containing the application to the size of the frame's content.
	   *
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-fit-window.html
	   *
	   * @memo in certain situations it may not be executed (placement of the main window after installing the application), in this case isSafely mode will work
	   */
	  fitWindow() {
	    let width = "100%";
	    let height = this.getScrollSize().scrollHeight;
	    return this.#messageManager.send(
	      MessageCommands.resizeWindow,
	      {
	        width,
	        height,
	        isSafely: true
	      }
	    );
	  }
	  /**
	   * Sets the size of the frame containing the application to the size of the frame's content.
	   *
	   * @param {number} width
	   * @param {number} height
	   *
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-resize-window.html
	   *
	   * @memo in certain situations it may not be executed, in this case isSafely mode will be triggered
	   */
	  resizeWindow(width, height) {
	    if (width > 0 && height > 0) {
	      return this.#messageManager.send(
	        MessageCommands.resizeWindow,
	        {
	          width,
	          height,
	          isSafely: true
	        }
	      );
	    }
	    return Promise.reject(new Error(
	      `Wrong width:number = ${width} or height:number = ${height}`
	    ));
	  }
	  /**
	   * Automatically resize `document.body` of frame with application according to frame content dimensions
	   * If you pass appNode, the height will be calculated relative to it
	   *
	   * @param {HTMLElement|null} appNode
	   * @param {number} minHeight
	   * @param {number} minWidth
	   *
	   * @return {Promise<void>}
	   */
	  async resizeWindowAuto(appNode = null, minHeight = 0, minWidth = 0) {
	    const body = document.body;
	    let width = Math.max(
	      body.scrollWidth,
	      body.offsetWidth
	      //html.clientWidth,
	      //html.scrollWidth,
	      //html.offsetWidth
	    );
	    if (minWidth > 0) {
	      width = Math.max(minWidth, width);
	    }
	    let height = Math.max(
	      body.scrollHeight,
	      body.offsetHeight
	      //html.clientHeight,
	      //html.scrollHeight,
	      //html.offsetHeight
	    );
	    if (!!appNode) {
	      height = Math.max(
	        appNode.scrollHeight,
	        appNode.offsetHeight
	      );
	    }
	    if (minHeight > 0) {
	      height = Math.max(minHeight, height);
	    }
	    return this.resizeWindow(
	      width,
	      height
	    );
	  }
	  /**
	   * This function returns the inner dimensions of the application frame
	   *
	   * @return {Promise<{scrollWidth: number; scrollHeight: number}>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-get-scroll-size.html
	   */
	  getScrollSize() {
	    return useScrollSize();
	  }
	  /**
	   * Scrolls the parent window
	   *
	   * @param {number} scroll should specify the vertical scrollbar position (0 - scroll to the very top)
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-scroll-parent-window.html
	   */
	  async scrollParentWindow(scroll) {
	    if (!Number.isInteger(scroll)) {
	      return Promise.reject(new Error("Wrong scroll number"));
	    }
	    if (scroll < 0) {
	      scroll = 0;
	    }
	    return this.#messageManager.send(
	      MessageCommands.setScroll,
	      {
	        scroll,
	        isSafely: true
	      }
	    );
	  }
	  /**
	   * Reload the page with the application (the whole page, not just the frame).
	   *
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-reload-window.html
	   */
	  async reloadWindow() {
	    return this.#messageManager.send(
	      MessageCommands.reloadWindow,
	      {
	        isSafely: true
	      }
	    );
	  }
	  /**
	   * Set Page Title
	   *
	   * @param {string} title
	   *
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-set-title.html
	   */
	  async setTitle(title) {
	    return this.#messageManager.send(
	      MessageCommands.setTitle,
	      {
	        title: title.toString(),
	        isSafely: true
	      }
	    );
	  }
	  /**
	   * Initiates a call via internal communication
	   *
	   * @param {number} userId The identifier of the account user
	   * @param {boolean} isVideo true - video call, false - audio call. Optional parameter.
	   *
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-im-call-to.html
	   */
	  async imCallTo(userId, isVideo = true) {
	    return this.#messageManager.send(
	      MessageCommands.imCallTo,
	      {
	        userId,
	        video: isVideo,
	        isSafely: true
	      }
	    );
	  }
	  /**
	   * Makes a call to the phone number
	   *
	   * @param {string} phone Phone number. The number can be in the format: `+44 20 1234 5678` or `x (xxx) xxx-xx-xx`
	   *
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-im-phone-to.html
	   */
	  async imPhoneTo(phone) {
	    return this.#messageManager.send(
	      MessageCommands.imPhoneTo,
	      {
	        phone,
	        isSafely: true
	      }
	    );
	  }
	  /**
	   * Opens the messenger window
	   * userId or chatXXX - chat, where XXX is the chat identifier, which can simply be a number.
	   * sgXXX - group chat, where XXX is the social network group number (the chat must be enabled in this group).
	   *
	   * XXXX** - open line, where XXX is the code obtained via the Rest method imopenlines.network.join.
	   *
	   * If nothing is passed, the chat interface will open with the last opened dialog.
	   *
	   * @param {number|`chat${number}`|`sg${number}`|`imol|${number}`|undefined} dialogId
	   *
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-im-open-messenger.html
	   * @link https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=93&LESSON_ID=20152&LESSON_PATH=7657.7883.8025.20150.20152
	   *
	   */
	  async imOpenMessenger(dialogId) {
	    return this.#messageManager.send(
	      MessageCommands.imOpenMessenger,
	      {
	        dialogId,
	        isSafely: true
	      }
	    );
	  }
	  /**
	   * Opens the history window
	   * Identifier of the dialog:
	   *
	   * userId or chatXXX - chat, where XXX is the chat identifier, which can simply be a number.
	   * imol|XXXX - open line, where XXX is the session number of the open line.
	   *
	   * @param {number|`chat${number}`|`imol|${number}`} dialogId
	   *
	   * @return {Promise<void>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-im-open-history.html
	   */
	  async imOpenHistory(dialogId) {
	    return this.#messageManager.send(
	      MessageCommands.imOpenHistory,
	      {
	        dialogId,
	        isSafely: true
	      }
	    );
	  }
	}

	let OptionsManager$1 = class OptionsManager {
	  #messageManager;
	  #appOptions = null;
	  #userOptions = null;
	  constructor(messageManager) {
	    this.#messageManager = messageManager;
	  }
	  /**
	   * Initializes the data received from the parent window message.
	   * @param data
	   */
	  initData(data) {
	    if (!!data.APP_OPTIONS) {
	      this.#appOptions = data.APP_OPTIONS;
	    }
	    if (!!data.USER_OPTIONS) {
	      this.#userOptions = data.USER_OPTIONS;
	    }
	    return this;
	  }
	  /**
	   * Getting application option
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/options/bx24-app-option-get.html
	   */
	  appGet(option) {
	    if (this.#appOptions && !!this.#appOptions[option]) {
	      return this.#appOptions[option];
	    }
	    throw new Error(`app.option.${option} not set`);
	  }
	  /**
	   * Updates application data through the parent window
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/options/bx24-app-option-set.html
	   */
	  async appSet(option, value) {
	    if (!this.#appOptions) {
	      this.#appOptions = [];
	    }
	    this.#appOptions[option] = value;
	    return this.#sendParentMessage(
	      MessageCommands.setAppOption,
	      option,
	      this.#appOptions[option]
	    );
	  }
	  /**
	   * Getting user option
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/options/bx24-user-option-get.html
	   */
	  userGet(option) {
	    if (this.#userOptions && !!this.#userOptions[option]) {
	      return this.#userOptions[option];
	    }
	    throw new Error(`user.option.${option} not set`);
	  }
	  /**
	   * Updates user data through the parent window
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/options/bx24-user-option-set.html
	   */
	  async userSet(option, value) {
	    if (!this.#appOptions) {
	      this.#appOptions = [];
	    }
	    if (!this.#appOptions[option]) {
	      this.#appOptions[option] = null;
	    }
	    this.#userOptions[option] = value;
	    return this.#sendParentMessage(
	      MessageCommands.setUserOption,
	      option,
	      // @ts-ignore
	      this.#userOptions[option]
	    );
	  }
	  async #sendParentMessage(command, option, value) {
	    return this.#messageManager.send(
	      command,
	      {
	        name: option,
	        value,
	        isSafely: true
	      }
	    ).then(() => {
	      return Promise.resolve();
	    });
	  }
	};

	class DialogManager {
	  #messageManager;
	  constructor(messageManager) {
	    this.#messageManager = messageManager;
	  }
	  /**
	   * Method displays the standard single user selection dialog
	   * It only shows company employees
	   *
	   * @return {Promise<null|SelectedUser>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/system-dialogues/bx24-select-user.html
	   */
	  async selectUser() {
	    return this.#messageManager.send(
	      MessageCommands.selectUser,
	      {
	        mult: false
	      }
	    );
	  }
	  /**
	   * Method displays the standard multiple user selection dialog
	   * It only shows company employees
	   *
	   * @return {Promise<SelectedUser[]>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/system-dialogues/bx24-select-users.html
	   */
	  async selectUsers() {
	    return this.#messageManager.send(
	      MessageCommands.selectUser,
	      {
	        mult: true
	      }
	    );
	  }
	  /**
	   * @deprecated
	   * Method displays a standard access permission selection dialog
	   *
	   * @param {string[]} blockedAccessPermissions
	   * @return {Promise<SelectedAccess[]>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/system-dialogues/bx24-select-access.html
	   */
	  async selectAccess(blockedAccessPermissions = []) {
	    console.warn(`@deprecated selectAccess`);
	    return this.#messageManager.send(
	      MessageCommands.selectAccess,
	      {
	        value: blockedAccessPermissions
	      }
	    );
	  }
	  /**
	   * @deprecated
	   * Method invokes the system dialog for selecting a CRM entity
	   *
	   * @param {SelectCRMParams} params
	   * @return {Promise<SelectedCRM>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/system-dialogues/bx24-select-crm.html
	   */
	  async selectCRM(params) {
	    console.warn(`@deprecated selectCRM`);
	    return this.#messageManager.send(
	      MessageCommands.selectCRM,
	      {
	        entityType: params?.entityType,
	        multiple: params?.multiple,
	        value: params?.value
	      }
	    );
	  }
	}

	class SliderManager {
	  #appFrame;
	  #messageManager;
	  constructor(appFrame, messageManager) {
	    this.#appFrame = appFrame;
	    this.#messageManager = messageManager;
	  }
	  /**
	   * Returns the URL relative to the domain name and path
	   */
	  getUrl(path = "/") {
	    return new URL(path, this.#appFrame.getTargetOrigin());
	  }
	  /**
	   * Get the account address BX24
	   */
	  getTargetOrigin() {
	    return this.#appFrame.getTargetOrigin();
	  }
	  /**
	   * When the method is called, a pop-up window with the application frame will be opened.
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-open-application.html
	   */
	  async openSliderAppPage(params = {}) {
	    return this.#messageManager.send(
	      MessageCommands.openApplication,
	      params
	    );
	  }
	  /**
	   * Defines the base path for width sampling.
	   *
	   * @param width
	   * @private
	   */
	  #getBaseUrlByWidth(width = 1640) {
	    if (width > 0) {
	      if (width > 1200 && width <= 1640) {
	        return "/crm/type/0/details/0/../../../../..";
	      } else if (width > 950 && width <= 1200) {
	        return "/company/personal/user/0/groups/create/../../../../../..";
	      } else if (width > 900 && width <= 950) {
	        return "/crm/company/requisite/0/../../../..";
	      } else if (width <= 900) {
	        return "/workgroups/group/0/card/../../../..";
	      } else {
	        return "/crm/deal/../..";
	      }
	    } else {
	      return "/crm/deal/../..";
	    }
	  }
	  /**
	   * Opens the specified path inside the portal in the slider.
	   * @param {URL} url
	   * @param {number} width - Number in the range from 1640 to 1200, from 1200 to 950, from 950 to 900, from 900 ...
	   * @return {Promise<StatusClose>}
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-open-path.html
	   * @memo /^\/(crm\/(deal|lead|contact|company|type)|marketplace|company\/personal\/user\/[0-9]+|workgroups\/group\/[0-9]+)\//
	   */
	  async openPath(url, width = 1640) {
	    const openSliderUrl = new URL(url);
	    openSliderUrl.searchParams.set("IFRAME", "Y");
	    openSliderUrl.searchParams.set("IFRAME_TYPE", "SIDE_SLIDER");
	    return this.#messageManager.send(
	      MessageCommands.openPath,
	      {
	        path: [this.#getBaseUrlByWidth(width), openSliderUrl.pathname, openSliderUrl.search].join("")
	      }
	    ).then((response) => {
	      if (response?.result === "error") {
	        if (response?.errorCode === "METHOD_NOT_SUPPORTED_ON_DEVICE") {
	          return new Promise((resolve, reject) => {
	            const windowObjectReference = window.open(url, "_blank");
	            if (!windowObjectReference) {
	              reject(new Error("Error open window"));
	              return;
	            }
	            let iterator = 0;
	            let iteratorMax = 1e3 * 60 * 5;
	            let waitCloseWindow = window.setInterval(() => {
	              iterator = iterator + 1;
	              if (windowObjectReference.closed) {
	                clearInterval(waitCloseWindow);
	                resolve({
	                  isOpenAtNewWindow: true,
	                  isClose: true
	                });
	              } else if (iterator > iteratorMax) {
	                clearInterval(waitCloseWindow);
	                resolve({
	                  isOpenAtNewWindow: true,
	                  isClose: false
	                });
	              }
	            }, 1e3);
	          });
	        } else {
	          return Promise.reject(new Error(
	            response?.errorCode
	          ));
	        }
	      } else if (response?.result === "close") {
	        return Promise.resolve({
	          isOpenAtNewWindow: false,
	          isClose: true
	        });
	      }
	      return Promise.resolve({
	        isOpenAtNewWindow: false,
	        isClose: false
	      });
	    });
	  }
	  /**
	   * @deprecated
	   * @param params
	   */
	  async showAppForm(params) {
	    console.warn(`@deprecated showAppForm`);
	    return this.#messageManager.send(
	      MessageCommands.showAppForm,
	      {
	        params,
	        isSafely: true
	      }
	    );
	  }
	}

	class PlacementManager {
	  #title = "";
	  #options = {};
	  constructor() {
	  }
	  /**
	   * Initializes the data received from the parent window message.
	   * @param data
	   */
	  initData(data) {
	    this.#title = data.PLACEMENT || "DEFAULT";
	    const options = data.PLACEMENT_OPTIONS;
	    this.#options = Object.freeze(options);
	    return this;
	  }
	  get title() {
	    return this.#title;
	  }
	  get isDefault() {
	    return this.title === "DEFAULT";
	  }
	  get options() {
	    return this.#options;
	  }
	  get isSliderMode() {
	    return this.options?.IFRAME === "Y";
	  }
	}

	class B24Frame extends AbstractB24 {
	  #isInstallMode = false;
	  #isFirstRun = false;
	  #appFrame;
	  #messageManager;
	  #authManager;
	  #parentManager;
	  #optionsManager;
	  #dialogManager;
	  #sliderManager;
	  #placementManager;
	  // region Init ////
	  constructor(queryParams) {
	    super();
	    this.#appFrame = new AppFrame(queryParams);
	    this.#messageManager = new MessageManager(this.#appFrame);
	    this.#messageManager.subscribe();
	    this.#authManager = new AuthManager(this.#appFrame, this.#messageManager);
	    this.#parentManager = new ParentManager(this.#messageManager);
	    this.#optionsManager = new OptionsManager$1(this.#messageManager);
	    this.#dialogManager = new DialogManager(this.#messageManager);
	    this.#sliderManager = new SliderManager(this.#appFrame, this.#messageManager);
	    this.#placementManager = new PlacementManager();
	    this._isInit = false;
	  }
	  setLogger(logger) {
	    super.setLogger(logger);
	    this.#messageManager.setLogger(this.getLogger());
	  }
	  get isFirstRun() {
	    this._ensureInitialized();
	    return this.#isFirstRun;
	  }
	  get isInstallMode() {
	    this._ensureInitialized();
	    return this.#isInstallMode;
	  }
	  get parent() {
	    this._ensureInitialized();
	    return this.#parentManager;
	  }
	  get auth() {
	    this._ensureInitialized();
	    return this.#authManager;
	  }
	  get slider() {
	    this._ensureInitialized();
	    return this.#sliderManager;
	  }
	  get placement() {
	    this._ensureInitialized();
	    return this.#placementManager;
	  }
	  get options() {
	    this._ensureInitialized();
	    return this.#optionsManager;
	  }
	  get dialog() {
	    this._ensureInitialized();
	    return this.#dialogManager;
	  }
	  async init() {
	    return this.#messageManager.send(
	      MessageCommands.getInitData,
	      {}
	    ).then((data) => {
	      this.getLogger().log("init data:", data);
	      this.#appFrame.initData(data);
	      this.#authManager.initData(data);
	      this.#placementManager.initData(data);
	      this.#optionsManager.initData(data);
	      this.#isInstallMode = data.INSTALL;
	      this.#isFirstRun = data.FIRST_RUN;
	      this._http = new Http(
	        this.#appFrame.getTargetOriginWithPath(),
	        this.#authManager,
	        this._getHttpOptions()
	      );
	      this._isInit = true;
	      if (this.#isFirstRun) {
	        return this.#messageManager.send(
	          MessageCommands.setInstall,
	          {
	            install: true
	          }
	        );
	      }
	      return Promise.resolve();
	    });
	  }
	  /**
	   * Destructor.
	   * Removes an event subscription
	   */
	  destroy() {
	    this.#messageManager.unsubscribe();
	    super.destroy();
	  }
	  // endregion ////
	  // region Core ////
	  /**
	   * Signals that the installer or application setup has finished running.
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/system-functions/bx24-install-finish.html
	   */
	  async installFinish() {
	    if (!this.isInstallMode) {
	      return Promise.reject(new Error("Application was previously installed. You cannot call installFinish"));
	    }
	    return this.#messageManager.send(
	      MessageCommands.setInstallFinish,
	      {}
	    );
	  }
	  // endregion ////
	  // region Get ////
	  /**
	   * Get the account address BX24 ( https://name.bitrix24.com )
	   */
	  getTargetOrigin() {
	    this._ensureInitialized();
	    return this.#appFrame.getTargetOrigin();
	  }
	  /**
	   * Get the account address BX24 with Path ( https://name.bitrix24.com/rest )
	   */
	  getTargetOriginWithPath() {
	    this._ensureInitialized();
	    return this.#appFrame.getTargetOriginWithPath();
	  }
	  /**
	   * Returns the sid of the application relative to the parent window like this `9c33468728e1d2c8c97562475edfd96`
	   */
	  getAppSid() {
	    this._ensureInitialized();
	    return this.#appFrame.getAppSid();
	  }
	  /**
	   * Returns the localization of the B24 interface
	   *
	   * @link https://apidocs.bitrix24.com/api-reference/bx24-js-sdk/additional-functions/bx24-get-lang.html
	   */
	  getLang() {
	    this._ensureInitialized();
	    return this.#appFrame.getLang();
	  }
	  // endregion ////
	}

	class UnhandledMatchError extends Error {
	  constructor(value, ...args) {
	    super(...args);
	    this.name = "UnhandledMatchError";
	    this.message = `Unhandled match value of type ${value}`;
	    this.stack = new Error().stack;
	  }
	}
	class AbstractHelper {
	  _b24;
	  _logger = null;
	  _data = null;
	  // region Init ////
	  constructor(b24) {
	    this._b24 = b24;
	  }
	  setLogger(logger) {
	    this._logger = logger;
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  // endregion ////
	  /**
	   * Initializes the data received
	   * @param data
	   */
	  async initData(data) {
	    this.getLogger().log(data);
	    return Promise.reject(new Error("Rewrite this function"));
	  }
	}

	class ProfileManager extends AbstractHelper {
	  _data = null;
	  /**
	   * @inheritDoc
	   */
	  async initData(data) {
	    this._data = data;
	  }
	  get data() {
	    if (null === this._data) {
	      throw new Error("ProfileManager.data not initialized");
	    }
	    return this._data;
	  }
	}

	class AppManager extends AbstractHelper {
	  _data = null;
	  /**
	   * @inheritDoc
	   */
	  async initData(data) {
	    this._data = data;
	  }
	  get data() {
	    if (null === this._data) {
	      throw new Error("AppManager.data not initialized");
	    }
	    return this._data;
	  }
	  get statusCode() {
	    return StatusDescriptions[this.data.status] || "Unknown status";
	  }
	}

	class PaymentManager extends AbstractHelper {
	  _data = null;
	  /**
	   * @inheritDoc
	   */
	  async initData(data) {
	    this._data = data;
	  }
	  get data() {
	    if (null === this._data) {
	      throw new Error("PaymentManager.data not initialized");
	    }
	    return this._data;
	  }
	}

	class LicenseManager extends AbstractHelper {
	  _data = null;
	  /**
	   * @inheritDoc
	   */
	  async initData(data) {
	    this._data = data;
	    this.makeRestrictionManagerParams();
	  }
	  get data() {
	    if (null === this._data) {
	      throw new Error("LicenseManager.data not initialized");
	    }
	    return this._data;
	  }
	  /**
	   * Set RestrictionManager params by license
	   * @link https://apidocs.bitrix24.com/api-reference/common/system/app-info.html
	   */
	  makeRestrictionManagerParams() {
	    if (!this.data?.license) {
	      return;
	    }
	    if (this.data.license.includes("ent")) {
	      this.getLogger().log(
	        `LICENSE ${this.data.license} => up restriction manager params`,
	        RestrictionManagerParamsForEnterprise
	      );
	      this._b24.getHttpClient().setRestrictionManagerParams(
	        RestrictionManagerParamsForEnterprise
	      );
	    }
	  }
	}

	class CurrencyManager extends AbstractHelper {
	  /**
	   * @inheritDoc
	   */
	  async initData(data) {
	    this._data = {
	      currencyBase: "?",
	      currencyList: /* @__PURE__ */ new Map()
	    };
	    this.setBaseCurrency(data.currencyBase);
	    this.setCurrencyList(data.currencyList);
	    try {
	      await this.loadData();
	    } catch (error) {
	      if (error instanceof Error) {
	        throw error;
	      }
	      console.error(error);
	      throw new Error("Failed to load data");
	    }
	  }
	  async loadData() {
	    const batchRequest = this.currencyList.map((currencyCode) => {
	      return {
	        method: "crm.currency.get",
	        params: {
	          id: currencyCode
	        }
	      };
	    });
	    if (batchRequest.length < 1) {
	      return Promise.resolve();
	    }
	    try {
	      const response = await this._b24.callBatchByChunk(batchRequest, true);
	      const data = response.getData();
	      data.forEach((row) => {
	        if (typeof row.LANG === "undefined") {
	          return;
	        }
	        const currencyCode = row.CURRENCY;
	        const currency = this.data.currencyList.get(currencyCode);
	        if (typeof currency === "undefined") {
	          return;
	        }
	        Object.entries(row.LANG).forEach(([langCode, formatData]) => {
	          currency.lang[langCode] = {
	            decimals: parseInt(formatData.DECIMALS),
	            decPoint: formatData.DEC_POINT,
	            formatString: formatData.FORMAT_STRING,
	            fullName: formatData.FULL_NAME,
	            isHideZero: formatData.HIDE_ZERO === "Y",
	            thousandsSep: formatData.THOUSANDS_SEP,
	            thousandsVariant: formatData.THOUSANDS_VARIANT
	          };
	          switch (currency.lang[langCode].thousandsVariant) {
	            case "N":
	              currency.lang[langCode].thousandsSep = "";
	              break;
	            case "D":
	              currency.lang[langCode].thousandsSep = ".";
	              break;
	            case "C":
	              currency.lang[langCode].thousandsSep = ",";
	              break;
	            case "S":
	              currency.lang[langCode].thousandsSep = " ";
	              break;
	            case "B":
	              currency.lang[langCode].thousandsSep = "&nbsp;";
	              break;
	            case "OWN":
	            default:
	              if (!Type.isStringFilled(currency.lang[langCode].thousandsSep)) {
	                currency.lang[langCode].thousandsSep = " ";
	              }
	              break;
	          }
	        });
	      });
	    } catch (error) {
	      console.error(error);
	    }
	  }
	  get data() {
	    if (null === this._data) {
	      throw new Error("CurrencyManager.data not initialized");
	    }
	    return this._data;
	  }
	  // region BaseCurrency ////
	  setBaseCurrency(currencyBase) {
	    this._data.currencyBase = currencyBase;
	  }
	  get baseCurrency() {
	    return this.data.currencyBase;
	  }
	  // endregion ////
	  // region CurrencyList ////
	  setCurrencyList(list = []) {
	    this.data.currencyList.clear();
	    list.forEach((row) => {
	      this.data.currencyList.set(
	        row.CURRENCY,
	        {
	          amount: parseFloat(row.CURRENCY),
	          amountCnt: parseInt(row.AMOUNT_CNT),
	          isBase: row.BASE === "Y",
	          currencyCode: row.CURRENCY,
	          dateUpdate: Text.toDateTime(row.DATE_UPDATE),
	          decimals: parseInt(row.DECIMALS),
	          decPoint: row.DEC_POINT,
	          formatString: row.FORMAT_STRING,
	          fullName: row.FULL_NAME,
	          lid: row.LID,
	          sort: parseInt(row.SORT),
	          thousandsSep: row?.THOUSANDS_SEP || null,
	          lang: {}
	        }
	      );
	    });
	  }
	  // endregion ////
	  // region Info ////
	  getCurrencyFullName(currencyCode, langCode) {
	    const currency = this.data.currencyList.get(currencyCode);
	    if (typeof currency === "undefined") {
	      throw new UnhandledMatchError(currencyCode);
	    }
	    let fullName = currency.fullName;
	    if (!(typeof langCode === "undefined")) {
	      const langFormatter = currency.lang[langCode];
	      if (!Type.isUndefined(langFormatter)) {
	        fullName = langFormatter.fullName;
	      }
	    }
	    return fullName;
	  }
	  getCurrencyLiteral(currencyCode, langCode) {
	    const currency = this.data.currencyList.get(currencyCode);
	    if (typeof currency === "undefined") {
	      throw new UnhandledMatchError(currencyCode);
	    }
	    let formatString = currency.formatString;
	    if (!(typeof langCode === "undefined")) {
	      const langFormatter = currency.lang[langCode];
	      if (!Type.isUndefined(langFormatter)) {
	        formatString = langFormatter.formatString;
	      }
	    }
	    return formatString.replaceAll("&#", "&%").replaceAll("#", "").replaceAll("&%", "&#").trim() || "";
	  }
	  get currencyList() {
	    return Array.from(this.data.currencyList.keys());
	  }
	  // endregion ////
	  // region Format ////
	  format(value, currencyCode, langCode) {
	    const currency = this.data.currencyList.get(currencyCode);
	    if (typeof currency === "undefined") {
	      throw new UnhandledMatchError(currencyCode);
	    }
	    const options = {
	      formatString: currency.formatString,
	      decimals: currency.decimals,
	      decPoint: currency.decPoint,
	      thousandsSep: currency.thousandsSep
	    };
	    if (!Type.isStringFilled(options.thousandsSep)) {
	      options.thousandsSep = "";
	    }
	    const langFormatter = currency.lang[langCode];
	    if (!Type.isUndefined(langFormatter)) {
	      options.formatString = langFormatter.formatString;
	      options.decimals = langFormatter.decimals;
	      options.decPoint = langFormatter.decPoint;
	      options.thousandsSep = langFormatter.thousandsSep;
	    }
	    return options.formatString.replaceAll("&#", "&%").replace(
	      "#",
	      Text.numberFormat(
	        value,
	        options.decimals,
	        options.decPoint,
	        options.thousandsSep
	      )
	    ).replaceAll("&%", "&#") || "";
	  }
	  // endregion ////
	}

	class OptionsManager extends AbstractHelper {
	  _data;
	  _type;
	  // region static ////
	  static getSupportTypes() {
	    return [
	      TypeOption.NotSet,
	      TypeOption.JsonArray,
	      TypeOption.JsonObject,
	      TypeOption.FloatVal,
	      TypeOption.IntegerVal,
	      TypeOption.BoolYN,
	      TypeOption.StringVal
	    ];
	  }
	  static prepareArrayList(list) {
	    if (Type.isArray(list)) {
	      return list;
	    }
	    if (Type.isObject(list)) {
	      return Array.from(Object.values(list));
	    }
	    return [];
	  }
	  // endregion ////
	  // region Init ////
	  constructor(b24, type) {
	    super(b24);
	    this._type = type;
	    this._data = /* @__PURE__ */ new Map();
	  }
	  get data() {
	    return this._data;
	  }
	  reset() {
	    this.data.clear();
	  }
	  /**
	   * @inheritDoc
	   */
	  async initData(data) {
	    this.reset();
	    if (Type.isObject(data)) {
	      Object.entries(data).forEach(([key, value]) => {
	        this.data.set(
	          key,
	          value
	        );
	      });
	    }
	  }
	  // endregion ////
	  // region Get ////
	  getJsonArray(key, defValue = []) {
	    if (!this.data.has(key)) {
	      return defValue;
	    }
	    let data = this.data.get(key);
	    try {
	      data = JSON.parse(data);
	      if (!Type.isArray(data) && !Type.isObject(data)) {
	        data = defValue;
	      }
	    } catch (error) {
	      this.getLogger().error(error);
	      data = defValue;
	    }
	    return OptionsManager.prepareArrayList(data);
	  }
	  getJsonObject(key, defValue = {}) {
	    if (!this.data.has(key)) {
	      return defValue;
	    }
	    let data = this.data.get(key);
	    try {
	      data = JSON.parse(data);
	    } catch (error) {
	      this.getLogger().error(error);
	      data = defValue;
	    }
	    if (!Type.isObject(data)) {
	      data = defValue;
	    }
	    return data;
	  }
	  getFloat(key, defValue = 0) {
	    if (!this.data.has(key)) {
	      return defValue;
	    }
	    return Text.toNumber(this.data.get(key));
	  }
	  getInteger(key, defValue = 0) {
	    if (!this.data.has(key)) {
	      return defValue;
	    }
	    return Text.toInteger(this.data.get(key));
	  }
	  getBoolYN(key, defValue = true) {
	    if (!this.data.has(key)) {
	      return defValue;
	    }
	    return Text.toBoolean(this.data.get(key));
	  }
	  getBoolNY(key, defValue = false) {
	    if (!this.data.has(key)) {
	      return defValue;
	    }
	    return Text.toBoolean(this.data.get(key));
	  }
	  getString(key, defValue = "") {
	    if (!this.data.has(key)) {
	      return defValue;
	    }
	    return this.data.get(key).toString();
	  }
	  getDate(key, defValue = null) {
	    if (!this.data.has(key)) {
	      return defValue;
	    }
	    try {
	      let result = Text.toDateTime(
	        this.data.get(key).toString()
	      );
	      if (result.isValid) {
	        return result;
	      } else {
	        return defValue;
	      }
	    } catch (error) {
	      return defValue;
	    }
	  }
	  // endregion ////
	  // region Tools ////
	  encode(value) {
	    return JSON.stringify(value);
	  }
	  decode(data, defaultValue) {
	    try {
	      if (data.length > 0) {
	        return JSON.parse(data);
	      }
	      return defaultValue;
	    } catch (error) {
	      this.getLogger().warn(error, data);
	    }
	    return defaultValue;
	  }
	  // endregion ////
	  // region Save ////
	  getMethodSave() {
	    switch (this._type) {
	      case "app":
	        return "app.option.set";
	      case "user":
	        return "user.option.set";
	    }
	  }
	  async save(options, optionsPull) {
	    const commands = [];
	    commands.push({
	      method: this.getMethodSave(),
	      params: {
	        options
	      }
	    });
	    if (Type.isObject(optionsPull)) {
	      commands.push({
	        method: "pull.application.event.add",
	        params: {
	          COMMAND: optionsPull?.command,
	          PARAMS: optionsPull?.params,
	          MODULE_ID: optionsPull?.moduleId
	        }
	      });
	    }
	    return this._b24.callBatch(commands, true);
	  }
	  // endregion ////
	}

	class StorageManager {
	  _logger = null;
	  userId;
	  siteId;
	  constructor(params = {}) {
	    this.userId = params.userId ? Text.toInteger(params.userId) : 0;
	    this.siteId = params.siteId ? params.siteId : "none";
	  }
	  setLogger(logger) {
	    this._logger = logger;
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  set(name, value) {
	    if (typeof window.localStorage === "undefined") {
	      this.getLogger().error(new Error("undefined window.localStorage"));
	      return;
	    }
	    if (typeof value !== "string") {
	      if (value) {
	        value = JSON.stringify(value);
	      }
	    }
	    window.localStorage.setItem(
	      this._getKey(name),
	      value
	    );
	  }
	  get(name, defaultValue) {
	    if (typeof window.localStorage === "undefined") {
	      return defaultValue || null;
	    }
	    const result = window.localStorage.getItem(this._getKey(name));
	    if (result === null) {
	      return defaultValue || null;
	    }
	    return JSON.parse(result);
	  }
	  remove(name) {
	    if (typeof window.localStorage === "undefined") {
	      this.getLogger().error(new Error("undefined window.localStorage"));
	      return;
	    }
	    return window.localStorage.removeItem(
	      this._getKey(name)
	    );
	  }
	  _getKey(name) {
	    return `@bitrix24/b24jssdk-pull-${this.userId}-${this.siteId}-${name}`;
	  }
	  compareKey(eventKey, userKey) {
	    return eventKey === this._getKey(userKey);
	  }
	}

	class ErrorNotConnected extends Error {
	  constructor(message) {
	    super(message);
	    this.name = "ErrorNotConnected";
	  }
	}
	class ErrorTimeout extends Error {
	  constructor(message) {
	    super(message);
	    this.name = "ErrorTimeout";
	  }
	}

	const JSON_RPC_VERSION = "2.0";
	class JsonRpc {
	  _logger = null;
	  _connector;
	  _idCounter = 0;
	  _handlers = {};
	  _rpcResponseAwaiters = /* @__PURE__ */ new Map();
	  constructor(options) {
	    this._connector = options.connector;
	    if (Type.isPlainObject(options.handlers)) {
	      for (const method in options.handlers) {
	        this.handle(method, options.handlers[method]);
	      }
	    }
	  }
	  setLogger(logger) {
	    this._logger = logger;
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  /**
	   * @param {string} method
	   * @param {function} handler
	   */
	  handle(method, handler) {
	    this._handlers[method] = handler;
	  }
	  /**
	   * Sends RPC command to the server.
	   *
	   * @param {string} method Method name
	   * @param {object} params
	   * @param {int} timeout
	   * @returns {Promise}
	   */
	  async executeOutgoingRpcCommand(method, params, timeout = 5) {
	    return new Promise((resolve, reject) => {
	      const request = this.createRequest(
	        method,
	        params
	      );
	      if (!this._connector.send(
	        JSON.stringify(request)
	      )) {
	        reject(new ErrorNotConnected("websocket is not connected"));
	      }
	      const timeoutHandler = setTimeout(
	        () => {
	          this._rpcResponseAwaiters.delete(request.id);
	          reject(new ErrorTimeout("no response"));
	        },
	        timeout * 1e3
	      );
	      this._rpcResponseAwaiters.set(
	        request.id,
	        {
	          resolve,
	          reject,
	          timeout: timeoutHandler
	        }
	      );
	    });
	  }
	  /**
	   * Executes array or rpc commands.
	   * Returns array of promises, each promise will be resolved individually.
	   *
	   * @param {JsonRpcRequest[]} batch
	   * @returns {Promise[]}
	   */
	  executeOutgoingRpcBatch(batch) {
	    const requests = [];
	    const promises = [];
	    batch.forEach(({ method, params, id }) => {
	      const request = this.createRequest(
	        method,
	        params,
	        id
	      );
	      requests.push(request);
	      promises.push(new Promise((resolve, reject) => this._rpcResponseAwaiters.set(
	        request.id,
	        {
	          resolve,
	          reject
	        }
	      )));
	    });
	    this._connector.send(JSON.stringify(requests));
	    return promises;
	  }
	  processRpcResponse(response) {
	    if ("id" in response && this._rpcResponseAwaiters.has(Number(response.id))) {
	      const awaiter = this._rpcResponseAwaiters.get(Number(response.id));
	      if (awaiter) {
	        if ("result" in response) {
	          awaiter.resolve(response.result);
	        } else if ("error" in response) {
	          awaiter.reject(response?.error || "error");
	        } else {
	          awaiter.reject("wrong response structure");
	        }
	        clearTimeout(awaiter.timeout);
	        this._rpcResponseAwaiters.delete(Number(response.id));
	      }
	      return;
	    }
	    this.getLogger().error(
	      new Error(
	        `${Text.getDateForLog()}: Pull: Received rpc response with unknown id`
	      ),
	      response
	    );
	  }
	  parseJsonRpcMessage(message) {
	    let decoded;
	    try {
	      decoded = JSON.parse(message);
	    } catch (error) {
	      this.getLogger().error(
	        new Error(
	          `${Text.getDateForLog()}: Pull: Could not decode json rpc message`
	        ),
	        error
	      );
	      return;
	    }
	    if (Type.isArray(decoded)) {
	      return this.executeIncomingRpcBatch(decoded);
	    } else if (Type.isJsonRpcRequest(decoded)) {
	      return this.executeIncomingRpcCommand(decoded);
	    } else if (Type.isJsonRpcResponse(decoded)) {
	      return this.processRpcResponse(decoded);
	    } else {
	      this.getLogger().error(
	        new Error(
	          `${Text.getDateForLog()}: Pull: unknown rpc packet`
	        ),
	        decoded
	      );
	    }
	  }
	  /**
	   * Executes RPC command, received from the server
	   *
	   * @param {string} method
	   * @param {object} params
	   * @returns {object}
	   */
	  executeIncomingRpcCommand({ method, params }) {
	    if (method in this._handlers) {
	      return this._handlers[method].call(this, params || {});
	    }
	    return {
	      jsonrpc: JSON_RPC_VERSION,
	      error: ListRpcError.MethodNotFound
	    };
	  }
	  executeIncomingRpcBatch(batch) {
	    let result = [];
	    for (let command of batch) {
	      if ("jsonrpc" in command) {
	        if ("method" in command) {
	          let commandResult = this.executeIncomingRpcCommand(command);
	          if (commandResult) {
	            commandResult["jsonrpc"] = JSON_RPC_VERSION;
	            commandResult["id"] = command["id"];
	            result.push(commandResult);
	          }
	        } else {
	          this.processRpcResponse(command);
	        }
	      } else {
	        this.getLogger().error(
	          new Error(
	            `${Text.getDateForLog()}: Pull: unknown rpc command in batch`
	          ),
	          command
	        );
	        result.push({
	          jsonrpc: JSON_RPC_VERSION,
	          error: ListRpcError.InvalidRequest
	        });
	      }
	    }
	    return result;
	  }
	  nextId() {
	    return ++this._idCounter;
	  }
	  createPublishRequest(messageBatch) {
	    return messageBatch.map(
	      (message) => this.createRequest(
	        "publish",
	        message
	      )
	    );
	  }
	  createRequest(method, params, id) {
	    if (!id) {
	      id = this.nextId();
	    }
	    return {
	      jsonrpc: JSON_RPC_VERSION,
	      method,
	      params,
	      id
	    };
	  }
	}

	class SharedConfig {
	  _logger = null;
	  _storage;
	  _ttl = 24 * 60 * 60;
	  _callbacks;
	  constructor(params = {}) {
	    params = params || {};
	    this._storage = params.storage || new StorageManager();
	    this._callbacks = {
	      onWebSocketBlockChanged: Type.isFunction(params.onWebSocketBlockChanged) ? params.onWebSocketBlockChanged : () => {
	      }
	    };
	    if (this._storage) {
	      window.addEventListener(
	        "storage",
	        this.onLocalStorageSet.bind(this)
	      );
	    }
	  }
	  setLogger(logger) {
	    this._logger = logger;
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  onLocalStorageSet(params) {
	    if (this._storage.compareKey(
	      params.key || "",
	      LsKeys.WebsocketBlocked
	    ) && params.newValue !== params.oldValue) {
	      this._callbacks.onWebSocketBlockChanged({
	        isWebSocketBlocked: this.isWebSocketBlocked()
	      });
	    }
	  }
	  isWebSocketBlocked() {
	    if (!this._storage) {
	      return false;
	    }
	    return this._storage.get(LsKeys.WebsocketBlocked, 0) > (/* @__PURE__ */ new Date()).getTime();
	  }
	  setWebSocketBlocked(isWebSocketBlocked) {
	    if (!this._storage) {
	      return false;
	    }
	    try {
	      this._storage.set(
	        LsKeys.WebsocketBlocked,
	        isWebSocketBlocked ? (/* @__PURE__ */ new Date()).getTime() + this._ttl : 0
	      );
	    } catch (error) {
	      this.getLogger().error(new Error(
	        `${Text.getDateForLog()}: Pull: Could not save WS_blocked flag in local storage. Error: `
	      ), error);
	      return false;
	    }
	    return true;
	  }
	  isLongPollingBlocked() {
	    if (!this._storage) {
	      return false;
	    }
	    return this._storage.get(LsKeys.LongPollingBlocked, 0) > (/* @__PURE__ */ new Date()).getTime();
	  }
	  setLongPollingBlocked(isLongPollingBlocked) {
	    if (!this._storage) {
	      return false;
	    }
	    try {
	      this._storage.set(
	        LsKeys.LongPollingBlocked,
	        isLongPollingBlocked ? (/* @__PURE__ */ new Date()).getTime() + this._ttl : 0
	      );
	    } catch (error) {
	      this.getLogger().error(
	        new Error(
	          `${Text.getDateForLog()}: Pull: Could not save LP_blocked flag in local storage. Error: `
	        ),
	        error
	      );
	      return false;
	    }
	    return true;
	  }
	  isLoggingEnabled() {
	    if (!this._storage) {
	      return false;
	    }
	    return this._storage.get(LsKeys.LoggingEnabled, 0) > this.getTimestamp();
	  }
	  setLoggingEnabled(isLoggingEnabled) {
	    if (!this._storage) {
	      return false;
	    }
	    try {
	      this._storage.set(
	        LsKeys.LoggingEnabled,
	        isLoggingEnabled ? this.getTimestamp() + this._ttl : 0
	      );
	    } catch (error) {
	      this.getLogger().error(new Error(
	        `${Text.getDateForLog()}: LocalStorage error: `
	      ), error);
	      return false;
	    }
	    return true;
	  }
	  // region Tools ////
	  getTimestamp() {
	    return (/* @__PURE__ */ new Date()).getTime();
	  }
	  // endregion ////
	}

	class ChannelManager {
	  _logger = null;
	  _publicIds;
	  _restClient;
	  _getPublicListMethod;
	  constructor(params) {
	    this._publicIds = /* @__PURE__ */ new Map();
	    this._restClient = params.b24;
	    this._getPublicListMethod = params.getPublicListMethod;
	  }
	  setLogger(logger) {
	    this._logger = logger;
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  /**
	   * @param {Array} users Array of user ids.
	   * @return {Promise}
	   */
	  async getPublicIds(users) {
	    const now = /* @__PURE__ */ new Date();
	    let result = {};
	    let unknownUsers = [];
	    users.forEach((userId) => {
	      const chanel = this._publicIds.get(userId);
	      if (chanel && chanel.end > now) {
	        result[chanel.userId] = chanel;
	      } else {
	        unknownUsers.push(userId);
	      }
	    });
	    if (unknownUsers.length === 0) {
	      return Promise.resolve(result);
	    }
	    return new Promise((resolve) => {
	      this._restClient.callMethod(
	        this._getPublicListMethod,
	        {
	          users: unknownUsers
	        }
	      ).then((response) => {
	        const data = response.getData().result;
	        this.setPublicIds(Object.values(data));
	        unknownUsers.forEach((userId) => {
	          const chanel = this._publicIds.get(userId);
	          if (chanel) {
	            result[chanel.userId] = chanel;
	          }
	        });
	        resolve(result);
	      }).catch((error) => {
	        this.getLogger().error(error);
	        return resolve({});
	      });
	    });
	  }
	  /**
	   * @param {TypePublicIdDescriptor[]} publicIds
	   */
	  setPublicIds(publicIds) {
	    publicIds.forEach((publicIdDescriptor) => {
	      const userId = Number(publicIdDescriptor.user_id);
	      this._publicIds.set(
	        userId,
	        {
	          userId,
	          publicId: publicIdDescriptor.public_id,
	          signature: publicIdDescriptor.signature,
	          start: new Date(publicIdDescriptor.start),
	          end: new Date(publicIdDescriptor.end)
	        }
	      );
	    });
	  }
	}

	var src = {exports: {}};

	var indexLight = {exports: {}};

	var indexMinimal = {};

	var minimal = {};

	var aspromise;
	var hasRequiredAspromise;

	function requireAspromise () {
		if (hasRequiredAspromise) return aspromise;
		hasRequiredAspromise = 1;
		aspromise = asPromise;

		/**
		 * Callback as used by {@link util.asPromise}.
		 * @typedef asPromiseCallback
		 * @type {function}
		 * @param {Error|null} error Error, if any
		 * @param {...*} params Additional arguments
		 * @returns {undefined}
		 */

		/**
		 * Returns a promise from a node-style callback function.
		 * @memberof util
		 * @param {asPromiseCallback} fn Function to call
		 * @param {*} ctx Function context
		 * @param {...*} params Function arguments
		 * @returns {Promise<*>} Promisified function
		 */
		function asPromise(fn, ctx/*, varargs */) {
		    var params  = new Array(arguments.length - 1),
		        offset  = 0,
		        index   = 2,
		        pending = true;
		    while (index < arguments.length)
		        params[offset++] = arguments[index++];
		    return new Promise(function executor(resolve, reject) {
		        params[offset] = function callback(err/*, varargs */) {
		            if (pending) {
		                pending = false;
		                if (err)
		                    reject(err);
		                else {
		                    var params = new Array(arguments.length - 1),
		                        offset = 0;
		                    while (offset < params.length)
		                        params[offset++] = arguments[offset];
		                    resolve.apply(null, params);
		                }
		            }
		        };
		        try {
		            fn.apply(ctx || null, params);
		        } catch (err) {
		            if (pending) {
		                pending = false;
		                reject(err);
		            }
		        }
		    });
		}
		return aspromise;
	}

	var base64 = {};

	var hasRequiredBase64;

	function requireBase64 () {
		if (hasRequiredBase64) return base64;
		hasRequiredBase64 = 1;
		(function (exports) {

			/**
			 * A minimal base64 implementation for number arrays.
			 * @memberof util
			 * @namespace
			 */
			var base64 = exports;

			/**
			 * Calculates the byte length of a base64 encoded string.
			 * @param {string} string Base64 encoded string
			 * @returns {number} Byte length
			 */
			base64.length = function length(string) {
			    var p = string.length;
			    if (!p)
			        return 0;
			    var n = 0;
			    while (--p % 4 > 1 && string.charAt(p) === "=")
			        ++n;
			    return Math.ceil(string.length * 3) / 4 - n;
			};

			// Base64 encoding table
			var b64 = new Array(64);

			// Base64 decoding table
			var s64 = new Array(123);

			// 65..90, 97..122, 48..57, 43, 47
			for (var i = 0; i < 64;)
			    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

			/**
			 * Encodes a buffer to a base64 encoded string.
			 * @param {Uint8Array} buffer Source buffer
			 * @param {number} start Source start
			 * @param {number} end Source end
			 * @returns {string} Base64 encoded string
			 */
			base64.encode = function encode(buffer, start, end) {
			    var parts = null,
			        chunk = [];
			    var i = 0, // output index
			        j = 0, // goto index
			        t;     // temporary
			    while (start < end) {
			        var b = buffer[start++];
			        switch (j) {
			            case 0:
			                chunk[i++] = b64[b >> 2];
			                t = (b & 3) << 4;
			                j = 1;
			                break;
			            case 1:
			                chunk[i++] = b64[t | b >> 4];
			                t = (b & 15) << 2;
			                j = 2;
			                break;
			            case 2:
			                chunk[i++] = b64[t | b >> 6];
			                chunk[i++] = b64[b & 63];
			                j = 0;
			                break;
			        }
			        if (i > 8191) {
			            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
			            i = 0;
			        }
			    }
			    if (j) {
			        chunk[i++] = b64[t];
			        chunk[i++] = 61;
			        if (j === 1)
			            chunk[i++] = 61;
			    }
			    if (parts) {
			        if (i)
			            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
			        return parts.join("");
			    }
			    return String.fromCharCode.apply(String, chunk.slice(0, i));
			};

			var invalidEncoding = "invalid encoding";

			/**
			 * Decodes a base64 encoded string to a buffer.
			 * @param {string} string Source string
			 * @param {Uint8Array} buffer Destination buffer
			 * @param {number} offset Destination offset
			 * @returns {number} Number of bytes written
			 * @throws {Error} If encoding is invalid
			 */
			base64.decode = function decode(string, buffer, offset) {
			    var start = offset;
			    var j = 0, // goto index
			        t;     // temporary
			    for (var i = 0; i < string.length;) {
			        var c = string.charCodeAt(i++);
			        if (c === 61 && j > 1)
			            break;
			        if ((c = s64[c]) === undefined)
			            throw Error(invalidEncoding);
			        switch (j) {
			            case 0:
			                t = c;
			                j = 1;
			                break;
			            case 1:
			                buffer[offset++] = t << 2 | (c & 48) >> 4;
			                t = c;
			                j = 2;
			                break;
			            case 2:
			                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
			                t = c;
			                j = 3;
			                break;
			            case 3:
			                buffer[offset++] = (t & 3) << 6 | c;
			                j = 0;
			                break;
			        }
			    }
			    if (j === 1)
			        throw Error(invalidEncoding);
			    return offset - start;
			};

			/**
			 * Tests if the specified string appears to be base64 encoded.
			 * @param {string} string String to test
			 * @returns {boolean} `true` if probably base64 encoded, otherwise false
			 */
			base64.test = function test(string) {
			    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
			}; 
		} (base64));
		return base64;
	}

	var eventemitter;
	var hasRequiredEventemitter;

	function requireEventemitter () {
		if (hasRequiredEventemitter) return eventemitter;
		hasRequiredEventemitter = 1;
		eventemitter = EventEmitter;

		/**
		 * Constructs a new event emitter instance.
		 * @classdesc A minimal event emitter.
		 * @memberof util
		 * @constructor
		 */
		function EventEmitter() {

		    /**
		     * Registered listeners.
		     * @type {Object.<string,*>}
		     * @private
		     */
		    this._listeners = {};
		}

		/**
		 * Registers an event listener.
		 * @param {string} evt Event name
		 * @param {function} fn Listener
		 * @param {*} [ctx] Listener context
		 * @returns {util.EventEmitter} `this`
		 */
		EventEmitter.prototype.on = function on(evt, fn, ctx) {
		    (this._listeners[evt] || (this._listeners[evt] = [])).push({
		        fn  : fn,
		        ctx : ctx || this
		    });
		    return this;
		};

		/**
		 * Removes an event listener or any matching listeners if arguments are omitted.
		 * @param {string} [evt] Event name. Removes all listeners if omitted.
		 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
		 * @returns {util.EventEmitter} `this`
		 */
		EventEmitter.prototype.off = function off(evt, fn) {
		    if (evt === undefined)
		        this._listeners = {};
		    else {
		        if (fn === undefined)
		            this._listeners[evt] = [];
		        else {
		            var listeners = this._listeners[evt];
		            for (var i = 0; i < listeners.length;)
		                if (listeners[i].fn === fn)
		                    listeners.splice(i, 1);
		                else
		                    ++i;
		        }
		    }
		    return this;
		};

		/**
		 * Emits an event by calling its listeners with the specified arguments.
		 * @param {string} evt Event name
		 * @param {...*} args Arguments
		 * @returns {util.EventEmitter} `this`
		 */
		EventEmitter.prototype.emit = function emit(evt) {
		    var listeners = this._listeners[evt];
		    if (listeners) {
		        var args = [],
		            i = 1;
		        for (; i < arguments.length;)
		            args.push(arguments[i++]);
		        for (i = 0; i < listeners.length;)
		            listeners[i].fn.apply(listeners[i++].ctx, args);
		    }
		    return this;
		};
		return eventemitter;
	}

	var float;
	var hasRequiredFloat;

	function requireFloat () {
		if (hasRequiredFloat) return float;
		hasRequiredFloat = 1;

		float = factory(factory);

		/**
		 * Reads / writes floats / doubles from / to buffers.
		 * @name util.float
		 * @namespace
		 */

		/**
		 * Writes a 32 bit float to a buffer using little endian byte order.
		 * @name util.float.writeFloatLE
		 * @function
		 * @param {number} val Value to write
		 * @param {Uint8Array} buf Target buffer
		 * @param {number} pos Target buffer offset
		 * @returns {undefined}
		 */

		/**
		 * Writes a 32 bit float to a buffer using big endian byte order.
		 * @name util.float.writeFloatBE
		 * @function
		 * @param {number} val Value to write
		 * @param {Uint8Array} buf Target buffer
		 * @param {number} pos Target buffer offset
		 * @returns {undefined}
		 */

		/**
		 * Reads a 32 bit float from a buffer using little endian byte order.
		 * @name util.float.readFloatLE
		 * @function
		 * @param {Uint8Array} buf Source buffer
		 * @param {number} pos Source buffer offset
		 * @returns {number} Value read
		 */

		/**
		 * Reads a 32 bit float from a buffer using big endian byte order.
		 * @name util.float.readFloatBE
		 * @function
		 * @param {Uint8Array} buf Source buffer
		 * @param {number} pos Source buffer offset
		 * @returns {number} Value read
		 */

		/**
		 * Writes a 64 bit double to a buffer using little endian byte order.
		 * @name util.float.writeDoubleLE
		 * @function
		 * @param {number} val Value to write
		 * @param {Uint8Array} buf Target buffer
		 * @param {number} pos Target buffer offset
		 * @returns {undefined}
		 */

		/**
		 * Writes a 64 bit double to a buffer using big endian byte order.
		 * @name util.float.writeDoubleBE
		 * @function
		 * @param {number} val Value to write
		 * @param {Uint8Array} buf Target buffer
		 * @param {number} pos Target buffer offset
		 * @returns {undefined}
		 */

		/**
		 * Reads a 64 bit double from a buffer using little endian byte order.
		 * @name util.float.readDoubleLE
		 * @function
		 * @param {Uint8Array} buf Source buffer
		 * @param {number} pos Source buffer offset
		 * @returns {number} Value read
		 */

		/**
		 * Reads a 64 bit double from a buffer using big endian byte order.
		 * @name util.float.readDoubleBE
		 * @function
		 * @param {Uint8Array} buf Source buffer
		 * @param {number} pos Source buffer offset
		 * @returns {number} Value read
		 */

		// Factory function for the purpose of node-based testing in modified global environments
		function factory(exports) {

		    // float: typed array
		    if (typeof Float32Array !== "undefined") (function() {

		        var f32 = new Float32Array([ -0 ]),
		            f8b = new Uint8Array(f32.buffer),
		            le  = f8b[3] === 128;

		        function writeFloat_f32_cpy(val, buf, pos) {
		            f32[0] = val;
		            buf[pos    ] = f8b[0];
		            buf[pos + 1] = f8b[1];
		            buf[pos + 2] = f8b[2];
		            buf[pos + 3] = f8b[3];
		        }

		        function writeFloat_f32_rev(val, buf, pos) {
		            f32[0] = val;
		            buf[pos    ] = f8b[3];
		            buf[pos + 1] = f8b[2];
		            buf[pos + 2] = f8b[1];
		            buf[pos + 3] = f8b[0];
		        }

		        /* istanbul ignore next */
		        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
		        /* istanbul ignore next */
		        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

		        function readFloat_f32_cpy(buf, pos) {
		            f8b[0] = buf[pos    ];
		            f8b[1] = buf[pos + 1];
		            f8b[2] = buf[pos + 2];
		            f8b[3] = buf[pos + 3];
		            return f32[0];
		        }

		        function readFloat_f32_rev(buf, pos) {
		            f8b[3] = buf[pos    ];
		            f8b[2] = buf[pos + 1];
		            f8b[1] = buf[pos + 2];
		            f8b[0] = buf[pos + 3];
		            return f32[0];
		        }

		        /* istanbul ignore next */
		        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
		        /* istanbul ignore next */
		        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

		    // float: ieee754
		    })(); else (function() {

		        function writeFloat_ieee754(writeUint, val, buf, pos) {
		            var sign = val < 0 ? 1 : 0;
		            if (sign)
		                val = -val;
		            if (val === 0)
		                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
		            else if (isNaN(val))
		                writeUint(2143289344, buf, pos);
		            else if (val > 3.4028234663852886e+38) // +-Infinity
		                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
		            else if (val < 1.1754943508222875e-38) // denormal
		                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
		            else {
		                var exponent = Math.floor(Math.log(val) / Math.LN2),
		                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
		                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
		            }
		        }

		        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
		        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

		        function readFloat_ieee754(readUint, buf, pos) {
		            var uint = readUint(buf, pos),
		                sign = (uint >> 31) * 2 + 1,
		                exponent = uint >>> 23 & 255,
		                mantissa = uint & 8388607;
		            return exponent === 255
		                ? mantissa
		                ? NaN
		                : sign * Infinity
		                : exponent === 0 // denormal
		                ? sign * 1.401298464324817e-45 * mantissa
		                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
		        }

		        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
		        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

		    })();

		    // double: typed array
		    if (typeof Float64Array !== "undefined") (function() {

		        var f64 = new Float64Array([-0]),
		            f8b = new Uint8Array(f64.buffer),
		            le  = f8b[7] === 128;

		        function writeDouble_f64_cpy(val, buf, pos) {
		            f64[0] = val;
		            buf[pos    ] = f8b[0];
		            buf[pos + 1] = f8b[1];
		            buf[pos + 2] = f8b[2];
		            buf[pos + 3] = f8b[3];
		            buf[pos + 4] = f8b[4];
		            buf[pos + 5] = f8b[5];
		            buf[pos + 6] = f8b[6];
		            buf[pos + 7] = f8b[7];
		        }

		        function writeDouble_f64_rev(val, buf, pos) {
		            f64[0] = val;
		            buf[pos    ] = f8b[7];
		            buf[pos + 1] = f8b[6];
		            buf[pos + 2] = f8b[5];
		            buf[pos + 3] = f8b[4];
		            buf[pos + 4] = f8b[3];
		            buf[pos + 5] = f8b[2];
		            buf[pos + 6] = f8b[1];
		            buf[pos + 7] = f8b[0];
		        }

		        /* istanbul ignore next */
		        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
		        /* istanbul ignore next */
		        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

		        function readDouble_f64_cpy(buf, pos) {
		            f8b[0] = buf[pos    ];
		            f8b[1] = buf[pos + 1];
		            f8b[2] = buf[pos + 2];
		            f8b[3] = buf[pos + 3];
		            f8b[4] = buf[pos + 4];
		            f8b[5] = buf[pos + 5];
		            f8b[6] = buf[pos + 6];
		            f8b[7] = buf[pos + 7];
		            return f64[0];
		        }

		        function readDouble_f64_rev(buf, pos) {
		            f8b[7] = buf[pos    ];
		            f8b[6] = buf[pos + 1];
		            f8b[5] = buf[pos + 2];
		            f8b[4] = buf[pos + 3];
		            f8b[3] = buf[pos + 4];
		            f8b[2] = buf[pos + 5];
		            f8b[1] = buf[pos + 6];
		            f8b[0] = buf[pos + 7];
		            return f64[0];
		        }

		        /* istanbul ignore next */
		        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
		        /* istanbul ignore next */
		        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

		    // double: ieee754
		    })(); else (function() {

		        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
		            var sign = val < 0 ? 1 : 0;
		            if (sign)
		                val = -val;
		            if (val === 0) {
		                writeUint(0, buf, pos + off0);
		                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
		            } else if (isNaN(val)) {
		                writeUint(0, buf, pos + off0);
		                writeUint(2146959360, buf, pos + off1);
		            } else if (val > 1.7976931348623157e+308) { // +-Infinity
		                writeUint(0, buf, pos + off0);
		                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
		            } else {
		                var mantissa;
		                if (val < 2.2250738585072014e-308) { // denormal
		                    mantissa = val / 5e-324;
		                    writeUint(mantissa >>> 0, buf, pos + off0);
		                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
		                } else {
		                    var exponent = Math.floor(Math.log(val) / Math.LN2);
		                    if (exponent === 1024)
		                        exponent = 1023;
		                    mantissa = val * Math.pow(2, -exponent);
		                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
		                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
		                }
		            }
		        }

		        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
		        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

		        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
		            var lo = readUint(buf, pos + off0),
		                hi = readUint(buf, pos + off1);
		            var sign = (hi >> 31) * 2 + 1,
		                exponent = hi >>> 20 & 2047,
		                mantissa = 4294967296 * (hi & 1048575) + lo;
		            return exponent === 2047
		                ? mantissa
		                ? NaN
		                : sign * Infinity
		                : exponent === 0 // denormal
		                ? sign * 5e-324 * mantissa
		                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
		        }

		        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
		        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

		    })();

		    return exports;
		}

		// uint helpers

		function writeUintLE(val, buf, pos) {
		    buf[pos    ] =  val        & 255;
		    buf[pos + 1] =  val >>> 8  & 255;
		    buf[pos + 2] =  val >>> 16 & 255;
		    buf[pos + 3] =  val >>> 24;
		}

		function writeUintBE(val, buf, pos) {
		    buf[pos    ] =  val >>> 24;
		    buf[pos + 1] =  val >>> 16 & 255;
		    buf[pos + 2] =  val >>> 8  & 255;
		    buf[pos + 3] =  val        & 255;
		}

		function readUintLE(buf, pos) {
		    return (buf[pos    ]
		          | buf[pos + 1] << 8
		          | buf[pos + 2] << 16
		          | buf[pos + 3] << 24) >>> 0;
		}

		function readUintBE(buf, pos) {
		    return (buf[pos    ] << 24
		          | buf[pos + 1] << 16
		          | buf[pos + 2] << 8
		          | buf[pos + 3]) >>> 0;
		}
		return float;
	}

	var inquire_1;
	var hasRequiredInquire;

	function requireInquire () {
		if (hasRequiredInquire) return inquire_1;
		hasRequiredInquire = 1;
		inquire_1 = inquire;

		/**
		 * Requires a module only if available.
		 * @memberof util
		 * @param {string} moduleName Module to require
		 * @returns {?Object} Required module if available and not empty, otherwise `null`
		 */
		function inquire(moduleName) {
		    try {
		        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
		        if (mod && (mod.length || Object.keys(mod).length))
		            return mod;
		    } catch (e) {} // eslint-disable-line no-empty
		    return null;
		}
		return inquire_1;
	}

	var utf8 = {};

	var hasRequiredUtf8;

	function requireUtf8 () {
		if (hasRequiredUtf8) return utf8;
		hasRequiredUtf8 = 1;
		(function (exports) {

			/**
			 * A minimal UTF8 implementation for number arrays.
			 * @memberof util
			 * @namespace
			 */
			var utf8 = exports;

			/**
			 * Calculates the UTF8 byte length of a string.
			 * @param {string} string String
			 * @returns {number} Byte length
			 */
			utf8.length = function utf8_length(string) {
			    var len = 0,
			        c = 0;
			    for (var i = 0; i < string.length; ++i) {
			        c = string.charCodeAt(i);
			        if (c < 128)
			            len += 1;
			        else if (c < 2048)
			            len += 2;
			        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
			            ++i;
			            len += 4;
			        } else
			            len += 3;
			    }
			    return len;
			};

			/**
			 * Reads UTF8 bytes as a string.
			 * @param {Uint8Array} buffer Source buffer
			 * @param {number} start Source start
			 * @param {number} end Source end
			 * @returns {string} String read
			 */
			utf8.read = function utf8_read(buffer, start, end) {
			    var len = end - start;
			    if (len < 1)
			        return "";
			    var parts = null,
			        chunk = [],
			        i = 0, // char offset
			        t;     // temporary
			    while (start < end) {
			        t = buffer[start++];
			        if (t < 128)
			            chunk[i++] = t;
			        else if (t > 191 && t < 224)
			            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
			        else if (t > 239 && t < 365) {
			            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
			            chunk[i++] = 0xD800 + (t >> 10);
			            chunk[i++] = 0xDC00 + (t & 1023);
			        } else
			            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
			        if (i > 8191) {
			            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
			            i = 0;
			        }
			    }
			    if (parts) {
			        if (i)
			            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
			        return parts.join("");
			    }
			    return String.fromCharCode.apply(String, chunk.slice(0, i));
			};

			/**
			 * Writes a string as UTF8 bytes.
			 * @param {string} string Source string
			 * @param {Uint8Array} buffer Destination buffer
			 * @param {number} offset Destination offset
			 * @returns {number} Bytes written
			 */
			utf8.write = function utf8_write(string, buffer, offset) {
			    var start = offset,
			        c1, // character 1
			        c2; // character 2
			    for (var i = 0; i < string.length; ++i) {
			        c1 = string.charCodeAt(i);
			        if (c1 < 128) {
			            buffer[offset++] = c1;
			        } else if (c1 < 2048) {
			            buffer[offset++] = c1 >> 6       | 192;
			            buffer[offset++] = c1       & 63 | 128;
			        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
			            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
			            ++i;
			            buffer[offset++] = c1 >> 18      | 240;
			            buffer[offset++] = c1 >> 12 & 63 | 128;
			            buffer[offset++] = c1 >> 6  & 63 | 128;
			            buffer[offset++] = c1       & 63 | 128;
			        } else {
			            buffer[offset++] = c1 >> 12      | 224;
			            buffer[offset++] = c1 >> 6  & 63 | 128;
			            buffer[offset++] = c1       & 63 | 128;
			        }
			    }
			    return offset - start;
			}; 
		} (utf8));
		return utf8;
	}

	var pool_1;
	var hasRequiredPool;

	function requirePool () {
		if (hasRequiredPool) return pool_1;
		hasRequiredPool = 1;
		pool_1 = pool;

		/**
		 * An allocator as used by {@link util.pool}.
		 * @typedef PoolAllocator
		 * @type {function}
		 * @param {number} size Buffer size
		 * @returns {Uint8Array} Buffer
		 */

		/**
		 * A slicer as used by {@link util.pool}.
		 * @typedef PoolSlicer
		 * @type {function}
		 * @param {number} start Start offset
		 * @param {number} end End offset
		 * @returns {Uint8Array} Buffer slice
		 * @this {Uint8Array}
		 */

		/**
		 * A general purpose buffer pool.
		 * @memberof util
		 * @function
		 * @param {PoolAllocator} alloc Allocator
		 * @param {PoolSlicer} slice Slicer
		 * @param {number} [size=8192] Slab size
		 * @returns {PoolAllocator} Pooled allocator
		 */
		function pool(alloc, slice, size) {
		    var SIZE   = size || 8192;
		    var MAX    = SIZE >>> 1;
		    var slab   = null;
		    var offset = SIZE;
		    return function pool_alloc(size) {
		        if (size < 1 || size > MAX)
		            return alloc(size);
		        if (offset + size > SIZE) {
		            slab = alloc(SIZE);
		            offset = 0;
		        }
		        var buf = slice.call(slab, offset, offset += size);
		        if (offset & 7) // align to 32 bit
		            offset = (offset | 7) + 1;
		        return buf;
		    };
		}
		return pool_1;
	}

	var longbits;
	var hasRequiredLongbits;

	function requireLongbits () {
		if (hasRequiredLongbits) return longbits;
		hasRequiredLongbits = 1;
		longbits = LongBits;

		var util = requireMinimal();

		/**
		 * Constructs new long bits.
		 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
		 * @memberof util
		 * @constructor
		 * @param {number} lo Low 32 bits, unsigned
		 * @param {number} hi High 32 bits, unsigned
		 */
		function LongBits(lo, hi) {

		    // note that the casts below are theoretically unnecessary as of today, but older statically
		    // generated converter code might still call the ctor with signed 32bits. kept for compat.

		    /**
		     * Low bits.
		     * @type {number}
		     */
		    this.lo = lo >>> 0;

		    /**
		     * High bits.
		     * @type {number}
		     */
		    this.hi = hi >>> 0;
		}

		/**
		 * Zero bits.
		 * @memberof util.LongBits
		 * @type {util.LongBits}
		 */
		var zero = LongBits.zero = new LongBits(0, 0);

		zero.toNumber = function() { return 0; };
		zero.zzEncode = zero.zzDecode = function() { return this; };
		zero.length = function() { return 1; };

		/**
		 * Zero hash.
		 * @memberof util.LongBits
		 * @type {string}
		 */
		var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

		/**
		 * Constructs new long bits from the specified number.
		 * @param {number} value Value
		 * @returns {util.LongBits} Instance
		 */
		LongBits.fromNumber = function fromNumber(value) {
		    if (value === 0)
		        return zero;
		    var sign = value < 0;
		    if (sign)
		        value = -value;
		    var lo = value >>> 0,
		        hi = (value - lo) / 4294967296 >>> 0;
		    if (sign) {
		        hi = ~hi >>> 0;
		        lo = ~lo >>> 0;
		        if (++lo > 4294967295) {
		            lo = 0;
		            if (++hi > 4294967295)
		                hi = 0;
		        }
		    }
		    return new LongBits(lo, hi);
		};

		/**
		 * Constructs new long bits from a number, long or string.
		 * @param {Long|number|string} value Value
		 * @returns {util.LongBits} Instance
		 */
		LongBits.from = function from(value) {
		    if (typeof value === "number")
		        return LongBits.fromNumber(value);
		    if (util.isString(value)) {
		        /* istanbul ignore else */
		        if (util.Long)
		            value = util.Long.fromString(value);
		        else
		            return LongBits.fromNumber(parseInt(value, 10));
		    }
		    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
		};

		/**
		 * Converts this long bits to a possibly unsafe JavaScript number.
		 * @param {boolean} [unsigned=false] Whether unsigned or not
		 * @returns {number} Possibly unsafe number
		 */
		LongBits.prototype.toNumber = function toNumber(unsigned) {
		    if (!unsigned && this.hi >>> 31) {
		        var lo = ~this.lo + 1 >>> 0,
		            hi = ~this.hi     >>> 0;
		        if (!lo)
		            hi = hi + 1 >>> 0;
		        return -(lo + hi * 4294967296);
		    }
		    return this.lo + this.hi * 4294967296;
		};

		/**
		 * Converts this long bits to a long.
		 * @param {boolean} [unsigned=false] Whether unsigned or not
		 * @returns {Long} Long
		 */
		LongBits.prototype.toLong = function toLong(unsigned) {
		    return util.Long
		        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
		        /* istanbul ignore next */
		        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
		};

		var charCodeAt = String.prototype.charCodeAt;

		/**
		 * Constructs new long bits from the specified 8 characters long hash.
		 * @param {string} hash Hash
		 * @returns {util.LongBits} Bits
		 */
		LongBits.fromHash = function fromHash(hash) {
		    if (hash === zeroHash)
		        return zero;
		    return new LongBits(
		        ( charCodeAt.call(hash, 0)
		        | charCodeAt.call(hash, 1) << 8
		        | charCodeAt.call(hash, 2) << 16
		        | charCodeAt.call(hash, 3) << 24) >>> 0
		    ,
		        ( charCodeAt.call(hash, 4)
		        | charCodeAt.call(hash, 5) << 8
		        | charCodeAt.call(hash, 6) << 16
		        | charCodeAt.call(hash, 7) << 24) >>> 0
		    );
		};

		/**
		 * Converts this long bits to a 8 characters long hash.
		 * @returns {string} Hash
		 */
		LongBits.prototype.toHash = function toHash() {
		    return String.fromCharCode(
		        this.lo        & 255,
		        this.lo >>> 8  & 255,
		        this.lo >>> 16 & 255,
		        this.lo >>> 24      ,
		        this.hi        & 255,
		        this.hi >>> 8  & 255,
		        this.hi >>> 16 & 255,
		        this.hi >>> 24
		    );
		};

		/**
		 * Zig-zag encodes this long bits.
		 * @returns {util.LongBits} `this`
		 */
		LongBits.prototype.zzEncode = function zzEncode() {
		    var mask =   this.hi >> 31;
		    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
		    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
		    return this;
		};

		/**
		 * Zig-zag decodes this long bits.
		 * @returns {util.LongBits} `this`
		 */
		LongBits.prototype.zzDecode = function zzDecode() {
		    var mask = -(this.lo & 1);
		    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
		    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
		    return this;
		};

		/**
		 * Calculates the length of this longbits when encoded as a varint.
		 * @returns {number} Length
		 */
		LongBits.prototype.length = function length() {
		    var part0 =  this.lo,
		        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
		        part2 =  this.hi >>> 24;
		    return part2 === 0
		         ? part1 === 0
		           ? part0 < 16384
		             ? part0 < 128 ? 1 : 2
		             : part0 < 2097152 ? 3 : 4
		           : part1 < 16384
		             ? part1 < 128 ? 5 : 6
		             : part1 < 2097152 ? 7 : 8
		         : part2 < 128 ? 9 : 10;
		};
		return longbits;
	}

	var hasRequiredMinimal;

	function requireMinimal () {
		if (hasRequiredMinimal) return minimal;
		hasRequiredMinimal = 1;
		(function (exports) {
			var util = exports;

			// used to return a Promise where callback is omitted
			util.asPromise = requireAspromise();

			// converts to / from base64 encoded strings
			util.base64 = requireBase64();

			// base class of rpc.Service
			util.EventEmitter = requireEventemitter();

			// float handling accross browsers
			util.float = requireFloat();

			// requires modules optionally and hides the call from bundlers
			util.inquire = requireInquire();

			// converts to / from utf8 encoded strings
			util.utf8 = requireUtf8();

			// provides a node-like buffer pool in the browser
			util.pool = requirePool();

			// utility to work with the low and high bits of a 64 bit value
			util.LongBits = requireLongbits();

			/**
			 * Whether running within node or not.
			 * @memberof util
			 * @type {boolean}
			 */
			util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
			                   && commonjsGlobal
			                   && commonjsGlobal.process
			                   && commonjsGlobal.process.versions
			                   && commonjsGlobal.process.versions.node);

			/**
			 * Global object reference.
			 * @memberof util
			 * @type {Object}
			 */
			util.global = util.isNode && commonjsGlobal
			           || typeof window !== "undefined" && window
			           || typeof self   !== "undefined" && self
			           || minimal; // eslint-disable-line no-invalid-this

			/**
			 * An immuable empty array.
			 * @memberof util
			 * @type {Array.<*>}
			 * @const
			 */
			util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

			/**
			 * An immutable empty object.
			 * @type {Object}
			 * @const
			 */
			util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

			/**
			 * Tests if the specified value is an integer.
			 * @function
			 * @param {*} value Value to test
			 * @returns {boolean} `true` if the value is an integer
			 */
			util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
			    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
			};

			/**
			 * Tests if the specified value is a string.
			 * @param {*} value Value to test
			 * @returns {boolean} `true` if the value is a string
			 */
			util.isString = function isString(value) {
			    return typeof value === "string" || value instanceof String;
			};

			/**
			 * Tests if the specified value is a non-null object.
			 * @param {*} value Value to test
			 * @returns {boolean} `true` if the value is a non-null object
			 */
			util.isObject = function isObject(value) {
			    return value && typeof value === "object";
			};

			/**
			 * Checks if a property on a message is considered to be present.
			 * This is an alias of {@link util.isSet}.
			 * @function
			 * @param {Object} obj Plain object or message instance
			 * @param {string} prop Property name
			 * @returns {boolean} `true` if considered to be present, otherwise `false`
			 */
			util.isset =

			/**
			 * Checks if a property on a message is considered to be present.
			 * @param {Object} obj Plain object or message instance
			 * @param {string} prop Property name
			 * @returns {boolean} `true` if considered to be present, otherwise `false`
			 */
			util.isSet = function isSet(obj, prop) {
			    var value = obj[prop];
			    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
			        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
			    return false;
			};

			/**
			 * Any compatible Buffer instance.
			 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
			 * @interface Buffer
			 * @extends Uint8Array
			 */

			/**
			 * Node's Buffer class if available.
			 * @type {Constructor<Buffer>}
			 */
			util.Buffer = (function() {
			    try {
			        var Buffer = util.inquire("buffer").Buffer;
			        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
			        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
			    } catch (e) {
			        /* istanbul ignore next */
			        return null;
			    }
			})();

			// Internal alias of or polyfull for Buffer.from.
			util._Buffer_from = null;

			// Internal alias of or polyfill for Buffer.allocUnsafe.
			util._Buffer_allocUnsafe = null;

			/**
			 * Creates a new buffer of whatever type supported by the environment.
			 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
			 * @returns {Uint8Array|Buffer} Buffer
			 */
			util.newBuffer = function newBuffer(sizeOrArray) {
			    /* istanbul ignore next */
			    return typeof sizeOrArray === "number"
			        ? util.Buffer
			            ? util._Buffer_allocUnsafe(sizeOrArray)
			            : new util.Array(sizeOrArray)
			        : util.Buffer
			            ? util._Buffer_from(sizeOrArray)
			            : typeof Uint8Array === "undefined"
			                ? sizeOrArray
			                : new Uint8Array(sizeOrArray);
			};

			/**
			 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
			 * @type {Constructor<Uint8Array>}
			 */
			util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

			/**
			 * Any compatible Long instance.
			 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
			 * @interface Long
			 * @property {number} low Low bits
			 * @property {number} high High bits
			 * @property {boolean} unsigned Whether unsigned or not
			 */

			/**
			 * Long.js's Long class if available.
			 * @type {Constructor<Long>}
			 */
			util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
			         || /* istanbul ignore next */ util.global.Long
			         || util.inquire("long");

			/**
			 * Regular expression used to verify 2 bit (`bool`) map keys.
			 * @type {RegExp}
			 * @const
			 */
			util.key2Re = /^true|false|0|1$/;

			/**
			 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
			 * @type {RegExp}
			 * @const
			 */
			util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

			/**
			 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
			 * @type {RegExp}
			 * @const
			 */
			util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

			/**
			 * Converts a number or long to an 8 characters long hash string.
			 * @param {Long|number} value Value to convert
			 * @returns {string} Hash
			 */
			util.longToHash = function longToHash(value) {
			    return value
			        ? util.LongBits.from(value).toHash()
			        : util.LongBits.zeroHash;
			};

			/**
			 * Converts an 8 characters long hash string to a long or number.
			 * @param {string} hash Hash
			 * @param {boolean} [unsigned=false] Whether unsigned or not
			 * @returns {Long|number} Original value
			 */
			util.longFromHash = function longFromHash(hash, unsigned) {
			    var bits = util.LongBits.fromHash(hash);
			    if (util.Long)
			        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
			    return bits.toNumber(Boolean(unsigned));
			};

			/**
			 * Merges the properties of the source object into the destination object.
			 * @memberof util
			 * @param {Object.<string,*>} dst Destination object
			 * @param {Object.<string,*>} src Source object
			 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
			 * @returns {Object.<string,*>} Destination object
			 */
			function merge(dst, src, ifNotSet) { // used by converters
			    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
			        if (dst[keys[i]] === undefined || !ifNotSet)
			            dst[keys[i]] = src[keys[i]];
			    return dst;
			}

			util.merge = merge;

			/**
			 * Converts the first character of a string to lower case.
			 * @param {string} str String to convert
			 * @returns {string} Converted string
			 */
			util.lcFirst = function lcFirst(str) {
			    return str.charAt(0).toLowerCase() + str.substring(1);
			};

			/**
			 * Creates a custom error constructor.
			 * @memberof util
			 * @param {string} name Error name
			 * @returns {Constructor<Error>} Custom error constructor
			 */
			function newError(name) {

			    function CustomError(message, properties) {

			        if (!(this instanceof CustomError))
			            return new CustomError(message, properties);

			        // Error.call(this, message);
			        // ^ just returns a new error instance because the ctor can be called as a function

			        Object.defineProperty(this, "message", { get: function() { return message; } });

			        /* istanbul ignore next */
			        if (Error.captureStackTrace) // node
			            Error.captureStackTrace(this, CustomError);
			        else
			            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

			        if (properties)
			            merge(this, properties);
			    }

			    CustomError.prototype = Object.create(Error.prototype, {
			        constructor: {
			            value: CustomError,
			            writable: true,
			            enumerable: false,
			            configurable: true,
			        },
			        name: {
			            get: function get() { return name; },
			            set: undefined,
			            enumerable: false,
			            // configurable: false would accurately preserve the behavior of
			            // the original, but I'm guessing that was not intentional.
			            // For an actual error subclass, this property would
			            // be configurable.
			            configurable: true,
			        },
			        toString: {
			            value: function value() { return this.name + ": " + this.message; },
			            writable: true,
			            enumerable: false,
			            configurable: true,
			        },
			    });

			    return CustomError;
			}

			util.newError = newError;

			/**
			 * Constructs a new protocol error.
			 * @classdesc Error subclass indicating a protocol specifc error.
			 * @memberof util
			 * @extends Error
			 * @template T extends Message<T>
			 * @constructor
			 * @param {string} message Error message
			 * @param {Object.<string,*>} [properties] Additional properties
			 * @example
			 * try {
			 *     MyMessage.decode(someBuffer); // throws if required fields are missing
			 * } catch (e) {
			 *     if (e instanceof ProtocolError && e.instance)
			 *         console.log("decoded so far: " + JSON.stringify(e.instance));
			 * }
			 */
			util.ProtocolError = newError("ProtocolError");

			/**
			 * So far decoded message instance.
			 * @name util.ProtocolError#instance
			 * @type {Message<T>}
			 */

			/**
			 * A OneOf getter as returned by {@link util.oneOfGetter}.
			 * @typedef OneOfGetter
			 * @type {function}
			 * @returns {string|undefined} Set field name, if any
			 */

			/**
			 * Builds a getter for a oneof's present field name.
			 * @param {string[]} fieldNames Field names
			 * @returns {OneOfGetter} Unbound getter
			 */
			util.oneOfGetter = function getOneOf(fieldNames) {
			    var fieldMap = {};
			    for (var i = 0; i < fieldNames.length; ++i)
			        fieldMap[fieldNames[i]] = 1;

			    /**
			     * @returns {string|undefined} Set field name, if any
			     * @this Object
			     * @ignore
			     */
			    return function() { // eslint-disable-line consistent-return
			        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
			            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
			                return keys[i];
			    };
			};

			/**
			 * A OneOf setter as returned by {@link util.oneOfSetter}.
			 * @typedef OneOfSetter
			 * @type {function}
			 * @param {string|undefined} value Field name
			 * @returns {undefined}
			 */

			/**
			 * Builds a setter for a oneof's present field name.
			 * @param {string[]} fieldNames Field names
			 * @returns {OneOfSetter} Unbound setter
			 */
			util.oneOfSetter = function setOneOf(fieldNames) {

			    /**
			     * @param {string} name Field name
			     * @returns {undefined}
			     * @this Object
			     * @ignore
			     */
			    return function(name) {
			        for (var i = 0; i < fieldNames.length; ++i)
			            if (fieldNames[i] !== name)
			                delete this[fieldNames[i]];
			    };
			};

			/**
			 * Default conversion options used for {@link Message#toJSON} implementations.
			 *
			 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
			 *
			 * - Longs become strings
			 * - Enums become string keys
			 * - Bytes become base64 encoded strings
			 * - (Sub-)Messages become plain objects
			 * - Maps become plain objects with all string keys
			 * - Repeated fields become arrays
			 * - NaN and Infinity for float and double fields become strings
			 *
			 * @type {IConversionOptions}
			 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
			 */
			util.toJSONOptions = {
			    longs: String,
			    enums: String,
			    bytes: String,
			    json: true
			};

			// Sets up buffer utility according to the environment (called in index-minimal)
			util._configure = function() {
			    var Buffer = util.Buffer;
			    /* istanbul ignore if */
			    if (!Buffer) {
			        util._Buffer_from = util._Buffer_allocUnsafe = null;
			        return;
			    }
			    // because node 4.x buffers are incompatible & immutable
			    // see: https://github.com/dcodeIO/protobuf.js/pull/665
			    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
			        /* istanbul ignore next */
			        function Buffer_from(value, encoding) {
			            return new Buffer(value, encoding);
			        };
			    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
			        /* istanbul ignore next */
			        function Buffer_allocUnsafe(size) {
			            return new Buffer(size);
			        };
			}; 
		} (minimal));
		return minimal;
	}

	var writer;
	var hasRequiredWriter;

	function requireWriter () {
		if (hasRequiredWriter) return writer;
		hasRequiredWriter = 1;
		writer = Writer;

		var util      = requireMinimal();

		var BufferWriter; // cyclic

		var LongBits  = util.LongBits,
		    base64    = util.base64,
		    utf8      = util.utf8;

		/**
		 * Constructs a new writer operation instance.
		 * @classdesc Scheduled writer operation.
		 * @constructor
		 * @param {function(*, Uint8Array, number)} fn Function to call
		 * @param {number} len Value byte length
		 * @param {*} val Value to write
		 * @ignore
		 */
		function Op(fn, len, val) {

		    /**
		     * Function to call.
		     * @type {function(Uint8Array, number, *)}
		     */
		    this.fn = fn;

		    /**
		     * Value byte length.
		     * @type {number}
		     */
		    this.len = len;

		    /**
		     * Next operation.
		     * @type {Writer.Op|undefined}
		     */
		    this.next = undefined;

		    /**
		     * Value to write.
		     * @type {*}
		     */
		    this.val = val; // type varies
		}

		/* istanbul ignore next */
		function noop() {} // eslint-disable-line no-empty-function

		/**
		 * Constructs a new writer state instance.
		 * @classdesc Copied writer state.
		 * @memberof Writer
		 * @constructor
		 * @param {Writer} writer Writer to copy state from
		 * @ignore
		 */
		function State(writer) {

		    /**
		     * Current head.
		     * @type {Writer.Op}
		     */
		    this.head = writer.head;

		    /**
		     * Current tail.
		     * @type {Writer.Op}
		     */
		    this.tail = writer.tail;

		    /**
		     * Current buffer length.
		     * @type {number}
		     */
		    this.len = writer.len;

		    /**
		     * Next state.
		     * @type {State|null}
		     */
		    this.next = writer.states;
		}

		/**
		 * Constructs a new writer instance.
		 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
		 * @constructor
		 */
		function Writer() {

		    /**
		     * Current length.
		     * @type {number}
		     */
		    this.len = 0;

		    /**
		     * Operations head.
		     * @type {Object}
		     */
		    this.head = new Op(noop, 0, 0);

		    /**
		     * Operations tail
		     * @type {Object}
		     */
		    this.tail = this.head;

		    /**
		     * Linked forked states.
		     * @type {Object|null}
		     */
		    this.states = null;

		    // When a value is written, the writer calculates its byte length and puts it into a linked
		    // list of operations to perform when finish() is called. This both allows us to allocate
		    // buffers of the exact required size and reduces the amount of work we have to do compared
		    // to first calculating over objects and then encoding over objects. In our case, the encoding
		    // part is just a linked list walk calling operations with already prepared values.
		}

		var create = function create() {
		    return util.Buffer
		        ? function create_buffer_setup() {
		            return (Writer.create = function create_buffer() {
		                return new BufferWriter();
		            })();
		        }
		        /* istanbul ignore next */
		        : function create_array() {
		            return new Writer();
		        };
		};

		/**
		 * Creates a new writer.
		 * @function
		 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
		 */
		Writer.create = create();

		/**
		 * Allocates a buffer of the specified size.
		 * @param {number} size Buffer size
		 * @returns {Uint8Array} Buffer
		 */
		Writer.alloc = function alloc(size) {
		    return new util.Array(size);
		};

		// Use Uint8Array buffer pool in the browser, just like node does with buffers
		/* istanbul ignore else */
		if (util.Array !== Array)
		    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

		/**
		 * Pushes a new operation to the queue.
		 * @param {function(Uint8Array, number, *)} fn Function to call
		 * @param {number} len Value byte length
		 * @param {number} val Value to write
		 * @returns {Writer} `this`
		 * @private
		 */
		Writer.prototype._push = function push(fn, len, val) {
		    this.tail = this.tail.next = new Op(fn, len, val);
		    this.len += len;
		    return this;
		};

		function writeByte(val, buf, pos) {
		    buf[pos] = val & 255;
		}

		function writeVarint32(val, buf, pos) {
		    while (val > 127) {
		        buf[pos++] = val & 127 | 128;
		        val >>>= 7;
		    }
		    buf[pos] = val;
		}

		/**
		 * Constructs a new varint writer operation instance.
		 * @classdesc Scheduled varint writer operation.
		 * @extends Op
		 * @constructor
		 * @param {number} len Value byte length
		 * @param {number} val Value to write
		 * @ignore
		 */
		function VarintOp(len, val) {
		    this.len = len;
		    this.next = undefined;
		    this.val = val;
		}

		VarintOp.prototype = Object.create(Op.prototype);
		VarintOp.prototype.fn = writeVarint32;

		/**
		 * Writes an unsigned 32 bit value as a varint.
		 * @param {number} value Value to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.uint32 = function write_uint32(value) {
		    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
		    // uint32 is by far the most frequently used operation and benefits significantly from this.
		    this.len += (this.tail = this.tail.next = new VarintOp(
		        (value = value >>> 0)
		                < 128       ? 1
		        : value < 16384     ? 2
		        : value < 2097152   ? 3
		        : value < 268435456 ? 4
		        :                     5,
		    value)).len;
		    return this;
		};

		/**
		 * Writes a signed 32 bit value as a varint.
		 * @function
		 * @param {number} value Value to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.int32 = function write_int32(value) {
		    return value < 0
		        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
		        : this.uint32(value);
		};

		/**
		 * Writes a 32 bit value as a varint, zig-zag encoded.
		 * @param {number} value Value to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.sint32 = function write_sint32(value) {
		    return this.uint32((value << 1 ^ value >> 31) >>> 0);
		};

		function writeVarint64(val, buf, pos) {
		    while (val.hi) {
		        buf[pos++] = val.lo & 127 | 128;
		        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
		        val.hi >>>= 7;
		    }
		    while (val.lo > 127) {
		        buf[pos++] = val.lo & 127 | 128;
		        val.lo = val.lo >>> 7;
		    }
		    buf[pos++] = val.lo;
		}

		/**
		 * Writes an unsigned 64 bit value as a varint.
		 * @param {Long|number|string} value Value to write
		 * @returns {Writer} `this`
		 * @throws {TypeError} If `value` is a string and no long library is present.
		 */
		Writer.prototype.uint64 = function write_uint64(value) {
		    var bits = LongBits.from(value);
		    return this._push(writeVarint64, bits.length(), bits);
		};

		/**
		 * Writes a signed 64 bit value as a varint.
		 * @function
		 * @param {Long|number|string} value Value to write
		 * @returns {Writer} `this`
		 * @throws {TypeError} If `value` is a string and no long library is present.
		 */
		Writer.prototype.int64 = Writer.prototype.uint64;

		/**
		 * Writes a signed 64 bit value as a varint, zig-zag encoded.
		 * @param {Long|number|string} value Value to write
		 * @returns {Writer} `this`
		 * @throws {TypeError} If `value` is a string and no long library is present.
		 */
		Writer.prototype.sint64 = function write_sint64(value) {
		    var bits = LongBits.from(value).zzEncode();
		    return this._push(writeVarint64, bits.length(), bits);
		};

		/**
		 * Writes a boolish value as a varint.
		 * @param {boolean} value Value to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.bool = function write_bool(value) {
		    return this._push(writeByte, 1, value ? 1 : 0);
		};

		function writeFixed32(val, buf, pos) {
		    buf[pos    ] =  val         & 255;
		    buf[pos + 1] =  val >>> 8   & 255;
		    buf[pos + 2] =  val >>> 16  & 255;
		    buf[pos + 3] =  val >>> 24;
		}

		/**
		 * Writes an unsigned 32 bit value as fixed 32 bits.
		 * @param {number} value Value to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.fixed32 = function write_fixed32(value) {
		    return this._push(writeFixed32, 4, value >>> 0);
		};

		/**
		 * Writes a signed 32 bit value as fixed 32 bits.
		 * @function
		 * @param {number} value Value to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.sfixed32 = Writer.prototype.fixed32;

		/**
		 * Writes an unsigned 64 bit value as fixed 64 bits.
		 * @param {Long|number|string} value Value to write
		 * @returns {Writer} `this`
		 * @throws {TypeError} If `value` is a string and no long library is present.
		 */
		Writer.prototype.fixed64 = function write_fixed64(value) {
		    var bits = LongBits.from(value);
		    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
		};

		/**
		 * Writes a signed 64 bit value as fixed 64 bits.
		 * @function
		 * @param {Long|number|string} value Value to write
		 * @returns {Writer} `this`
		 * @throws {TypeError} If `value` is a string and no long library is present.
		 */
		Writer.prototype.sfixed64 = Writer.prototype.fixed64;

		/**
		 * Writes a float (32 bit).
		 * @function
		 * @param {number} value Value to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.float = function write_float(value) {
		    return this._push(util.float.writeFloatLE, 4, value);
		};

		/**
		 * Writes a double (64 bit float).
		 * @function
		 * @param {number} value Value to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.double = function write_double(value) {
		    return this._push(util.float.writeDoubleLE, 8, value);
		};

		var writeBytes = util.Array.prototype.set
		    ? function writeBytes_set(val, buf, pos) {
		        buf.set(val, pos); // also works for plain array values
		    }
		    /* istanbul ignore next */
		    : function writeBytes_for(val, buf, pos) {
		        for (var i = 0; i < val.length; ++i)
		            buf[pos + i] = val[i];
		    };

		/**
		 * Writes a sequence of bytes.
		 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.bytes = function write_bytes(value) {
		    var len = value.length >>> 0;
		    if (!len)
		        return this._push(writeByte, 1, 0);
		    if (util.isString(value)) {
		        var buf = Writer.alloc(len = base64.length(value));
		        base64.decode(value, buf, 0);
		        value = buf;
		    }
		    return this.uint32(len)._push(writeBytes, len, value);
		};

		/**
		 * Writes a string.
		 * @param {string} value Value to write
		 * @returns {Writer} `this`
		 */
		Writer.prototype.string = function write_string(value) {
		    var len = utf8.length(value);
		    return len
		        ? this.uint32(len)._push(utf8.write, len, value)
		        : this._push(writeByte, 1, 0);
		};

		/**
		 * Forks this writer's state by pushing it to a stack.
		 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
		 * @returns {Writer} `this`
		 */
		Writer.prototype.fork = function fork() {
		    this.states = new State(this);
		    this.head = this.tail = new Op(noop, 0, 0);
		    this.len = 0;
		    return this;
		};

		/**
		 * Resets this instance to the last state.
		 * @returns {Writer} `this`
		 */
		Writer.prototype.reset = function reset() {
		    if (this.states) {
		        this.head   = this.states.head;
		        this.tail   = this.states.tail;
		        this.len    = this.states.len;
		        this.states = this.states.next;
		    } else {
		        this.head = this.tail = new Op(noop, 0, 0);
		        this.len  = 0;
		    }
		    return this;
		};

		/**
		 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
		 * @returns {Writer} `this`
		 */
		Writer.prototype.ldelim = function ldelim() {
		    var head = this.head,
		        tail = this.tail,
		        len  = this.len;
		    this.reset().uint32(len);
		    if (len) {
		        this.tail.next = head.next; // skip noop
		        this.tail = tail;
		        this.len += len;
		    }
		    return this;
		};

		/**
		 * Finishes the write operation.
		 * @returns {Uint8Array} Finished buffer
		 */
		Writer.prototype.finish = function finish() {
		    var head = this.head.next, // skip noop
		        buf  = this.constructor.alloc(this.len),
		        pos  = 0;
		    while (head) {
		        head.fn(head.val, buf, pos);
		        pos += head.len;
		        head = head.next;
		    }
		    // this.head = this.tail = null;
		    return buf;
		};

		Writer._configure = function(BufferWriter_) {
		    BufferWriter = BufferWriter_;
		    Writer.create = create();
		    BufferWriter._configure();
		};
		return writer;
	}

	var writer_buffer;
	var hasRequiredWriter_buffer;

	function requireWriter_buffer () {
		if (hasRequiredWriter_buffer) return writer_buffer;
		hasRequiredWriter_buffer = 1;
		writer_buffer = BufferWriter;

		// extends Writer
		var Writer = requireWriter();
		(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

		var util = requireMinimal();

		/**
		 * Constructs a new buffer writer instance.
		 * @classdesc Wire format writer using node buffers.
		 * @extends Writer
		 * @constructor
		 */
		function BufferWriter() {
		    Writer.call(this);
		}

		BufferWriter._configure = function () {
		    /**
		     * Allocates a buffer of the specified size.
		     * @function
		     * @param {number} size Buffer size
		     * @returns {Buffer} Buffer
		     */
		    BufferWriter.alloc = util._Buffer_allocUnsafe;

		    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
		        ? function writeBytesBuffer_set(val, buf, pos) {
		          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
		          // also works for plain array values
		        }
		        /* istanbul ignore next */
		        : function writeBytesBuffer_copy(val, buf, pos) {
		          if (val.copy) // Buffer values
		            val.copy(buf, pos, 0, val.length);
		          else for (var i = 0; i < val.length;) // plain array values
		            buf[pos++] = val[i++];
		        };
		};


		/**
		 * @override
		 */
		BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
		    if (util.isString(value))
		        value = util._Buffer_from(value, "base64");
		    var len = value.length >>> 0;
		    this.uint32(len);
		    if (len)
		        this._push(BufferWriter.writeBytesBuffer, len, value);
		    return this;
		};

		function writeStringBuffer(val, buf, pos) {
		    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
		        util.utf8.write(val, buf, pos);
		    else if (buf.utf8Write)
		        buf.utf8Write(val, pos);
		    else
		        buf.write(val, pos);
		}

		/**
		 * @override
		 */
		BufferWriter.prototype.string = function write_string_buffer(value) {
		    var len = util.Buffer.byteLength(value);
		    this.uint32(len);
		    if (len)
		        this._push(writeStringBuffer, len, value);
		    return this;
		};


		/**
		 * Finishes the write operation.
		 * @name BufferWriter#finish
		 * @function
		 * @returns {Buffer} Finished buffer
		 */

		BufferWriter._configure();
		return writer_buffer;
	}

	var reader;
	var hasRequiredReader;

	function requireReader () {
		if (hasRequiredReader) return reader;
		hasRequiredReader = 1;
		reader = Reader;

		var util      = requireMinimal();

		var BufferReader; // cyclic

		var LongBits  = util.LongBits,
		    utf8      = util.utf8;

		/* istanbul ignore next */
		function indexOutOfRange(reader, writeLength) {
		    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
		}

		/**
		 * Constructs a new reader instance using the specified buffer.
		 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
		 * @constructor
		 * @param {Uint8Array} buffer Buffer to read from
		 */
		function Reader(buffer) {

		    /**
		     * Read buffer.
		     * @type {Uint8Array}
		     */
		    this.buf = buffer;

		    /**
		     * Read buffer position.
		     * @type {number}
		     */
		    this.pos = 0;

		    /**
		     * Read buffer length.
		     * @type {number}
		     */
		    this.len = buffer.length;
		}

		var create_array = typeof Uint8Array !== "undefined"
		    ? function create_typed_array(buffer) {
		        if (buffer instanceof Uint8Array || Array.isArray(buffer))
		            return new Reader(buffer);
		        throw Error("illegal buffer");
		    }
		    /* istanbul ignore next */
		    : function create_array(buffer) {
		        if (Array.isArray(buffer))
		            return new Reader(buffer);
		        throw Error("illegal buffer");
		    };

		var create = function create() {
		    return util.Buffer
		        ? function create_buffer_setup(buffer) {
		            return (Reader.create = function create_buffer(buffer) {
		                return util.Buffer.isBuffer(buffer)
		                    ? new BufferReader(buffer)
		                    /* istanbul ignore next */
		                    : create_array(buffer);
		            })(buffer);
		        }
		        /* istanbul ignore next */
		        : create_array;
		};

		/**
		 * Creates a new reader using the specified buffer.
		 * @function
		 * @param {Uint8Array|Buffer} buffer Buffer to read from
		 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
		 * @throws {Error} If `buffer` is not a valid buffer
		 */
		Reader.create = create();

		Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

		/**
		 * Reads a varint as an unsigned 32 bit value.
		 * @function
		 * @returns {number} Value read
		 */
		Reader.prototype.uint32 = (function read_uint32_setup() {
		    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
		    return function read_uint32() {
		        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
		        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
		        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
		        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
		        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

		        /* istanbul ignore if */
		        if ((this.pos += 5) > this.len) {
		            this.pos = this.len;
		            throw indexOutOfRange(this, 10);
		        }
		        return value;
		    };
		})();

		/**
		 * Reads a varint as a signed 32 bit value.
		 * @returns {number} Value read
		 */
		Reader.prototype.int32 = function read_int32() {
		    return this.uint32() | 0;
		};

		/**
		 * Reads a zig-zag encoded varint as a signed 32 bit value.
		 * @returns {number} Value read
		 */
		Reader.prototype.sint32 = function read_sint32() {
		    var value = this.uint32();
		    return value >>> 1 ^ -(value & 1) | 0;
		};

		/* eslint-disable no-invalid-this */

		function readLongVarint() {
		    // tends to deopt with local vars for octet etc.
		    var bits = new LongBits(0, 0);
		    var i = 0;
		    if (this.len - this.pos > 4) { // fast route (lo)
		        for (; i < 4; ++i) {
		            // 1st..4th
		            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
		            if (this.buf[this.pos++] < 128)
		                return bits;
		        }
		        // 5th
		        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
		        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
		        if (this.buf[this.pos++] < 128)
		            return bits;
		        i = 0;
		    } else {
		        for (; i < 3; ++i) {
		            /* istanbul ignore if */
		            if (this.pos >= this.len)
		                throw indexOutOfRange(this);
		            // 1st..3th
		            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
		            if (this.buf[this.pos++] < 128)
		                return bits;
		        }
		        // 4th
		        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
		        return bits;
		    }
		    if (this.len - this.pos > 4) { // fast route (hi)
		        for (; i < 5; ++i) {
		            // 6th..10th
		            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
		            if (this.buf[this.pos++] < 128)
		                return bits;
		        }
		    } else {
		        for (; i < 5; ++i) {
		            /* istanbul ignore if */
		            if (this.pos >= this.len)
		                throw indexOutOfRange(this);
		            // 6th..10th
		            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
		            if (this.buf[this.pos++] < 128)
		                return bits;
		        }
		    }
		    /* istanbul ignore next */
		    throw Error("invalid varint encoding");
		}

		/* eslint-enable no-invalid-this */

		/**
		 * Reads a varint as a signed 64 bit value.
		 * @name Reader#int64
		 * @function
		 * @returns {Long} Value read
		 */

		/**
		 * Reads a varint as an unsigned 64 bit value.
		 * @name Reader#uint64
		 * @function
		 * @returns {Long} Value read
		 */

		/**
		 * Reads a zig-zag encoded varint as a signed 64 bit value.
		 * @name Reader#sint64
		 * @function
		 * @returns {Long} Value read
		 */

		/**
		 * Reads a varint as a boolean.
		 * @returns {boolean} Value read
		 */
		Reader.prototype.bool = function read_bool() {
		    return this.uint32() !== 0;
		};

		function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
		    return (buf[end - 4]
		          | buf[end - 3] << 8
		          | buf[end - 2] << 16
		          | buf[end - 1] << 24) >>> 0;
		}

		/**
		 * Reads fixed 32 bits as an unsigned 32 bit integer.
		 * @returns {number} Value read
		 */
		Reader.prototype.fixed32 = function read_fixed32() {

		    /* istanbul ignore if */
		    if (this.pos + 4 > this.len)
		        throw indexOutOfRange(this, 4);

		    return readFixed32_end(this.buf, this.pos += 4);
		};

		/**
		 * Reads fixed 32 bits as a signed 32 bit integer.
		 * @returns {number} Value read
		 */
		Reader.prototype.sfixed32 = function read_sfixed32() {

		    /* istanbul ignore if */
		    if (this.pos + 4 > this.len)
		        throw indexOutOfRange(this, 4);

		    return readFixed32_end(this.buf, this.pos += 4) | 0;
		};

		/* eslint-disable no-invalid-this */

		function readFixed64(/* this: Reader */) {

		    /* istanbul ignore if */
		    if (this.pos + 8 > this.len)
		        throw indexOutOfRange(this, 8);

		    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
		}

		/* eslint-enable no-invalid-this */

		/**
		 * Reads fixed 64 bits.
		 * @name Reader#fixed64
		 * @function
		 * @returns {Long} Value read
		 */

		/**
		 * Reads zig-zag encoded fixed 64 bits.
		 * @name Reader#sfixed64
		 * @function
		 * @returns {Long} Value read
		 */

		/**
		 * Reads a float (32 bit) as a number.
		 * @function
		 * @returns {number} Value read
		 */
		Reader.prototype.float = function read_float() {

		    /* istanbul ignore if */
		    if (this.pos + 4 > this.len)
		        throw indexOutOfRange(this, 4);

		    var value = util.float.readFloatLE(this.buf, this.pos);
		    this.pos += 4;
		    return value;
		};

		/**
		 * Reads a double (64 bit float) as a number.
		 * @function
		 * @returns {number} Value read
		 */
		Reader.prototype.double = function read_double() {

		    /* istanbul ignore if */
		    if (this.pos + 8 > this.len)
		        throw indexOutOfRange(this, 4);

		    var value = util.float.readDoubleLE(this.buf, this.pos);
		    this.pos += 8;
		    return value;
		};

		/**
		 * Reads a sequence of bytes preceeded by its length as a varint.
		 * @returns {Uint8Array} Value read
		 */
		Reader.prototype.bytes = function read_bytes() {
		    var length = this.uint32(),
		        start  = this.pos,
		        end    = this.pos + length;

		    /* istanbul ignore if */
		    if (end > this.len)
		        throw indexOutOfRange(this, length);

		    this.pos += length;
		    if (Array.isArray(this.buf)) // plain array
		        return this.buf.slice(start, end);

		    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1
		        var nativeBuffer = util.Buffer;
		        return nativeBuffer
		            ? nativeBuffer.alloc(0)
		            : new this.buf.constructor(0);
		    }
		    return this._slice.call(this.buf, start, end);
		};

		/**
		 * Reads a string preceeded by its byte length as a varint.
		 * @returns {string} Value read
		 */
		Reader.prototype.string = function read_string() {
		    var bytes = this.bytes();
		    return utf8.read(bytes, 0, bytes.length);
		};

		/**
		 * Skips the specified number of bytes if specified, otherwise skips a varint.
		 * @param {number} [length] Length if known, otherwise a varint is assumed
		 * @returns {Reader} `this`
		 */
		Reader.prototype.skip = function skip(length) {
		    if (typeof length === "number") {
		        /* istanbul ignore if */
		        if (this.pos + length > this.len)
		            throw indexOutOfRange(this, length);
		        this.pos += length;
		    } else {
		        do {
		            /* istanbul ignore if */
		            if (this.pos >= this.len)
		                throw indexOutOfRange(this);
		        } while (this.buf[this.pos++] & 128);
		    }
		    return this;
		};

		/**
		 * Skips the next element of the specified wire type.
		 * @param {number} wireType Wire type received
		 * @returns {Reader} `this`
		 */
		Reader.prototype.skipType = function(wireType) {
		    switch (wireType) {
		        case 0:
		            this.skip();
		            break;
		        case 1:
		            this.skip(8);
		            break;
		        case 2:
		            this.skip(this.uint32());
		            break;
		        case 3:
		            while ((wireType = this.uint32() & 7) !== 4) {
		                this.skipType(wireType);
		            }
		            break;
		        case 5:
		            this.skip(4);
		            break;

		        /* istanbul ignore next */
		        default:
		            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
		    }
		    return this;
		};

		Reader._configure = function(BufferReader_) {
		    BufferReader = BufferReader_;
		    Reader.create = create();
		    BufferReader._configure();

		    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
		    util.merge(Reader.prototype, {

		        int64: function read_int64() {
		            return readLongVarint.call(this)[fn](false);
		        },

		        uint64: function read_uint64() {
		            return readLongVarint.call(this)[fn](true);
		        },

		        sint64: function read_sint64() {
		            return readLongVarint.call(this).zzDecode()[fn](false);
		        },

		        fixed64: function read_fixed64() {
		            return readFixed64.call(this)[fn](true);
		        },

		        sfixed64: function read_sfixed64() {
		            return readFixed64.call(this)[fn](false);
		        }

		    });
		};
		return reader;
	}

	var reader_buffer;
	var hasRequiredReader_buffer;

	function requireReader_buffer () {
		if (hasRequiredReader_buffer) return reader_buffer;
		hasRequiredReader_buffer = 1;
		reader_buffer = BufferReader;

		// extends Reader
		var Reader = requireReader();
		(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

		var util = requireMinimal();

		/**
		 * Constructs a new buffer reader instance.
		 * @classdesc Wire format reader using node buffers.
		 * @extends Reader
		 * @constructor
		 * @param {Buffer} buffer Buffer to read from
		 */
		function BufferReader(buffer) {
		    Reader.call(this, buffer);

		    /**
		     * Read buffer.
		     * @name BufferReader#buf
		     * @type {Buffer}
		     */
		}

		BufferReader._configure = function () {
		    /* istanbul ignore else */
		    if (util.Buffer)
		        BufferReader.prototype._slice = util.Buffer.prototype.slice;
		};


		/**
		 * @override
		 */
		BufferReader.prototype.string = function read_string_buffer() {
		    var len = this.uint32(); // modifies pos
		    return this.buf.utf8Slice
		        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
		        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
		};

		/**
		 * Reads a sequence of bytes preceeded by its length as a varint.
		 * @name BufferReader#bytes
		 * @function
		 * @returns {Buffer} Value read
		 */

		BufferReader._configure();
		return reader_buffer;
	}

	var rpc = {};

	var service$1;
	var hasRequiredService$1;

	function requireService$1 () {
		if (hasRequiredService$1) return service$1;
		hasRequiredService$1 = 1;
		service$1 = Service;

		var util = requireMinimal();

		// Extends EventEmitter
		(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

		/**
		 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
		 *
		 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
		 * @typedef rpc.ServiceMethodCallback
		 * @template TRes extends Message<TRes>
		 * @type {function}
		 * @param {Error|null} error Error, if any
		 * @param {TRes} [response] Response message
		 * @returns {undefined}
		 */

		/**
		 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
		 * @typedef rpc.ServiceMethod
		 * @template TReq extends Message<TReq>
		 * @template TRes extends Message<TRes>
		 * @type {function}
		 * @param {TReq|Properties<TReq>} request Request message or plain object
		 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
		 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
		 */

		/**
		 * Constructs a new RPC service instance.
		 * @classdesc An RPC service as returned by {@link Service#create}.
		 * @exports rpc.Service
		 * @extends util.EventEmitter
		 * @constructor
		 * @param {RPCImpl} rpcImpl RPC implementation
		 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
		 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
		 */
		function Service(rpcImpl, requestDelimited, responseDelimited) {

		    if (typeof rpcImpl !== "function")
		        throw TypeError("rpcImpl must be a function");

		    util.EventEmitter.call(this);

		    /**
		     * RPC implementation. Becomes `null` once the service is ended.
		     * @type {RPCImpl|null}
		     */
		    this.rpcImpl = rpcImpl;

		    /**
		     * Whether requests are length-delimited.
		     * @type {boolean}
		     */
		    this.requestDelimited = Boolean(requestDelimited);

		    /**
		     * Whether responses are length-delimited.
		     * @type {boolean}
		     */
		    this.responseDelimited = Boolean(responseDelimited);
		}

		/**
		 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
		 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
		 * @param {Constructor<TReq>} requestCtor Request constructor
		 * @param {Constructor<TRes>} responseCtor Response constructor
		 * @param {TReq|Properties<TReq>} request Request message or plain object
		 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
		 * @returns {undefined}
		 * @template TReq extends Message<TReq>
		 * @template TRes extends Message<TRes>
		 */
		Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

		    if (!request)
		        throw TypeError("request must be specified");

		    var self = this;
		    if (!callback)
		        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

		    if (!self.rpcImpl) {
		        setTimeout(function() { callback(Error("already ended")); }, 0);
		        return undefined;
		    }

		    try {
		        return self.rpcImpl(
		            method,
		            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
		            function rpcCallback(err, response) {

		                if (err) {
		                    self.emit("error", err, method);
		                    return callback(err);
		                }

		                if (response === null) {
		                    self.end(/* endedByRPC */ true);
		                    return undefined;
		                }

		                if (!(response instanceof responseCtor)) {
		                    try {
		                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
		                    } catch (err) {
		                        self.emit("error", err, method);
		                        return callback(err);
		                    }
		                }

		                self.emit("data", response, method);
		                return callback(null, response);
		            }
		        );
		    } catch (err) {
		        self.emit("error", err, method);
		        setTimeout(function() { callback(err); }, 0);
		        return undefined;
		    }
		};

		/**
		 * Ends this service and emits the `end` event.
		 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
		 * @returns {rpc.Service} `this`
		 */
		Service.prototype.end = function end(endedByRPC) {
		    if (this.rpcImpl) {
		        if (!endedByRPC) // signal end to rpcImpl
		            this.rpcImpl(null, null, null);
		        this.rpcImpl = null;
		        this.emit("end").off();
		    }
		    return this;
		};
		return service$1;
	}

	var hasRequiredRpc;

	function requireRpc () {
		if (hasRequiredRpc) return rpc;
		hasRequiredRpc = 1;
		(function (exports) {

			/**
			 * Streaming RPC helpers.
			 * @namespace
			 */
			var rpc = exports;

			/**
			 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
			 * @typedef RPCImpl
			 * @type {function}
			 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
			 * @param {Uint8Array} requestData Request data
			 * @param {RPCImplCallback} callback Callback function
			 * @returns {undefined}
			 * @example
			 * function rpcImpl(method, requestData, callback) {
			 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
			 *         throw Error("no such method");
			 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
			 *         callback(err, responseData);
			 *     });
			 * }
			 */

			/**
			 * Node-style callback as used by {@link RPCImpl}.
			 * @typedef RPCImplCallback
			 * @type {function}
			 * @param {Error|null} error Error, if any, otherwise `null`
			 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
			 * @returns {undefined}
			 */

			rpc.Service = requireService$1(); 
		} (rpc));
		return rpc;
	}

	var roots;
	var hasRequiredRoots;

	function requireRoots () {
		if (hasRequiredRoots) return roots;
		hasRequiredRoots = 1;
		roots = {};

		/**
		 * Named roots.
		 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
		 * Can also be used manually to make roots available across modules.
		 * @name roots
		 * @type {Object.<string,Root>}
		 * @example
		 * // pbjs -r myroot -o compiled.js ...
		 *
		 * // in another module:
		 * require("./compiled.js");
		 *
		 * // in any subsequent module:
		 * var root = protobuf.roots["myroot"];
		 */
		return roots;
	}

	var hasRequiredIndexMinimal;

	function requireIndexMinimal () {
		if (hasRequiredIndexMinimal) return indexMinimal;
		hasRequiredIndexMinimal = 1;
		(function (exports) {
			var protobuf = exports;

			/**
			 * Build type, one of `"full"`, `"light"` or `"minimal"`.
			 * @name build
			 * @type {string}
			 * @const
			 */
			protobuf.build = "minimal";

			// Serialization
			protobuf.Writer       = requireWriter();
			protobuf.BufferWriter = requireWriter_buffer();
			protobuf.Reader       = requireReader();
			protobuf.BufferReader = requireReader_buffer();

			// Utility
			protobuf.util         = requireMinimal();
			protobuf.rpc          = requireRpc();
			protobuf.roots        = requireRoots();
			protobuf.configure    = configure;

			/* istanbul ignore next */
			/**
			 * Reconfigures the library according to the environment.
			 * @returns {undefined}
			 */
			function configure() {
			    protobuf.util._configure();
			    protobuf.Writer._configure(protobuf.BufferWriter);
			    protobuf.Reader._configure(protobuf.BufferReader);
			}

			// Set up buffer utility according to the environment
			configure(); 
		} (indexMinimal));
		return indexMinimal;
	}

	var util = {exports: {}};

	var codegen_1;
	var hasRequiredCodegen;

	function requireCodegen () {
		if (hasRequiredCodegen) return codegen_1;
		hasRequiredCodegen = 1;
		codegen_1 = codegen;

		/**
		 * Begins generating a function.
		 * @memberof util
		 * @param {string[]} functionParams Function parameter names
		 * @param {string} [functionName] Function name if not anonymous
		 * @returns {Codegen} Appender that appends code to the function's body
		 */
		function codegen(functionParams, functionName) {

		    /* istanbul ignore if */
		    if (typeof functionParams === "string") {
		        functionName = functionParams;
		        functionParams = undefined;
		    }

		    var body = [];

		    /**
		     * Appends code to the function's body or finishes generation.
		     * @typedef Codegen
		     * @type {function}
		     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
		     * @param {...*} [formatParams] Format parameters
		     * @returns {Codegen|Function} Itself or the generated function if finished
		     * @throws {Error} If format parameter counts do not match
		     */

		    function Codegen(formatStringOrScope) {
		        // note that explicit array handling below makes this ~50% faster

		        // finish the function
		        if (typeof formatStringOrScope !== "string") {
		            var source = toString();
		            if (codegen.verbose)
		                console.log("codegen: " + source); // eslint-disable-line no-console
		            source = "return " + source;
		            if (formatStringOrScope) {
		                var scopeKeys   = Object.keys(formatStringOrScope),
		                    scopeParams = new Array(scopeKeys.length + 1),
		                    scopeValues = new Array(scopeKeys.length),
		                    scopeOffset = 0;
		                while (scopeOffset < scopeKeys.length) {
		                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];
		                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
		                }
		                scopeParams[scopeOffset] = source;
		                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
		            }
		            return Function(source)(); // eslint-disable-line no-new-func
		        }

		        // otherwise append to body
		        var formatParams = new Array(arguments.length - 1),
		            formatOffset = 0;
		        while (formatOffset < formatParams.length)
		            formatParams[formatOffset] = arguments[++formatOffset];
		        formatOffset = 0;
		        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
		            var value = formatParams[formatOffset++];
		            switch ($1) {
		                case "d": case "f": return String(Number(value));
		                case "i": return String(Math.floor(value));
		                case "j": return JSON.stringify(value);
		                case "s": return String(value);
		            }
		            return "%";
		        });
		        if (formatOffset !== formatParams.length)
		            throw Error("parameter count mismatch");
		        body.push(formatStringOrScope);
		        return Codegen;
		    }

		    function toString(functionNameOverride) {
		        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
		    }

		    Codegen.toString = toString;
		    return Codegen;
		}

		/**
		 * Begins generating a function.
		 * @memberof util
		 * @function codegen
		 * @param {string} [functionName] Function name if not anonymous
		 * @returns {Codegen} Appender that appends code to the function's body
		 * @variation 2
		 */

		/**
		 * When set to `true`, codegen will log generated code to console. Useful for debugging.
		 * @name util.codegen.verbose
		 * @type {boolean}
		 */
		codegen.verbose = false;
		return codegen_1;
	}

	var fetch_1;
	var hasRequiredFetch;

	function requireFetch () {
		if (hasRequiredFetch) return fetch_1;
		hasRequiredFetch = 1;
		fetch_1 = fetch;

		var asPromise = requireAspromise(),
		    inquire   = requireInquire();

		var fs = inquire("fs");

		/**
		 * Node-style callback as used by {@link util.fetch}.
		 * @typedef FetchCallback
		 * @type {function}
		 * @param {?Error} error Error, if any, otherwise `null`
		 * @param {string} [contents] File contents, if there hasn't been an error
		 * @returns {undefined}
		 */

		/**
		 * Options as used by {@link util.fetch}.
		 * @typedef FetchOptions
		 * @type {Object}
		 * @property {boolean} [binary=false] Whether expecting a binary response
		 * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
		 */

		/**
		 * Fetches the contents of a file.
		 * @memberof util
		 * @param {string} filename File path or url
		 * @param {FetchOptions} options Fetch options
		 * @param {FetchCallback} callback Callback function
		 * @returns {undefined}
		 */
		function fetch(filename, options, callback) {
		    if (typeof options === "function") {
		        callback = options;
		        options = {};
		    } else if (!options)
		        options = {};

		    if (!callback)
		        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this

		    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.
		    if (!options.xhr && fs && fs.readFile)
		        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
		            return err && typeof XMLHttpRequest !== "undefined"
		                ? fetch.xhr(filename, options, callback)
		                : err
		                ? callback(err)
		                : callback(null, options.binary ? contents : contents.toString("utf8"));
		        });

		    // use the XHR version otherwise.
		    return fetch.xhr(filename, options, callback);
		}

		/**
		 * Fetches the contents of a file.
		 * @name util.fetch
		 * @function
		 * @param {string} path File path or url
		 * @param {FetchCallback} callback Callback function
		 * @returns {undefined}
		 * @variation 2
		 */

		/**
		 * Fetches the contents of a file.
		 * @name util.fetch
		 * @function
		 * @param {string} path File path or url
		 * @param {FetchOptions} [options] Fetch options
		 * @returns {Promise<string|Uint8Array>} Promise
		 * @variation 3
		 */

		/**/
		fetch.xhr = function fetch_xhr(filename, options, callback) {
		    var xhr = new XMLHttpRequest();
		    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {

		        if (xhr.readyState !== 4)
		            return undefined;

		        // local cors security errors return status 0 / empty string, too. afaik this cannot be
		        // reliably distinguished from an actually empty file for security reasons. feel free
		        // to send a pull request if you are aware of a solution.
		        if (xhr.status !== 0 && xhr.status !== 200)
		            return callback(Error("status " + xhr.status));

		        // if binary data is expected, make sure that some sort of array is returned, even if
		        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.
		        if (options.binary) {
		            var buffer = xhr.response;
		            if (!buffer) {
		                buffer = [];
		                for (var i = 0; i < xhr.responseText.length; ++i)
		                    buffer.push(xhr.responseText.charCodeAt(i) & 255);
		            }
		            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
		        }
		        return callback(null, xhr.responseText);
		    };

		    if (options.binary) {
		        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
		        if ("overrideMimeType" in xhr)
		            xhr.overrideMimeType("text/plain; charset=x-user-defined");
		        xhr.responseType = "arraybuffer";
		    }

		    xhr.open("GET", filename);
		    xhr.send();
		};
		return fetch_1;
	}

	var path = {};

	var hasRequiredPath;

	function requirePath () {
		if (hasRequiredPath) return path;
		hasRequiredPath = 1;
		(function (exports) {

			/**
			 * A minimal path module to resolve Unix, Windows and URL paths alike.
			 * @memberof util
			 * @namespace
			 */
			var path = exports;

			var isAbsolute =
			/**
			 * Tests if the specified path is absolute.
			 * @param {string} path Path to test
			 * @returns {boolean} `true` if path is absolute
			 */
			path.isAbsolute = function isAbsolute(path) {
			    return /^(?:\/|\w+:)/.test(path);
			};

			var normalize =
			/**
			 * Normalizes the specified path.
			 * @param {string} path Path to normalize
			 * @returns {string} Normalized path
			 */
			path.normalize = function normalize(path) {
			    path = path.replace(/\\/g, "/")
			               .replace(/\/{2,}/g, "/");
			    var parts    = path.split("/"),
			        absolute = isAbsolute(path),
			        prefix   = "";
			    if (absolute)
			        prefix = parts.shift() + "/";
			    for (var i = 0; i < parts.length;) {
			        if (parts[i] === "..") {
			            if (i > 0 && parts[i - 1] !== "..")
			                parts.splice(--i, 2);
			            else if (absolute)
			                parts.splice(i, 1);
			            else
			                ++i;
			        } else if (parts[i] === ".")
			            parts.splice(i, 1);
			        else
			            ++i;
			    }
			    return prefix + parts.join("/");
			};

			/**
			 * Resolves the specified include path against the specified origin path.
			 * @param {string} originPath Path to the origin file
			 * @param {string} includePath Include path relative to origin path
			 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
			 * @returns {string} Path to the include file
			 */
			path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
			    if (!alreadyNormalized)
			        includePath = normalize(includePath);
			    if (isAbsolute(includePath))
			        return includePath;
			    if (!alreadyNormalized)
			        originPath = normalize(originPath);
			    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
			}; 
		} (path));
		return path;
	}

	var types = {};

	var hasRequiredTypes;

	function requireTypes () {
		if (hasRequiredTypes) return types;
		hasRequiredTypes = 1;
		(function (exports) {

			/**
			 * Common type constants.
			 * @namespace
			 */
			var types = exports;

			var util = requireUtil();

			var s = [
			    "double",   // 0
			    "float",    // 1
			    "int32",    // 2
			    "uint32",   // 3
			    "sint32",   // 4
			    "fixed32",  // 5
			    "sfixed32", // 6
			    "int64",    // 7
			    "uint64",   // 8
			    "sint64",   // 9
			    "fixed64",  // 10
			    "sfixed64", // 11
			    "bool",     // 12
			    "string",   // 13
			    "bytes"     // 14
			];

			function bake(values, offset) {
			    var i = 0, o = {};
			    offset |= 0;
			    while (i < values.length) o[s[i + offset]] = values[i++];
			    return o;
			}

			/**
			 * Basic type wire types.
			 * @type {Object.<string,number>}
			 * @const
			 * @property {number} double=1 Fixed64 wire type
			 * @property {number} float=5 Fixed32 wire type
			 * @property {number} int32=0 Varint wire type
			 * @property {number} uint32=0 Varint wire type
			 * @property {number} sint32=0 Varint wire type
			 * @property {number} fixed32=5 Fixed32 wire type
			 * @property {number} sfixed32=5 Fixed32 wire type
			 * @property {number} int64=0 Varint wire type
			 * @property {number} uint64=0 Varint wire type
			 * @property {number} sint64=0 Varint wire type
			 * @property {number} fixed64=1 Fixed64 wire type
			 * @property {number} sfixed64=1 Fixed64 wire type
			 * @property {number} bool=0 Varint wire type
			 * @property {number} string=2 Ldelim wire type
			 * @property {number} bytes=2 Ldelim wire type
			 */
			types.basic = bake([
			    /* double   */ 1,
			    /* float    */ 5,
			    /* int32    */ 0,
			    /* uint32   */ 0,
			    /* sint32   */ 0,
			    /* fixed32  */ 5,
			    /* sfixed32 */ 5,
			    /* int64    */ 0,
			    /* uint64   */ 0,
			    /* sint64   */ 0,
			    /* fixed64  */ 1,
			    /* sfixed64 */ 1,
			    /* bool     */ 0,
			    /* string   */ 2,
			    /* bytes    */ 2
			]);

			/**
			 * Basic type defaults.
			 * @type {Object.<string,*>}
			 * @const
			 * @property {number} double=0 Double default
			 * @property {number} float=0 Float default
			 * @property {number} int32=0 Int32 default
			 * @property {number} uint32=0 Uint32 default
			 * @property {number} sint32=0 Sint32 default
			 * @property {number} fixed32=0 Fixed32 default
			 * @property {number} sfixed32=0 Sfixed32 default
			 * @property {number} int64=0 Int64 default
			 * @property {number} uint64=0 Uint64 default
			 * @property {number} sint64=0 Sint32 default
			 * @property {number} fixed64=0 Fixed64 default
			 * @property {number} sfixed64=0 Sfixed64 default
			 * @property {boolean} bool=false Bool default
			 * @property {string} string="" String default
			 * @property {Array.<number>} bytes=Array(0) Bytes default
			 * @property {null} message=null Message default
			 */
			types.defaults = bake([
			    /* double   */ 0,
			    /* float    */ 0,
			    /* int32    */ 0,
			    /* uint32   */ 0,
			    /* sint32   */ 0,
			    /* fixed32  */ 0,
			    /* sfixed32 */ 0,
			    /* int64    */ 0,
			    /* uint64   */ 0,
			    /* sint64   */ 0,
			    /* fixed64  */ 0,
			    /* sfixed64 */ 0,
			    /* bool     */ false,
			    /* string   */ "",
			    /* bytes    */ util.emptyArray,
			    /* message  */ null
			]);

			/**
			 * Basic long type wire types.
			 * @type {Object.<string,number>}
			 * @const
			 * @property {number} int64=0 Varint wire type
			 * @property {number} uint64=0 Varint wire type
			 * @property {number} sint64=0 Varint wire type
			 * @property {number} fixed64=1 Fixed64 wire type
			 * @property {number} sfixed64=1 Fixed64 wire type
			 */
			types.long = bake([
			    /* int64    */ 0,
			    /* uint64   */ 0,
			    /* sint64   */ 0,
			    /* fixed64  */ 1,
			    /* sfixed64 */ 1
			], 7);

			/**
			 * Allowed types for map keys with their associated wire type.
			 * @type {Object.<string,number>}
			 * @const
			 * @property {number} int32=0 Varint wire type
			 * @property {number} uint32=0 Varint wire type
			 * @property {number} sint32=0 Varint wire type
			 * @property {number} fixed32=5 Fixed32 wire type
			 * @property {number} sfixed32=5 Fixed32 wire type
			 * @property {number} int64=0 Varint wire type
			 * @property {number} uint64=0 Varint wire type
			 * @property {number} sint64=0 Varint wire type
			 * @property {number} fixed64=1 Fixed64 wire type
			 * @property {number} sfixed64=1 Fixed64 wire type
			 * @property {number} bool=0 Varint wire type
			 * @property {number} string=2 Ldelim wire type
			 */
			types.mapKey = bake([
			    /* int32    */ 0,
			    /* uint32   */ 0,
			    /* sint32   */ 0,
			    /* fixed32  */ 5,
			    /* sfixed32 */ 5,
			    /* int64    */ 0,
			    /* uint64   */ 0,
			    /* sint64   */ 0,
			    /* fixed64  */ 1,
			    /* sfixed64 */ 1,
			    /* bool     */ 0,
			    /* string   */ 2
			], 2);

			/**
			 * Allowed types for packed repeated fields with their associated wire type.
			 * @type {Object.<string,number>}
			 * @const
			 * @property {number} double=1 Fixed64 wire type
			 * @property {number} float=5 Fixed32 wire type
			 * @property {number} int32=0 Varint wire type
			 * @property {number} uint32=0 Varint wire type
			 * @property {number} sint32=0 Varint wire type
			 * @property {number} fixed32=5 Fixed32 wire type
			 * @property {number} sfixed32=5 Fixed32 wire type
			 * @property {number} int64=0 Varint wire type
			 * @property {number} uint64=0 Varint wire type
			 * @property {number} sint64=0 Varint wire type
			 * @property {number} fixed64=1 Fixed64 wire type
			 * @property {number} sfixed64=1 Fixed64 wire type
			 * @property {number} bool=0 Varint wire type
			 */
			types.packed = bake([
			    /* double   */ 1,
			    /* float    */ 5,
			    /* int32    */ 0,
			    /* uint32   */ 0,
			    /* sint32   */ 0,
			    /* fixed32  */ 5,
			    /* sfixed32 */ 5,
			    /* int64    */ 0,
			    /* uint64   */ 0,
			    /* sint64   */ 0,
			    /* fixed64  */ 1,
			    /* sfixed64 */ 1,
			    /* bool     */ 0
			]); 
		} (types));
		return types;
	}

	var field;
	var hasRequiredField;

	function requireField () {
		if (hasRequiredField) return field;
		hasRequiredField = 1;
		field = Field;

		// extends ReflectionObject
		var ReflectionObject = requireObject();
		((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

		var Enum  = require_enum(),
		    types = requireTypes(),
		    util  = requireUtil();

		var Type; // cyclic

		var ruleRe = /^required|optional|repeated$/;

		/**
		 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
		 * @name Field
		 * @classdesc Reflected message field.
		 * @extends FieldBase
		 * @constructor
		 * @param {string} name Unique name within its namespace
		 * @param {number} id Unique id within its namespace
		 * @param {string} type Value type
		 * @param {string|Object.<string,*>} [rule="optional"] Field rule
		 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
		 * @param {Object.<string,*>} [options] Declared options
		 */

		/**
		 * Constructs a field from a field descriptor.
		 * @param {string} name Field name
		 * @param {IField} json Field descriptor
		 * @returns {Field} Created field
		 * @throws {TypeError} If arguments are invalid
		 */
		Field.fromJSON = function fromJSON(name, json) {
		    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
		};

		/**
		 * Not an actual constructor. Use {@link Field} instead.
		 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
		 * @exports FieldBase
		 * @extends ReflectionObject
		 * @constructor
		 * @param {string} name Unique name within its namespace
		 * @param {number} id Unique id within its namespace
		 * @param {string} type Value type
		 * @param {string|Object.<string,*>} [rule="optional"] Field rule
		 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
		 * @param {Object.<string,*>} [options] Declared options
		 * @param {string} [comment] Comment associated with this field
		 */
		function Field(name, id, type, rule, extend, options, comment) {

		    if (util.isObject(rule)) {
		        comment = extend;
		        options = rule;
		        rule = extend = undefined;
		    } else if (util.isObject(extend)) {
		        comment = options;
		        options = extend;
		        extend = undefined;
		    }

		    ReflectionObject.call(this, name, options);

		    if (!util.isInteger(id) || id < 0)
		        throw TypeError("id must be a non-negative integer");

		    if (!util.isString(type))
		        throw TypeError("type must be a string");

		    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))
		        throw TypeError("rule must be a string rule");

		    if (extend !== undefined && !util.isString(extend))
		        throw TypeError("extend must be a string");

		    /**
		     * Field rule, if any.
		     * @type {string|undefined}
		     */
		    if (rule === "proto3_optional") {
		        rule = "optional";
		    }
		    this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

		    /**
		     * Field type.
		     * @type {string}
		     */
		    this.type = type; // toJSON

		    /**
		     * Unique field id.
		     * @type {number}
		     */
		    this.id = id; // toJSON, marker

		    /**
		     * Extended type if different from parent.
		     * @type {string|undefined}
		     */
		    this.extend = extend || undefined; // toJSON

		    /**
		     * Whether this field is required.
		     * @type {boolean}
		     */
		    this.required = rule === "required";

		    /**
		     * Whether this field is optional.
		     * @type {boolean}
		     */
		    this.optional = !this.required;

		    /**
		     * Whether this field is repeated.
		     * @type {boolean}
		     */
		    this.repeated = rule === "repeated";

		    /**
		     * Whether this field is a map or not.
		     * @type {boolean}
		     */
		    this.map = false;

		    /**
		     * Message this field belongs to.
		     * @type {Type|null}
		     */
		    this.message = null;

		    /**
		     * OneOf this field belongs to, if any,
		     * @type {OneOf|null}
		     */
		    this.partOf = null;

		    /**
		     * The field type's default value.
		     * @type {*}
		     */
		    this.typeDefault = null;

		    /**
		     * The field's default value on prototypes.
		     * @type {*}
		     */
		    this.defaultValue = null;

		    /**
		     * Whether this field's value should be treated as a long.
		     * @type {boolean}
		     */
		    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;

		    /**
		     * Whether this field's value is a buffer.
		     * @type {boolean}
		     */
		    this.bytes = type === "bytes";

		    /**
		     * Resolved type if not a basic type.
		     * @type {Type|Enum|null}
		     */
		    this.resolvedType = null;

		    /**
		     * Sister-field within the extended type if a declaring extension field.
		     * @type {Field|null}
		     */
		    this.extensionField = null;

		    /**
		     * Sister-field within the declaring namespace if an extended field.
		     * @type {Field|null}
		     */
		    this.declaringField = null;

		    /**
		     * Internally remembers whether this field is packed.
		     * @type {boolean|null}
		     * @private
		     */
		    this._packed = null;

		    /**
		     * Comment for this field.
		     * @type {string|null}
		     */
		    this.comment = comment;
		}

		/**
		 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
		 * @name Field#packed
		 * @type {boolean}
		 * @readonly
		 */
		Object.defineProperty(Field.prototype, "packed", {
		    get: function() {
		        // defaults to packed=true if not explicity set to false
		        if (this._packed === null)
		            this._packed = this.getOption("packed") !== false;
		        return this._packed;
		    }
		});

		/**
		 * @override
		 */
		Field.prototype.setOption = function setOption(name, value, ifNotSet) {
		    if (name === "packed") // clear cached before setting
		        this._packed = null;
		    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
		};

		/**
		 * Field descriptor.
		 * @interface IField
		 * @property {string} [rule="optional"] Field rule
		 * @property {string} type Field type
		 * @property {number} id Field id
		 * @property {Object.<string,*>} [options] Field options
		 */

		/**
		 * Extension field descriptor.
		 * @interface IExtensionField
		 * @extends IField
		 * @property {string} extend Extended type
		 */

		/**
		 * Converts this field to a field descriptor.
		 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
		 * @returns {IField} Field descriptor
		 */
		Field.prototype.toJSON = function toJSON(toJSONOptions) {
		    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
		    return util.toObject([
		        "rule"    , this.rule !== "optional" && this.rule || undefined,
		        "type"    , this.type,
		        "id"      , this.id,
		        "extend"  , this.extend,
		        "options" , this.options,
		        "comment" , keepComments ? this.comment : undefined
		    ]);
		};

		/**
		 * Resolves this field's type references.
		 * @returns {Field} `this`
		 * @throws {Error} If any reference cannot be resolved
		 */
		Field.prototype.resolve = function resolve() {

		    if (this.resolved)
		        return this;

		    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it
		        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
		        if (this.resolvedType instanceof Type)
		            this.typeDefault = null;
		        else // instanceof Enum
		            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
		    } else if (this.options && this.options.proto3_optional) {
		        // proto3 scalar value marked optional; should default to null
		        this.typeDefault = null;
		    }

		    // use explicitly set default value if present
		    if (this.options && this.options["default"] != null) {
		        this.typeDefault = this.options["default"];
		        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
		            this.typeDefault = this.resolvedType.values[this.typeDefault];
		    }

		    // remove unnecessary options
		    if (this.options) {
		        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))
		            delete this.options.packed;
		        if (!Object.keys(this.options).length)
		            this.options = undefined;
		    }

		    // convert to internal data type if necesssary
		    if (this.long) {
		        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");

		        /* istanbul ignore else */
		        if (Object.freeze)
		            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)

		    } else if (this.bytes && typeof this.typeDefault === "string") {
		        var buf;
		        if (util.base64.test(this.typeDefault))
		            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
		        else
		            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
		        this.typeDefault = buf;
		    }

		    // take special care of maps and repeated fields
		    if (this.map)
		        this.defaultValue = util.emptyObject;
		    else if (this.repeated)
		        this.defaultValue = util.emptyArray;
		    else
		        this.defaultValue = this.typeDefault;

		    // ensure proper value on prototype
		    if (this.parent instanceof Type)
		        this.parent.ctor.prototype[this.name] = this.defaultValue;

		    return ReflectionObject.prototype.resolve.call(this);
		};

		/**
		 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
		 * @typedef FieldDecorator
		 * @type {function}
		 * @param {Object} prototype Target prototype
		 * @param {string} fieldName Field name
		 * @returns {undefined}
		 */

		/**
		 * Field decorator (TypeScript).
		 * @name Field.d
		 * @function
		 * @param {number} fieldId Field id
		 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
		 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
		 * @param {T} [defaultValue] Default value
		 * @returns {FieldDecorator} Decorator function
		 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
		 */
		Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {

		    // submessage: decorate the submessage and use its name as the type
		    if (typeof fieldType === "function")
		        fieldType = util.decorateType(fieldType).name;

		    // enum reference: create a reflected copy of the enum and keep reuseing it
		    else if (fieldType && typeof fieldType === "object")
		        fieldType = util.decorateEnum(fieldType).name;

		    return function fieldDecorator(prototype, fieldName) {
		        util.decorateType(prototype.constructor)
		            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
		    };
		};

		/**
		 * Field decorator (TypeScript).
		 * @name Field.d
		 * @function
		 * @param {number} fieldId Field id
		 * @param {Constructor<T>|string} fieldType Field type
		 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
		 * @returns {FieldDecorator} Decorator function
		 * @template T extends Message<T>
		 * @variation 2
		 */
		// like Field.d but without a default value

		// Sets up cyclic dependencies (called in index-light)
		Field._configure = function configure(Type_) {
		    Type = Type_;
		};
		return field;
	}

	var oneof;
	var hasRequiredOneof;

	function requireOneof () {
		if (hasRequiredOneof) return oneof;
		hasRequiredOneof = 1;
		oneof = OneOf;

		// extends ReflectionObject
		var ReflectionObject = requireObject();
		((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

		var Field = requireField(),
		    util  = requireUtil();

		/**
		 * Constructs a new oneof instance.
		 * @classdesc Reflected oneof.
		 * @extends ReflectionObject
		 * @constructor
		 * @param {string} name Oneof name
		 * @param {string[]|Object.<string,*>} [fieldNames] Field names
		 * @param {Object.<string,*>} [options] Declared options
		 * @param {string} [comment] Comment associated with this field
		 */
		function OneOf(name, fieldNames, options, comment) {
		    if (!Array.isArray(fieldNames)) {
		        options = fieldNames;
		        fieldNames = undefined;
		    }
		    ReflectionObject.call(this, name, options);

		    /* istanbul ignore if */
		    if (!(fieldNames === undefined || Array.isArray(fieldNames)))
		        throw TypeError("fieldNames must be an Array");

		    /**
		     * Field names that belong to this oneof.
		     * @type {string[]}
		     */
		    this.oneof = fieldNames || []; // toJSON, marker

		    /**
		     * Fields that belong to this oneof as an array for iteration.
		     * @type {Field[]}
		     * @readonly
		     */
		    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

		    /**
		     * Comment for this field.
		     * @type {string|null}
		     */
		    this.comment = comment;
		}

		/**
		 * Oneof descriptor.
		 * @interface IOneOf
		 * @property {Array.<string>} oneof Oneof field names
		 * @property {Object.<string,*>} [options] Oneof options
		 */

		/**
		 * Constructs a oneof from a oneof descriptor.
		 * @param {string} name Oneof name
		 * @param {IOneOf} json Oneof descriptor
		 * @returns {OneOf} Created oneof
		 * @throws {TypeError} If arguments are invalid
		 */
		OneOf.fromJSON = function fromJSON(name, json) {
		    return new OneOf(name, json.oneof, json.options, json.comment);
		};

		/**
		 * Converts this oneof to a oneof descriptor.
		 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
		 * @returns {IOneOf} Oneof descriptor
		 */
		OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
		    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
		    return util.toObject([
		        "options" , this.options,
		        "oneof"   , this.oneof,
		        "comment" , keepComments ? this.comment : undefined
		    ]);
		};

		/**
		 * Adds the fields of the specified oneof to the parent if not already done so.
		 * @param {OneOf} oneof The oneof
		 * @returns {undefined}
		 * @inner
		 * @ignore
		 */
		function addFieldsToParent(oneof) {
		    if (oneof.parent)
		        for (var i = 0; i < oneof.fieldsArray.length; ++i)
		            if (!oneof.fieldsArray[i].parent)
		                oneof.parent.add(oneof.fieldsArray[i]);
		}

		/**
		 * Adds a field to this oneof and removes it from its current parent, if any.
		 * @param {Field} field Field to add
		 * @returns {OneOf} `this`
		 */
		OneOf.prototype.add = function add(field) {

		    /* istanbul ignore if */
		    if (!(field instanceof Field))
		        throw TypeError("field must be a Field");

		    if (field.parent && field.parent !== this.parent)
		        field.parent.remove(field);
		    this.oneof.push(field.name);
		    this.fieldsArray.push(field);
		    field.partOf = this; // field.parent remains null
		    addFieldsToParent(this);
		    return this;
		};

		/**
		 * Removes a field from this oneof and puts it back to the oneof's parent.
		 * @param {Field} field Field to remove
		 * @returns {OneOf} `this`
		 */
		OneOf.prototype.remove = function remove(field) {

		    /* istanbul ignore if */
		    if (!(field instanceof Field))
		        throw TypeError("field must be a Field");

		    var index = this.fieldsArray.indexOf(field);

		    /* istanbul ignore if */
		    if (index < 0)
		        throw Error(field + " is not a member of " + this);

		    this.fieldsArray.splice(index, 1);
		    index = this.oneof.indexOf(field.name);

		    /* istanbul ignore else */
		    if (index > -1) // theoretical
		        this.oneof.splice(index, 1);

		    field.partOf = null;
		    return this;
		};

		/**
		 * @override
		 */
		OneOf.prototype.onAdd = function onAdd(parent) {
		    ReflectionObject.prototype.onAdd.call(this, parent);
		    var self = this;
		    // Collect present fields
		    for (var i = 0; i < this.oneof.length; ++i) {
		        var field = parent.get(this.oneof[i]);
		        if (field && !field.partOf) {
		            field.partOf = self;
		            self.fieldsArray.push(field);
		        }
		    }
		    // Add not yet present fields
		    addFieldsToParent(this);
		};

		/**
		 * @override
		 */
		OneOf.prototype.onRemove = function onRemove(parent) {
		    for (var i = 0, field; i < this.fieldsArray.length; ++i)
		        if ((field = this.fieldsArray[i]).parent)
		            field.parent.remove(field);
		    ReflectionObject.prototype.onRemove.call(this, parent);
		};

		/**
		 * Decorator function as returned by {@link OneOf.d} (TypeScript).
		 * @typedef OneOfDecorator
		 * @type {function}
		 * @param {Object} prototype Target prototype
		 * @param {string} oneofName OneOf name
		 * @returns {undefined}
		 */

		/**
		 * OneOf decorator (TypeScript).
		 * @function
		 * @param {...string} fieldNames Field names
		 * @returns {OneOfDecorator} Decorator function
		 * @template T extends string
		 */
		OneOf.d = function decorateOneOf() {
		    var fieldNames = new Array(arguments.length),
		        index = 0;
		    while (index < arguments.length)
		        fieldNames[index] = arguments[index++];
		    return function oneOfDecorator(prototype, oneofName) {
		        util.decorateType(prototype.constructor)
		            .add(new OneOf(oneofName, fieldNames));
		        Object.defineProperty(prototype, oneofName, {
		            get: util.oneOfGetter(fieldNames),
		            set: util.oneOfSetter(fieldNames)
		        });
		    };
		};
		return oneof;
	}

	var namespace;
	var hasRequiredNamespace;

	function requireNamespace () {
		if (hasRequiredNamespace) return namespace;
		hasRequiredNamespace = 1;
		namespace = Namespace;

		// extends ReflectionObject
		var ReflectionObject = requireObject();
		((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

		var Field    = requireField(),
		    util     = requireUtil(),
		    OneOf    = requireOneof();

		var Type,    // cyclic
		    Service,
		    Enum;

		/**
		 * Constructs a new namespace instance.
		 * @name Namespace
		 * @classdesc Reflected namespace.
		 * @extends NamespaceBase
		 * @constructor
		 * @param {string} name Namespace name
		 * @param {Object.<string,*>} [options] Declared options
		 */

		/**
		 * Constructs a namespace from JSON.
		 * @memberof Namespace
		 * @function
		 * @param {string} name Namespace name
		 * @param {Object.<string,*>} json JSON object
		 * @returns {Namespace} Created namespace
		 * @throws {TypeError} If arguments are invalid
		 */
		Namespace.fromJSON = function fromJSON(name, json) {
		    return new Namespace(name, json.options).addJSON(json.nested);
		};

		/**
		 * Converts an array of reflection objects to JSON.
		 * @memberof Namespace
		 * @param {ReflectionObject[]} array Object array
		 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
		 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
		 */
		function arrayToJSON(array, toJSONOptions) {
		    if (!(array && array.length))
		        return undefined;
		    var obj = {};
		    for (var i = 0; i < array.length; ++i)
		        obj[array[i].name] = array[i].toJSON(toJSONOptions);
		    return obj;
		}

		Namespace.arrayToJSON = arrayToJSON;

		/**
		 * Tests if the specified id is reserved.
		 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
		 * @param {number} id Id to test
		 * @returns {boolean} `true` if reserved, otherwise `false`
		 */
		Namespace.isReservedId = function isReservedId(reserved, id) {
		    if (reserved)
		        for (var i = 0; i < reserved.length; ++i)
		            if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id)
		                return true;
		    return false;
		};

		/**
		 * Tests if the specified name is reserved.
		 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
		 * @param {string} name Name to test
		 * @returns {boolean} `true` if reserved, otherwise `false`
		 */
		Namespace.isReservedName = function isReservedName(reserved, name) {
		    if (reserved)
		        for (var i = 0; i < reserved.length; ++i)
		            if (reserved[i] === name)
		                return true;
		    return false;
		};

		/**
		 * Not an actual constructor. Use {@link Namespace} instead.
		 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
		 * @exports NamespaceBase
		 * @extends ReflectionObject
		 * @abstract
		 * @constructor
		 * @param {string} name Namespace name
		 * @param {Object.<string,*>} [options] Declared options
		 * @see {@link Namespace}
		 */
		function Namespace(name, options) {
		    ReflectionObject.call(this, name, options);

		    /**
		     * Nested objects by name.
		     * @type {Object.<string,ReflectionObject>|undefined}
		     */
		    this.nested = undefined; // toJSON

		    /**
		     * Cached nested objects as an array.
		     * @type {ReflectionObject[]|null}
		     * @private
		     */
		    this._nestedArray = null;
		}

		function clearCache(namespace) {
		    namespace._nestedArray = null;
		    return namespace;
		}

		/**
		 * Nested objects of this namespace as an array for iteration.
		 * @name NamespaceBase#nestedArray
		 * @type {ReflectionObject[]}
		 * @readonly
		 */
		Object.defineProperty(Namespace.prototype, "nestedArray", {
		    get: function() {
		        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
		    }
		});

		/**
		 * Namespace descriptor.
		 * @interface INamespace
		 * @property {Object.<string,*>} [options] Namespace options
		 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
		 */

		/**
		 * Any extension field descriptor.
		 * @typedef AnyExtensionField
		 * @type {IExtensionField|IExtensionMapField}
		 */

		/**
		 * Any nested object descriptor.
		 * @typedef AnyNestedObject
		 * @type {IEnum|IType|IService|AnyExtensionField|INamespace|IOneOf}
		 */

		/**
		 * Converts this namespace to a namespace descriptor.
		 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
		 * @returns {INamespace} Namespace descriptor
		 */
		Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
		    return util.toObject([
		        "options" , this.options,
		        "nested"  , arrayToJSON(this.nestedArray, toJSONOptions)
		    ]);
		};

		/**
		 * Adds nested objects to this namespace from nested object descriptors.
		 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
		 * @returns {Namespace} `this`
		 */
		Namespace.prototype.addJSON = function addJSON(nestedJson) {
		    var ns = this;
		    /* istanbul ignore else */
		    if (nestedJson) {
		        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
		            nested = nestedJson[names[i]];
		            ns.add( // most to least likely
		                ( nested.fields !== undefined
		                ? Type.fromJSON
		                : nested.values !== undefined
		                ? Enum.fromJSON
		                : nested.methods !== undefined
		                ? Service.fromJSON
		                : nested.id !== undefined
		                ? Field.fromJSON
		                : Namespace.fromJSON )(names[i], nested)
		            );
		        }
		    }
		    return this;
		};

		/**
		 * Gets the nested object of the specified name.
		 * @param {string} name Nested object name
		 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
		 */
		Namespace.prototype.get = function get(name) {
		    return this.nested && this.nested[name]
		        || null;
		};

		/**
		 * Gets the values of the nested {@link Enum|enum} of the specified name.
		 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
		 * @param {string} name Nested enum name
		 * @returns {Object.<string,number>} Enum values
		 * @throws {Error} If there is no such enum
		 */
		Namespace.prototype.getEnum = function getEnum(name) {
		    if (this.nested && this.nested[name] instanceof Enum)
		        return this.nested[name].values;
		    throw Error("no such enum: " + name);
		};

		/**
		 * Adds a nested object to this namespace.
		 * @param {ReflectionObject} object Nested object to add
		 * @returns {Namespace} `this`
		 * @throws {TypeError} If arguments are invalid
		 * @throws {Error} If there is already a nested object with this name
		 */
		Namespace.prototype.add = function add(object) {

		    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type  || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace))
		        throw TypeError("object must be a valid nested object");

		    if (!this.nested)
		        this.nested = {};
		    else {
		        var prev = this.get(object.name);
		        if (prev) {
		            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
		                // replace plain namespace but keep existing nested elements and options
		                var nested = prev.nestedArray;
		                for (var i = 0; i < nested.length; ++i)
		                    object.add(nested[i]);
		                this.remove(prev);
		                if (!this.nested)
		                    this.nested = {};
		                object.setOptions(prev.options, true);

		            } else
		                throw Error("duplicate name '" + object.name + "' in " + this);
		        }
		    }
		    this.nested[object.name] = object;
		    object.onAdd(this);
		    return clearCache(this);
		};

		/**
		 * Removes a nested object from this namespace.
		 * @param {ReflectionObject} object Nested object to remove
		 * @returns {Namespace} `this`
		 * @throws {TypeError} If arguments are invalid
		 * @throws {Error} If `object` is not a member of this namespace
		 */
		Namespace.prototype.remove = function remove(object) {

		    if (!(object instanceof ReflectionObject))
		        throw TypeError("object must be a ReflectionObject");
		    if (object.parent !== this)
		        throw Error(object + " is not a member of " + this);

		    delete this.nested[object.name];
		    if (!Object.keys(this.nested).length)
		        this.nested = undefined;

		    object.onRemove(this);
		    return clearCache(this);
		};

		/**
		 * Defines additial namespaces within this one if not yet existing.
		 * @param {string|string[]} path Path to create
		 * @param {*} [json] Nested types to create from JSON
		 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
		 */
		Namespace.prototype.define = function define(path, json) {

		    if (util.isString(path))
		        path = path.split(".");
		    else if (!Array.isArray(path))
		        throw TypeError("illegal path");
		    if (path && path.length && path[0] === "")
		        throw Error("path must be relative");

		    var ptr = this;
		    while (path.length > 0) {
		        var part = path.shift();
		        if (ptr.nested && ptr.nested[part]) {
		            ptr = ptr.nested[part];
		            if (!(ptr instanceof Namespace))
		                throw Error("path conflicts with non-namespace objects");
		        } else
		            ptr.add(ptr = new Namespace(part));
		    }
		    if (json)
		        ptr.addJSON(json);
		    return ptr;
		};

		/**
		 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
		 * @returns {Namespace} `this`
		 */
		Namespace.prototype.resolveAll = function resolveAll() {
		    var nested = this.nestedArray, i = 0;
		    while (i < nested.length)
		        if (nested[i] instanceof Namespace)
		            nested[i++].resolveAll();
		        else
		            nested[i++].resolve();
		    return this.resolve();
		};

		/**
		 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
		 * @param {string|string[]} path Path to look up
		 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
		 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
		 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
		 */
		Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {

		    /* istanbul ignore next */
		    if (typeof filterTypes === "boolean") {
		        parentAlreadyChecked = filterTypes;
		        filterTypes = undefined;
		    } else if (filterTypes && !Array.isArray(filterTypes))
		        filterTypes = [ filterTypes ];

		    if (util.isString(path) && path.length) {
		        if (path === ".")
		            return this.root;
		        path = path.split(".");
		    } else if (!path.length)
		        return this;

		    // Start at root if path is absolute
		    if (path[0] === "")
		        return this.root.lookup(path.slice(1), filterTypes);

		    // Test if the first part matches any nested object, and if so, traverse if path contains more
		    var found = this.get(path[0]);
		    if (found) {
		        if (path.length === 1) {
		            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
		                return found;
		        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
		            return found;

		    // Otherwise try each nested namespace
		    } else
		        for (var i = 0; i < this.nestedArray.length; ++i)
		            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
		                return found;

		    // If there hasn't been a match, try again at the parent
		    if (this.parent === null || parentAlreadyChecked)
		        return null;
		    return this.parent.lookup(path, filterTypes);
		};

		/**
		 * Looks up the reflection object at the specified path, relative to this namespace.
		 * @name NamespaceBase#lookup
		 * @function
		 * @param {string|string[]} path Path to look up
		 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
		 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
		 * @variation 2
		 */
		// lookup(path: string, [parentAlreadyChecked: boolean])

		/**
		 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
		 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
		 * @param {string|string[]} path Path to look up
		 * @returns {Type} Looked up type
		 * @throws {Error} If `path` does not point to a type
		 */
		Namespace.prototype.lookupType = function lookupType(path) {
		    var found = this.lookup(path, [ Type ]);
		    if (!found)
		        throw Error("no such type: " + path);
		    return found;
		};

		/**
		 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
		 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
		 * @param {string|string[]} path Path to look up
		 * @returns {Enum} Looked up enum
		 * @throws {Error} If `path` does not point to an enum
		 */
		Namespace.prototype.lookupEnum = function lookupEnum(path) {
		    var found = this.lookup(path, [ Enum ]);
		    if (!found)
		        throw Error("no such Enum '" + path + "' in " + this);
		    return found;
		};

		/**
		 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
		 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
		 * @param {string|string[]} path Path to look up
		 * @returns {Type} Looked up type or enum
		 * @throws {Error} If `path` does not point to a type or enum
		 */
		Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
		    var found = this.lookup(path, [ Type, Enum ]);
		    if (!found)
		        throw Error("no such Type or Enum '" + path + "' in " + this);
		    return found;
		};

		/**
		 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
		 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
		 * @param {string|string[]} path Path to look up
		 * @returns {Service} Looked up service
		 * @throws {Error} If `path` does not point to a service
		 */
		Namespace.prototype.lookupService = function lookupService(path) {
		    var found = this.lookup(path, [ Service ]);
		    if (!found)
		        throw Error("no such Service '" + path + "' in " + this);
		    return found;
		};

		// Sets up cyclic dependencies (called in index-light)
		Namespace._configure = function(Type_, Service_, Enum_) {
		    Type    = Type_;
		    Service = Service_;
		    Enum    = Enum_;
		};
		return namespace;
	}

	var mapfield;
	var hasRequiredMapfield;

	function requireMapfield () {
		if (hasRequiredMapfield) return mapfield;
		hasRequiredMapfield = 1;
		mapfield = MapField;

		// extends Field
		var Field = requireField();
		((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

		var types   = requireTypes(),
		    util    = requireUtil();

		/**
		 * Constructs a new map field instance.
		 * @classdesc Reflected map field.
		 * @extends FieldBase
		 * @constructor
		 * @param {string} name Unique name within its namespace
		 * @param {number} id Unique id within its namespace
		 * @param {string} keyType Key type
		 * @param {string} type Value type
		 * @param {Object.<string,*>} [options] Declared options
		 * @param {string} [comment] Comment associated with this field
		 */
		function MapField(name, id, keyType, type, options, comment) {
		    Field.call(this, name, id, type, undefined, undefined, options, comment);

		    /* istanbul ignore if */
		    if (!util.isString(keyType))
		        throw TypeError("keyType must be a string");

		    /**
		     * Key type.
		     * @type {string}
		     */
		    this.keyType = keyType; // toJSON, marker

		    /**
		     * Resolved key type if not a basic type.
		     * @type {ReflectionObject|null}
		     */
		    this.resolvedKeyType = null;

		    // Overrides Field#map
		    this.map = true;
		}

		/**
		 * Map field descriptor.
		 * @interface IMapField
		 * @extends {IField}
		 * @property {string} keyType Key type
		 */

		/**
		 * Extension map field descriptor.
		 * @interface IExtensionMapField
		 * @extends IMapField
		 * @property {string} extend Extended type
		 */

		/**
		 * Constructs a map field from a map field descriptor.
		 * @param {string} name Field name
		 * @param {IMapField} json Map field descriptor
		 * @returns {MapField} Created map field
		 * @throws {TypeError} If arguments are invalid
		 */
		MapField.fromJSON = function fromJSON(name, json) {
		    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
		};

		/**
		 * Converts this map field to a map field descriptor.
		 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
		 * @returns {IMapField} Map field descriptor
		 */
		MapField.prototype.toJSON = function toJSON(toJSONOptions) {
		    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
		    return util.toObject([
		        "keyType" , this.keyType,
		        "type"    , this.type,
		        "id"      , this.id,
		        "extend"  , this.extend,
		        "options" , this.options,
		        "comment" , keepComments ? this.comment : undefined
		    ]);
		};

		/**
		 * @override
		 */
		MapField.prototype.resolve = function resolve() {
		    if (this.resolved)
		        return this;

		    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
		    if (types.mapKey[this.keyType] === undefined)
		        throw Error("invalid key type: " + this.keyType);

		    return Field.prototype.resolve.call(this);
		};

		/**
		 * Map field decorator (TypeScript).
		 * @name MapField.d
		 * @function
		 * @param {number} fieldId Field id
		 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
		 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
		 * @returns {FieldDecorator} Decorator function
		 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
		 */
		MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {

		    // submessage value: decorate the submessage and use its name as the type
		    if (typeof fieldValueType === "function")
		        fieldValueType = util.decorateType(fieldValueType).name;

		    // enum reference value: create a reflected copy of the enum and keep reuseing it
		    else if (fieldValueType && typeof fieldValueType === "object")
		        fieldValueType = util.decorateEnum(fieldValueType).name;

		    return function mapFieldDecorator(prototype, fieldName) {
		        util.decorateType(prototype.constructor)
		            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
		    };
		};
		return mapfield;
	}

	var method;
	var hasRequiredMethod;

	function requireMethod () {
		if (hasRequiredMethod) return method;
		hasRequiredMethod = 1;
		method = Method;

		// extends ReflectionObject
		var ReflectionObject = requireObject();
		((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

		var util = requireUtil();

		/**
		 * Constructs a new service method instance.
		 * @classdesc Reflected service method.
		 * @extends ReflectionObject
		 * @constructor
		 * @param {string} name Method name
		 * @param {string|undefined} type Method type, usually `"rpc"`
		 * @param {string} requestType Request message type
		 * @param {string} responseType Response message type
		 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
		 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
		 * @param {Object.<string,*>} [options] Declared options
		 * @param {string} [comment] The comment for this method
		 * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object
		 */
		function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {

		    /* istanbul ignore next */
		    if (util.isObject(requestStream)) {
		        options = requestStream;
		        requestStream = responseStream = undefined;
		    } else if (util.isObject(responseStream)) {
		        options = responseStream;
		        responseStream = undefined;
		    }

		    /* istanbul ignore if */
		    if (!(type === undefined || util.isString(type)))
		        throw TypeError("type must be a string");

		    /* istanbul ignore if */
		    if (!util.isString(requestType))
		        throw TypeError("requestType must be a string");

		    /* istanbul ignore if */
		    if (!util.isString(responseType))
		        throw TypeError("responseType must be a string");

		    ReflectionObject.call(this, name, options);

		    /**
		     * Method type.
		     * @type {string}
		     */
		    this.type = type || "rpc"; // toJSON

		    /**
		     * Request type.
		     * @type {string}
		     */
		    this.requestType = requestType; // toJSON, marker

		    /**
		     * Whether requests are streamed or not.
		     * @type {boolean|undefined}
		     */
		    this.requestStream = requestStream ? true : undefined; // toJSON

		    /**
		     * Response type.
		     * @type {string}
		     */
		    this.responseType = responseType; // toJSON

		    /**
		     * Whether responses are streamed or not.
		     * @type {boolean|undefined}
		     */
		    this.responseStream = responseStream ? true : undefined; // toJSON

		    /**
		     * Resolved request type.
		     * @type {Type|null}
		     */
		    this.resolvedRequestType = null;

		    /**
		     * Resolved response type.
		     * @type {Type|null}
		     */
		    this.resolvedResponseType = null;

		    /**
		     * Comment for this method
		     * @type {string|null}
		     */
		    this.comment = comment;

		    /**
		     * Options properly parsed into an object
		     */
		    this.parsedOptions = parsedOptions;
		}

		/**
		 * Method descriptor.
		 * @interface IMethod
		 * @property {string} [type="rpc"] Method type
		 * @property {string} requestType Request type
		 * @property {string} responseType Response type
		 * @property {boolean} [requestStream=false] Whether requests are streamed
		 * @property {boolean} [responseStream=false] Whether responses are streamed
		 * @property {Object.<string,*>} [options] Method options
		 * @property {string} comment Method comments
		 * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object
		 */

		/**
		 * Constructs a method from a method descriptor.
		 * @param {string} name Method name
		 * @param {IMethod} json Method descriptor
		 * @returns {Method} Created method
		 * @throws {TypeError} If arguments are invalid
		 */
		Method.fromJSON = function fromJSON(name, json) {
		    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
		};

		/**
		 * Converts this method to a method descriptor.
		 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
		 * @returns {IMethod} Method descriptor
		 */
		Method.prototype.toJSON = function toJSON(toJSONOptions) {
		    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
		    return util.toObject([
		        "type"           , this.type !== "rpc" && /* istanbul ignore next */ this.type || undefined,
		        "requestType"    , this.requestType,
		        "requestStream"  , this.requestStream,
		        "responseType"   , this.responseType,
		        "responseStream" , this.responseStream,
		        "options"        , this.options,
		        "comment"        , keepComments ? this.comment : undefined,
		        "parsedOptions"  , this.parsedOptions,
		    ]);
		};

		/**
		 * @override
		 */
		Method.prototype.resolve = function resolve() {

		    /* istanbul ignore if */
		    if (this.resolved)
		        return this;

		    this.resolvedRequestType = this.parent.lookupType(this.requestType);
		    this.resolvedResponseType = this.parent.lookupType(this.responseType);

		    return ReflectionObject.prototype.resolve.call(this);
		};
		return method;
	}

	var service;
	var hasRequiredService;

	function requireService () {
		if (hasRequiredService) return service;
		hasRequiredService = 1;
		service = Service;

		// extends Namespace
		var Namespace = requireNamespace();
		((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

		var Method = requireMethod(),
		    util   = requireUtil(),
		    rpc    = requireRpc();

		/**
		 * Constructs a new service instance.
		 * @classdesc Reflected service.
		 * @extends NamespaceBase
		 * @constructor
		 * @param {string} name Service name
		 * @param {Object.<string,*>} [options] Service options
		 * @throws {TypeError} If arguments are invalid
		 */
		function Service(name, options) {
		    Namespace.call(this, name, options);

		    /**
		     * Service methods.
		     * @type {Object.<string,Method>}
		     */
		    this.methods = {}; // toJSON, marker

		    /**
		     * Cached methods as an array.
		     * @type {Method[]|null}
		     * @private
		     */
		    this._methodsArray = null;
		}

		/**
		 * Service descriptor.
		 * @interface IService
		 * @extends INamespace
		 * @property {Object.<string,IMethod>} methods Method descriptors
		 */

		/**
		 * Constructs a service from a service descriptor.
		 * @param {string} name Service name
		 * @param {IService} json Service descriptor
		 * @returns {Service} Created service
		 * @throws {TypeError} If arguments are invalid
		 */
		Service.fromJSON = function fromJSON(name, json) {
		    var service = new Service(name, json.options);
		    /* istanbul ignore else */
		    if (json.methods)
		        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
		            service.add(Method.fromJSON(names[i], json.methods[names[i]]));
		    if (json.nested)
		        service.addJSON(json.nested);
		    service.comment = json.comment;
		    return service;
		};

		/**
		 * Converts this service to a service descriptor.
		 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
		 * @returns {IService} Service descriptor
		 */
		Service.prototype.toJSON = function toJSON(toJSONOptions) {
		    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
		    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
		    return util.toObject([
		        "options" , inherited && inherited.options || undefined,
		        "methods" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},
		        "nested"  , inherited && inherited.nested || undefined,
		        "comment" , keepComments ? this.comment : undefined
		    ]);
		};

		/**
		 * Methods of this service as an array for iteration.
		 * @name Service#methodsArray
		 * @type {Method[]}
		 * @readonly
		 */
		Object.defineProperty(Service.prototype, "methodsArray", {
		    get: function() {
		        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
		    }
		});

		function clearCache(service) {
		    service._methodsArray = null;
		    return service;
		}

		/**
		 * @override
		 */
		Service.prototype.get = function get(name) {
		    return this.methods[name]
		        || Namespace.prototype.get.call(this, name);
		};

		/**
		 * @override
		 */
		Service.prototype.resolveAll = function resolveAll() {
		    var methods = this.methodsArray;
		    for (var i = 0; i < methods.length; ++i)
		        methods[i].resolve();
		    return Namespace.prototype.resolve.call(this);
		};

		/**
		 * @override
		 */
		Service.prototype.add = function add(object) {

		    /* istanbul ignore if */
		    if (this.get(object.name))
		        throw Error("duplicate name '" + object.name + "' in " + this);

		    if (object instanceof Method) {
		        this.methods[object.name] = object;
		        object.parent = this;
		        return clearCache(this);
		    }
		    return Namespace.prototype.add.call(this, object);
		};

		/**
		 * @override
		 */
		Service.prototype.remove = function remove(object) {
		    if (object instanceof Method) {

		        /* istanbul ignore if */
		        if (this.methods[object.name] !== object)
		            throw Error(object + " is not a member of " + this);

		        delete this.methods[object.name];
		        object.parent = null;
		        return clearCache(this);
		    }
		    return Namespace.prototype.remove.call(this, object);
		};

		/**
		 * Creates a runtime service using the specified rpc implementation.
		 * @param {RPCImpl} rpcImpl RPC implementation
		 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
		 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
		 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
		 */
		Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
		    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
		    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {
		        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
		        rpcService[methodName] = util.codegen(["r","c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
		            m: method,
		            q: method.resolvedRequestType.ctor,
		            s: method.resolvedResponseType.ctor
		        });
		    }
		    return rpcService;
		};
		return service;
	}

	var message;
	var hasRequiredMessage;

	function requireMessage () {
		if (hasRequiredMessage) return message;
		hasRequiredMessage = 1;
		message = Message;

		var util = requireMinimal();

		/**
		 * Constructs a new message instance.
		 * @classdesc Abstract runtime message.
		 * @constructor
		 * @param {Properties<T>} [properties] Properties to set
		 * @template T extends object = object
		 */
		function Message(properties) {
		    // not used internally
		    if (properties)
		        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
		            this[keys[i]] = properties[keys[i]];
		}

		/**
		 * Reference to the reflected type.
		 * @name Message.$type
		 * @type {Type}
		 * @readonly
		 */

		/**
		 * Reference to the reflected type.
		 * @name Message#$type
		 * @type {Type}
		 * @readonly
		 */

		/*eslint-disable valid-jsdoc*/

		/**
		 * Creates a new message of this type using the specified properties.
		 * @param {Object.<string,*>} [properties] Properties to set
		 * @returns {Message<T>} Message instance
		 * @template T extends Message<T>
		 * @this Constructor<T>
		 */
		Message.create = function create(properties) {
		    return this.$type.create(properties);
		};

		/**
		 * Encodes a message of this type.
		 * @param {T|Object.<string,*>} message Message to encode
		 * @param {Writer} [writer] Writer to use
		 * @returns {Writer} Writer
		 * @template T extends Message<T>
		 * @this Constructor<T>
		 */
		Message.encode = function encode(message, writer) {
		    return this.$type.encode(message, writer);
		};

		/**
		 * Encodes a message of this type preceeded by its length as a varint.
		 * @param {T|Object.<string,*>} message Message to encode
		 * @param {Writer} [writer] Writer to use
		 * @returns {Writer} Writer
		 * @template T extends Message<T>
		 * @this Constructor<T>
		 */
		Message.encodeDelimited = function encodeDelimited(message, writer) {
		    return this.$type.encodeDelimited(message, writer);
		};

		/**
		 * Decodes a message of this type.
		 * @name Message.decode
		 * @function
		 * @param {Reader|Uint8Array} reader Reader or buffer to decode
		 * @returns {T} Decoded message
		 * @template T extends Message<T>
		 * @this Constructor<T>
		 */
		Message.decode = function decode(reader) {
		    return this.$type.decode(reader);
		};

		/**
		 * Decodes a message of this type preceeded by its length as a varint.
		 * @name Message.decodeDelimited
		 * @function
		 * @param {Reader|Uint8Array} reader Reader or buffer to decode
		 * @returns {T} Decoded message
		 * @template T extends Message<T>
		 * @this Constructor<T>
		 */
		Message.decodeDelimited = function decodeDelimited(reader) {
		    return this.$type.decodeDelimited(reader);
		};

		/**
		 * Verifies a message of this type.
		 * @name Message.verify
		 * @function
		 * @param {Object.<string,*>} message Plain object to verify
		 * @returns {string|null} `null` if valid, otherwise the reason why it is not
		 */
		Message.verify = function verify(message) {
		    return this.$type.verify(message);
		};

		/**
		 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
		 * @param {Object.<string,*>} object Plain object
		 * @returns {T} Message instance
		 * @template T extends Message<T>
		 * @this Constructor<T>
		 */
		Message.fromObject = function fromObject(object) {
		    return this.$type.fromObject(object);
		};

		/**
		 * Creates a plain object from a message of this type. Also converts values to other types if specified.
		 * @param {T} message Message instance
		 * @param {IConversionOptions} [options] Conversion options
		 * @returns {Object.<string,*>} Plain object
		 * @template T extends Message<T>
		 * @this Constructor<T>
		 */
		Message.toObject = function toObject(message, options) {
		    return this.$type.toObject(message, options);
		};

		/**
		 * Converts this message to JSON.
		 * @returns {Object.<string,*>} JSON object
		 */
		Message.prototype.toJSON = function toJSON() {
		    return this.$type.toObject(this, util.toJSONOptions);
		};

		/*eslint-enable valid-jsdoc*/
		return message;
	}

	var decoder_1;
	var hasRequiredDecoder;

	function requireDecoder () {
		if (hasRequiredDecoder) return decoder_1;
		hasRequiredDecoder = 1;
		decoder_1 = decoder;

		var Enum    = require_enum(),
		    types   = requireTypes(),
		    util    = requireUtil();

		function missing(field) {
		    return "missing required '" + field.name + "'";
		}

		/**
		 * Generates a decoder specific to the specified message type.
		 * @param {Type} mtype Message type
		 * @returns {Codegen} Codegen instance
		 */
		function decoder(mtype) {
		    /* eslint-disable no-unexpected-multiline */
		    var gen = util.codegen(["r", "l"], mtype.name + "$decode")
		    ("if(!(r instanceof Reader))")
		        ("r=Reader.create(r)")
		    ("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? ",k,value" : ""))
		    ("while(r.pos<c){")
		        ("var t=r.uint32()");
		    if (mtype.group) gen
		        ("if((t&7)===4)")
		            ("break");
		    gen
		        ("switch(t>>>3){");

		    var i = 0;
		    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {
		        var field = mtype._fieldsArray[i].resolve(),
		            type  = field.resolvedType instanceof Enum ? "int32" : field.type,
		            ref   = "m" + util.safeProp(field.name); gen
		            ("case %i: {", field.id);

		        // Map fields
		        if (field.map) { gen
		                ("if(%s===util.emptyObject)", ref)
		                    ("%s={}", ref)
		                ("var c2 = r.uint32()+r.pos");

		            if (types.defaults[field.keyType] !== undefined) gen
		                ("k=%j", types.defaults[field.keyType]);
		            else gen
		                ("k=null");

		            if (types.defaults[type] !== undefined) gen
		                ("value=%j", types.defaults[type]);
		            else gen
		                ("value=null");

		            gen
		                ("while(r.pos<c2){")
		                    ("var tag2=r.uint32()")
		                    ("switch(tag2>>>3){")
		                        ("case 1: k=r.%s(); break", field.keyType)
		                        ("case 2:");

		            if (types.basic[type] === undefined) gen
		                            ("value=types[%i].decode(r,r.uint32())", i); // can't be groups
		            else gen
		                            ("value=r.%s()", type);

		            gen
		                            ("break")
		                        ("default:")
		                            ("r.skipType(tag2&7)")
		                            ("break")
		                    ("}")
		                ("}");

		            if (types.long[field.keyType] !== undefined) gen
		                ("%s[typeof k===\"object\"?util.longToHash(k):k]=value", ref);
		            else gen
		                ("%s[k]=value", ref);

		        // Repeated fields
		        } else if (field.repeated) { gen

		                ("if(!(%s&&%s.length))", ref, ref)
		                    ("%s=[]", ref);

		            // Packable (always check for forward and backward compatiblity)
		            if (types.packed[type] !== undefined) gen
		                ("if((t&7)===2){")
		                    ("var c2=r.uint32()+r.pos")
		                    ("while(r.pos<c2)")
		                        ("%s.push(r.%s())", ref, type)
		                ("}else");

		            // Non-packed
		            if (types.basic[type] === undefined) gen(field.resolvedType.group
		                    ? "%s.push(types[%i].decode(r))"
		                    : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
		            else gen
		                    ("%s.push(r.%s())", ref, type);

		        // Non-repeated
		        } else if (types.basic[type] === undefined) gen(field.resolvedType.group
		                ? "%s=types[%i].decode(r)"
		                : "%s=types[%i].decode(r,r.uint32())", ref, i);
		        else gen
		                ("%s=r.%s()", ref, type);
		        gen
		                ("break")
		            ("}");
		        // Unknown fields
		    } gen
		            ("default:")
		                ("r.skipType(t&7)")
		                ("break")

		        ("}")
		    ("}");

		    // Field presence
		    for (i = 0; i < mtype._fieldsArray.length; ++i) {
		        var rfield = mtype._fieldsArray[i];
		        if (rfield.required) gen
		    ("if(!m.hasOwnProperty(%j))", rfield.name)
		        ("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
		    }

		    return gen
		    ("return m");
		    /* eslint-enable no-unexpected-multiline */
		}
		return decoder_1;
	}

	var verifier_1;
	var hasRequiredVerifier;

	function requireVerifier () {
		if (hasRequiredVerifier) return verifier_1;
		hasRequiredVerifier = 1;
		verifier_1 = verifier;

		var Enum      = require_enum(),
		    util      = requireUtil();

		function invalid(field, expected) {
		    return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:"+field.keyType+"}" : "") + " expected";
		}

		/**
		 * Generates a partial value verifier.
		 * @param {Codegen} gen Codegen instance
		 * @param {Field} field Reflected field
		 * @param {number} fieldIndex Field index
		 * @param {string} ref Variable reference
		 * @returns {Codegen} Codegen instance
		 * @ignore
		 */
		function genVerifyValue(gen, field, fieldIndex, ref) {
		    /* eslint-disable no-unexpected-multiline */
		    if (field.resolvedType) {
		        if (field.resolvedType instanceof Enum) { gen
		            ("switch(%s){", ref)
		                ("default:")
		                    ("return%j", invalid(field, "enum value"));
		            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen
		                ("case %i:", field.resolvedType.values[keys[j]]);
		            gen
		                    ("break")
		            ("}");
		        } else {
		            gen
		            ("{")
		                ("var e=types[%i].verify(%s);", fieldIndex, ref)
		                ("if(e)")
		                    ("return%j+e", field.name + ".")
		            ("}");
		        }
		    } else {
		        switch (field.type) {
		            case "int32":
		            case "uint32":
		            case "sint32":
		            case "fixed32":
		            case "sfixed32": gen
		                ("if(!util.isInteger(%s))", ref)
		                    ("return%j", invalid(field, "integer"));
		                break;
		            case "int64":
		            case "uint64":
		            case "sint64":
		            case "fixed64":
		            case "sfixed64": gen
		                ("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)
		                    ("return%j", invalid(field, "integer|Long"));
		                break;
		            case "float":
		            case "double": gen
		                ("if(typeof %s!==\"number\")", ref)
		                    ("return%j", invalid(field, "number"));
		                break;
		            case "bool": gen
		                ("if(typeof %s!==\"boolean\")", ref)
		                    ("return%j", invalid(field, "boolean"));
		                break;
		            case "string": gen
		                ("if(!util.isString(%s))", ref)
		                    ("return%j", invalid(field, "string"));
		                break;
		            case "bytes": gen
		                ("if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))", ref, ref, ref)
		                    ("return%j", invalid(field, "buffer"));
		                break;
		        }
		    }
		    return gen;
		    /* eslint-enable no-unexpected-multiline */
		}

		/**
		 * Generates a partial key verifier.
		 * @param {Codegen} gen Codegen instance
		 * @param {Field} field Reflected field
		 * @param {string} ref Variable reference
		 * @returns {Codegen} Codegen instance
		 * @ignore
		 */
		function genVerifyKey(gen, field, ref) {
		    /* eslint-disable no-unexpected-multiline */
		    switch (field.keyType) {
		        case "int32":
		        case "uint32":
		        case "sint32":
		        case "fixed32":
		        case "sfixed32": gen
		            ("if(!util.key32Re.test(%s))", ref)
		                ("return%j", invalid(field, "integer key"));
		            break;
		        case "int64":
		        case "uint64":
		        case "sint64":
		        case "fixed64":
		        case "sfixed64": gen
		            ("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
		                ("return%j", invalid(field, "integer|Long key"));
		            break;
		        case "bool": gen
		            ("if(!util.key2Re.test(%s))", ref)
		                ("return%j", invalid(field, "boolean key"));
		            break;
		    }
		    return gen;
		    /* eslint-enable no-unexpected-multiline */
		}

		/**
		 * Generates a verifier specific to the specified message type.
		 * @param {Type} mtype Message type
		 * @returns {Codegen} Codegen instance
		 */
		function verifier(mtype) {
		    /* eslint-disable no-unexpected-multiline */

		    var gen = util.codegen(["m"], mtype.name + "$verify")
		    ("if(typeof m!==\"object\"||m===null)")
		        ("return%j", "object expected");
		    var oneofs = mtype.oneofsArray,
		        seenFirstField = {};
		    if (oneofs.length) gen
		    ("var p={}");

		    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {
		        var field = mtype._fieldsArray[i].resolve(),
		            ref   = "m" + util.safeProp(field.name);

		        if (field.optional) gen
		        ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null

		        // map fields
		        if (field.map) { gen
		            ("if(!util.isObject(%s))", ref)
		                ("return%j", invalid(field, "object"))
		            ("var k=Object.keys(%s)", ref)
		            ("for(var i=0;i<k.length;++i){");
		                genVerifyKey(gen, field, "k[i]");
		                genVerifyValue(gen, field, i, ref + "[k[i]]")
		            ("}");

		        // repeated fields
		        } else if (field.repeated) { gen
		            ("if(!Array.isArray(%s))", ref)
		                ("return%j", invalid(field, "array"))
		            ("for(var i=0;i<%s.length;++i){", ref);
		                genVerifyValue(gen, field, i, ref + "[i]")
		            ("}");

		        // required or present fields
		        } else {
		            if (field.partOf) {
		                var oneofProp = util.safeProp(field.partOf.name);
		                if (seenFirstField[field.partOf.name] === 1) gen
		            ("if(p%s===1)", oneofProp)
		                ("return%j", field.partOf.name + ": multiple values");
		                seenFirstField[field.partOf.name] = 1;
		                gen
		            ("p%s=1", oneofProp);
		            }
		            genVerifyValue(gen, field, i, ref);
		        }
		        if (field.optional) gen
		        ("}");
		    }
		    return gen
		    ("return null");
		    /* eslint-enable no-unexpected-multiline */
		}
		return verifier_1;
	}

	var converter = {};

	var hasRequiredConverter;

	function requireConverter () {
		if (hasRequiredConverter) return converter;
		hasRequiredConverter = 1;
		(function (exports) {
			/**
			 * Runtime message from/to plain object converters.
			 * @namespace
			 */
			var converter = exports;

			var Enum = require_enum(),
			    util = requireUtil();

			/**
			 * Generates a partial value fromObject conveter.
			 * @param {Codegen} gen Codegen instance
			 * @param {Field} field Reflected field
			 * @param {number} fieldIndex Field index
			 * @param {string} prop Property reference
			 * @returns {Codegen} Codegen instance
			 * @ignore
			 */
			function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
			    var defaultAlreadyEmitted = false;
			    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
			    if (field.resolvedType) {
			        if (field.resolvedType instanceof Enum) { gen
			            ("switch(d%s){", prop);
			            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
			                // enum unknown values passthrough
			                if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) { gen
			                    ("default:")
			                        ("if(typeof(d%s)===\"number\"){m%s=d%s;break}", prop, prop, prop);
			                    if (!field.repeated) gen // fallback to default value only for
			                                             // arrays, to avoid leaving holes.
			                        ("break");           // for non-repeated fields, just ignore
			                    defaultAlreadyEmitted = true;
			                }
			                gen
			                ("case%j:", keys[i])
			                ("case %i:", values[keys[i]])
			                    ("m%s=%j", prop, values[keys[i]])
			                    ("break");
			            } gen
			            ("}");
			        } else gen
			            ("if(typeof d%s!==\"object\")", prop)
			                ("throw TypeError(%j)", field.fullName + ": object expected")
			            ("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
			    } else {
			        var isUnsigned = false;
			        switch (field.type) {
			            case "double":
			            case "float": gen
			                ("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"
			                break;
			            case "uint32":
			            case "fixed32": gen
			                ("m%s=d%s>>>0", prop, prop);
			                break;
			            case "int32":
			            case "sint32":
			            case "sfixed32": gen
			                ("m%s=d%s|0", prop, prop);
			                break;
			            case "uint64":
			                isUnsigned = true;
			                // eslint-disable-next-line no-fallthrough
			            case "int64":
			            case "sint64":
			            case "fixed64":
			            case "sfixed64": gen
			                ("if(util.Long)")
			                    ("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)
			                ("else if(typeof d%s===\"string\")", prop)
			                    ("m%s=parseInt(d%s,10)", prop, prop)
			                ("else if(typeof d%s===\"number\")", prop)
			                    ("m%s=d%s", prop, prop)
			                ("else if(typeof d%s===\"object\")", prop)
			                    ("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
			                break;
			            case "bytes": gen
			                ("if(typeof d%s===\"string\")", prop)
			                    ("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)
			                ("else if(d%s.length >= 0)", prop)
			                    ("m%s=d%s", prop, prop);
			                break;
			            case "string": gen
			                ("m%s=String(d%s)", prop, prop);
			                break;
			            case "bool": gen
			                ("m%s=Boolean(d%s)", prop, prop);
			                break;
			            /* default: gen
			                ("m%s=d%s", prop, prop);
			                break; */
			        }
			    }
			    return gen;
			    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
			}

			/**
			 * Generates a plain object to runtime message converter specific to the specified message type.
			 * @param {Type} mtype Message type
			 * @returns {Codegen} Codegen instance
			 */
			converter.fromObject = function fromObject(mtype) {
			    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
			    var fields = mtype.fieldsArray;
			    var gen = util.codegen(["d"], mtype.name + "$fromObject")
			    ("if(d instanceof this.ctor)")
			        ("return d");
			    if (!fields.length) return gen
			    ("return new this.ctor");
			    gen
			    ("var m=new this.ctor");
			    for (var i = 0; i < fields.length; ++i) {
			        var field  = fields[i].resolve(),
			            prop   = util.safeProp(field.name);

			        // Map fields
			        if (field.map) { gen
			    ("if(d%s){", prop)
			        ("if(typeof d%s!==\"object\")", prop)
			            ("throw TypeError(%j)", field.fullName + ": object expected")
			        ("m%s={}", prop)
			        ("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
			            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[ks[i]]")
			        ("}")
			    ("}");

			        // Repeated fields
			        } else if (field.repeated) { gen
			    ("if(d%s){", prop)
			        ("if(!Array.isArray(d%s))", prop)
			            ("throw TypeError(%j)", field.fullName + ": array expected")
			        ("m%s=[]", prop)
			        ("for(var i=0;i<d%s.length;++i){", prop);
			            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[i]")
			        ("}")
			    ("}");

			        // Non-repeated fields
			        } else {
			            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
			    ("if(d%s!=null){", prop); // !== undefined && !== null
			        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);
			            if (!(field.resolvedType instanceof Enum)) gen
			    ("}");
			        }
			    } return gen
			    ("return m");
			    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
			};

			/**
			 * Generates a partial value toObject converter.
			 * @param {Codegen} gen Codegen instance
			 * @param {Field} field Reflected field
			 * @param {number} fieldIndex Field index
			 * @param {string} prop Property reference
			 * @returns {Codegen} Codegen instance
			 * @ignore
			 */
			function genValuePartial_toObject(gen, field, fieldIndex, prop) {
			    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
			    if (field.resolvedType) {
			        if (field.resolvedType instanceof Enum) gen
			            ("d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);
			        else gen
			            ("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
			    } else {
			        var isUnsigned = false;
			        switch (field.type) {
			            case "double":
			            case "float": gen
			            ("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
			                break;
			            case "uint64":
			                isUnsigned = true;
			                // eslint-disable-next-line no-fallthrough
			            case "int64":
			            case "sint64":
			            case "fixed64":
			            case "sfixed64": gen
			            ("if(typeof m%s===\"number\")", prop)
			                ("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)
			            ("else") // Long-like
			                ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true": "", prop);
			                break;
			            case "bytes": gen
			            ("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
			                break;
			            default: gen
			            ("d%s=m%s", prop, prop);
			                break;
			        }
			    }
			    return gen;
			    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
			}

			/**
			 * Generates a runtime message to plain object converter specific to the specified message type.
			 * @param {Type} mtype Message type
			 * @returns {Codegen} Codegen instance
			 */
			converter.toObject = function toObject(mtype) {
			    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
			    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
			    if (!fields.length)
			        return util.codegen()("return {}");
			    var gen = util.codegen(["m", "o"], mtype.name + "$toObject")
			    ("if(!o)")
			        ("o={}")
			    ("var d={}");

			    var repeatedFields = [],
			        mapFields = [],
			        normalFields = [],
			        i = 0;
			    for (; i < fields.length; ++i)
			        if (!fields[i].partOf)
			            ( fields[i].resolve().repeated ? repeatedFields
			            : fields[i].map ? mapFields
			            : normalFields).push(fields[i]);

			    if (repeatedFields.length) { gen
			    ("if(o.arrays||o.defaults){");
			        for (i = 0; i < repeatedFields.length; ++i) gen
			        ("d%s=[]", util.safeProp(repeatedFields[i].name));
			        gen
			    ("}");
			    }

			    if (mapFields.length) { gen
			    ("if(o.objects||o.defaults){");
			        for (i = 0; i < mapFields.length; ++i) gen
			        ("d%s={}", util.safeProp(mapFields[i].name));
			        gen
			    ("}");
			    }

			    if (normalFields.length) { gen
			    ("if(o.defaults){");
			        for (i = 0; i < normalFields.length; ++i) {
			            var field = normalFields[i],
			                prop  = util.safeProp(field.name);
			            if (field.resolvedType instanceof Enum) gen
			        ("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
			            else if (field.long) gen
			        ("if(util.Long){")
			            ("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)
			            ("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)
			        ("}else")
			            ("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
			            else if (field.bytes) {
			                var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
			                gen
			        ("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))
			        ("else{")
			            ("d%s=%s", prop, arrayDefault)
			            ("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)
			        ("}");
			            } else gen
			        ("d%s=%j", prop, field.typeDefault); // also messages (=null)
			        } gen
			    ("}");
			    }
			    var hasKs2 = false;
			    for (i = 0; i < fields.length; ++i) {
			        var field = fields[i],
			            index = mtype._fieldsArray.indexOf(field),
			            prop  = util.safeProp(field.name);
			        if (field.map) {
			            if (!hasKs2) { hasKs2 = true; gen
			    ("var ks2");
			            } gen
			    ("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)
			        ("d%s={}", prop)
			        ("for(var j=0;j<ks2.length;++j){");
			            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[ks2[j]]")
			        ("}");
			        } else if (field.repeated) { gen
			    ("if(m%s&&m%s.length){", prop, prop)
			        ("d%s=[]", prop)
			        ("for(var j=0;j<m%s.length;++j){", prop);
			            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[j]")
			        ("}");
			        } else { gen
			    ("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null
			        genValuePartial_toObject(gen, field, /* sorted */ index, prop);
			        if (field.partOf) gen
			        ("if(o.oneofs)")
			            ("d%s=%j", util.safeProp(field.partOf.name), field.name);
			        }
			        gen
			    ("}");
			    }
			    return gen
			    ("return d");
			    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
			}; 
		} (converter));
		return converter;
	}

	var wrappers = {};

	var hasRequiredWrappers;

	function requireWrappers () {
		if (hasRequiredWrappers) return wrappers;
		hasRequiredWrappers = 1;
		(function (exports) {

			/**
			 * Wrappers for common types.
			 * @type {Object.<string,IWrapper>}
			 * @const
			 */
			var wrappers = exports;

			var Message = requireMessage();

			/**
			 * From object converter part of an {@link IWrapper}.
			 * @typedef WrapperFromObjectConverter
			 * @type {function}
			 * @param {Object.<string,*>} object Plain object
			 * @returns {Message<{}>} Message instance
			 * @this Type
			 */

			/**
			 * To object converter part of an {@link IWrapper}.
			 * @typedef WrapperToObjectConverter
			 * @type {function}
			 * @param {Message<{}>} message Message instance
			 * @param {IConversionOptions} [options] Conversion options
			 * @returns {Object.<string,*>} Plain object
			 * @this Type
			 */

			/**
			 * Common type wrapper part of {@link wrappers}.
			 * @interface IWrapper
			 * @property {WrapperFromObjectConverter} [fromObject] From object converter
			 * @property {WrapperToObjectConverter} [toObject] To object converter
			 */

			// Custom wrapper for Any
			wrappers[".google.protobuf.Any"] = {

			    fromObject: function(object) {

			        // unwrap value type if mapped
			        if (object && object["@type"]) {
			             // Only use fully qualified type name after the last '/'
			            var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
			            var type = this.lookup(name);
			            /* istanbul ignore else */
			            if (type) {
			                // type_url does not accept leading "."
			                var type_url = object["@type"].charAt(0) === "." ?
			                    object["@type"].slice(1) : object["@type"];
			                // type_url prefix is optional, but path seperator is required
			                if (type_url.indexOf("/") === -1) {
			                    type_url = "/" + type_url;
			                }
			                return this.create({
			                    type_url: type_url,
			                    value: type.encode(type.fromObject(object)).finish()
			                });
			            }
			        }

			        return this.fromObject(object);
			    },

			    toObject: function(message, options) {

			        // Default prefix
			        var googleApi = "type.googleapis.com/";
			        var prefix = "";
			        var name = "";

			        // decode value if requested and unmapped
			        if (options && options.json && message.type_url && message.value) {
			            // Only use fully qualified type name after the last '/'
			            name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
			            // Separate the prefix used
			            prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
			            var type = this.lookup(name);
			            /* istanbul ignore else */
			            if (type)
			                message = type.decode(message.value);
			        }

			        // wrap value if unmapped
			        if (!(message instanceof this.ctor) && message instanceof Message) {
			            var object = message.$type.toObject(message, options);
			            var messageName = message.$type.fullName[0] === "." ?
			                message.$type.fullName.slice(1) : message.$type.fullName;
			            // Default to type.googleapis.com prefix if no prefix is used
			            if (prefix === "") {
			                prefix = googleApi;
			            }
			            name = prefix + messageName;
			            object["@type"] = name;
			            return object;
			        }

			        return this.toObject(message, options);
			    }
			}; 
		} (wrappers));
		return wrappers;
	}

	var type;
	var hasRequiredType;

	function requireType () {
		if (hasRequiredType) return type;
		hasRequiredType = 1;
		type = Type;

		// extends Namespace
		var Namespace = requireNamespace();
		((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

		var Enum      = require_enum(),
		    OneOf     = requireOneof(),
		    Field     = requireField(),
		    MapField  = requireMapfield(),
		    Service   = requireService(),
		    Message   = requireMessage(),
		    Reader    = requireReader(),
		    Writer    = requireWriter(),
		    util      = requireUtil(),
		    encoder   = requireEncoder(),
		    decoder   = requireDecoder(),
		    verifier  = requireVerifier(),
		    converter = requireConverter(),
		    wrappers  = requireWrappers();

		/**
		 * Constructs a new reflected message type instance.
		 * @classdesc Reflected message type.
		 * @extends NamespaceBase
		 * @constructor
		 * @param {string} name Message name
		 * @param {Object.<string,*>} [options] Declared options
		 */
		function Type(name, options) {
		    Namespace.call(this, name, options);

		    /**
		     * Message fields.
		     * @type {Object.<string,Field>}
		     */
		    this.fields = {};  // toJSON, marker

		    /**
		     * Oneofs declared within this namespace, if any.
		     * @type {Object.<string,OneOf>}
		     */
		    this.oneofs = undefined; // toJSON

		    /**
		     * Extension ranges, if any.
		     * @type {number[][]}
		     */
		    this.extensions = undefined; // toJSON

		    /**
		     * Reserved ranges, if any.
		     * @type {Array.<number[]|string>}
		     */
		    this.reserved = undefined; // toJSON

		    /*?
		     * Whether this type is a legacy group.
		     * @type {boolean|undefined}
		     */
		    this.group = undefined; // toJSON

		    /**
		     * Cached fields by id.
		     * @type {Object.<number,Field>|null}
		     * @private
		     */
		    this._fieldsById = null;

		    /**
		     * Cached fields as an array.
		     * @type {Field[]|null}
		     * @private
		     */
		    this._fieldsArray = null;

		    /**
		     * Cached oneofs as an array.
		     * @type {OneOf[]|null}
		     * @private
		     */
		    this._oneofsArray = null;

		    /**
		     * Cached constructor.
		     * @type {Constructor<{}>}
		     * @private
		     */
		    this._ctor = null;
		}

		Object.defineProperties(Type.prototype, {

		    /**
		     * Message fields by id.
		     * @name Type#fieldsById
		     * @type {Object.<number,Field>}
		     * @readonly
		     */
		    fieldsById: {
		        get: function() {

		            /* istanbul ignore if */
		            if (this._fieldsById)
		                return this._fieldsById;

		            this._fieldsById = {};
		            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
		                var field = this.fields[names[i]],
		                    id = field.id;

		                /* istanbul ignore if */
		                if (this._fieldsById[id])
		                    throw Error("duplicate id " + id + " in " + this);

		                this._fieldsById[id] = field;
		            }
		            return this._fieldsById;
		        }
		    },

		    /**
		     * Fields of this message as an array for iteration.
		     * @name Type#fieldsArray
		     * @type {Field[]}
		     * @readonly
		     */
		    fieldsArray: {
		        get: function() {
		            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
		        }
		    },

		    /**
		     * Oneofs of this message as an array for iteration.
		     * @name Type#oneofsArray
		     * @type {OneOf[]}
		     * @readonly
		     */
		    oneofsArray: {
		        get: function() {
		            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
		        }
		    },

		    /**
		     * The registered constructor, if any registered, otherwise a generic constructor.
		     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
		     * @name Type#ctor
		     * @type {Constructor<{}>}
		     */
		    ctor: {
		        get: function() {
		            return this._ctor || (this.ctor = Type.generateConstructor(this)());
		        },
		        set: function(ctor) {

		            // Ensure proper prototype
		            var prototype = ctor.prototype;
		            if (!(prototype instanceof Message)) {
		                (ctor.prototype = new Message()).constructor = ctor;
		                util.merge(ctor.prototype, prototype);
		            }

		            // Classes and messages reference their reflected type
		            ctor.$type = ctor.prototype.$type = this;

		            // Mix in static methods
		            util.merge(ctor, Message, true);

		            this._ctor = ctor;

		            // Messages have non-enumerable default values on their prototype
		            var i = 0;
		            for (; i < /* initializes */ this.fieldsArray.length; ++i)
		                this._fieldsArray[i].resolve(); // ensures a proper value

		            // Messages have non-enumerable getters and setters for each virtual oneof field
		            var ctorProperties = {};
		            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)
		                ctorProperties[this._oneofsArray[i].resolve().name] = {
		                    get: util.oneOfGetter(this._oneofsArray[i].oneof),
		                    set: util.oneOfSetter(this._oneofsArray[i].oneof)
		                };
		            if (i)
		                Object.defineProperties(ctor.prototype, ctorProperties);
		        }
		    }
		});

		/**
		 * Generates a constructor function for the specified type.
		 * @param {Type} mtype Message type
		 * @returns {Codegen} Codegen instance
		 */
		Type.generateConstructor = function generateConstructor(mtype) {
		    /* eslint-disable no-unexpected-multiline */
		    var gen = util.codegen(["p"], mtype.name);
		    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype
		    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
		        if ((field = mtype._fieldsArray[i]).map) gen
		            ("this%s={}", util.safeProp(field.name));
		        else if (field.repeated) gen
		            ("this%s=[]", util.safeProp(field.name));
		    return gen
		    ("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
		        ("this[ks[i]]=p[ks[i]]");
		    /* eslint-enable no-unexpected-multiline */
		};

		function clearCache(type) {
		    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
		    delete type.encode;
		    delete type.decode;
		    delete type.verify;
		    return type;
		}

		/**
		 * Message type descriptor.
		 * @interface IType
		 * @extends INamespace
		 * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
		 * @property {Object.<string,IField>} fields Field descriptors
		 * @property {number[][]} [extensions] Extension ranges
		 * @property {Array.<number[]|string>} [reserved] Reserved ranges
		 * @property {boolean} [group=false] Whether a legacy group or not
		 */

		/**
		 * Creates a message type from a message type descriptor.
		 * @param {string} name Message name
		 * @param {IType} json Message type descriptor
		 * @returns {Type} Created message type
		 */
		Type.fromJSON = function fromJSON(name, json) {
		    var type = new Type(name, json.options);
		    type.extensions = json.extensions;
		    type.reserved = json.reserved;
		    var names = Object.keys(json.fields),
		        i = 0;
		    for (; i < names.length; ++i)
		        type.add(
		            ( typeof json.fields[names[i]].keyType !== "undefined"
		            ? MapField.fromJSON
		            : Field.fromJSON )(names[i], json.fields[names[i]])
		        );
		    if (json.oneofs)
		        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
		            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
		    if (json.nested)
		        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
		            var nested = json.nested[names[i]];
		            type.add( // most to least likely
		                ( nested.id !== undefined
		                ? Field.fromJSON
		                : nested.fields !== undefined
		                ? Type.fromJSON
		                : nested.values !== undefined
		                ? Enum.fromJSON
		                : nested.methods !== undefined
		                ? Service.fromJSON
		                : Namespace.fromJSON )(names[i], nested)
		            );
		        }
		    if (json.extensions && json.extensions.length)
		        type.extensions = json.extensions;
		    if (json.reserved && json.reserved.length)
		        type.reserved = json.reserved;
		    if (json.group)
		        type.group = true;
		    if (json.comment)
		        type.comment = json.comment;
		    return type;
		};

		/**
		 * Converts this message type to a message type descriptor.
		 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
		 * @returns {IType} Message type descriptor
		 */
		Type.prototype.toJSON = function toJSON(toJSONOptions) {
		    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
		    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
		    return util.toObject([
		        "options"    , inherited && inherited.options || undefined,
		        "oneofs"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
		        "fields"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},
		        "extensions" , this.extensions && this.extensions.length ? this.extensions : undefined,
		        "reserved"   , this.reserved && this.reserved.length ? this.reserved : undefined,
		        "group"      , this.group || undefined,
		        "nested"     , inherited && inherited.nested || undefined,
		        "comment"    , keepComments ? this.comment : undefined
		    ]);
		};

		/**
		 * @override
		 */
		Type.prototype.resolveAll = function resolveAll() {
		    var fields = this.fieldsArray, i = 0;
		    while (i < fields.length)
		        fields[i++].resolve();
		    var oneofs = this.oneofsArray; i = 0;
		    while (i < oneofs.length)
		        oneofs[i++].resolve();
		    return Namespace.prototype.resolveAll.call(this);
		};

		/**
		 * @override
		 */
		Type.prototype.get = function get(name) {
		    return this.fields[name]
		        || this.oneofs && this.oneofs[name]
		        || this.nested && this.nested[name]
		        || null;
		};

		/**
		 * Adds a nested object to this type.
		 * @param {ReflectionObject} object Nested object to add
		 * @returns {Type} `this`
		 * @throws {TypeError} If arguments are invalid
		 * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
		 */
		Type.prototype.add = function add(object) {

		    if (this.get(object.name))
		        throw Error("duplicate name '" + object.name + "' in " + this);

		    if (object instanceof Field && object.extend === undefined) {
		        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
		        // The root object takes care of adding distinct sister-fields to the respective extended
		        // type instead.

		        // avoids calling the getter if not absolutely necessary because it's called quite frequently
		        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])
		            throw Error("duplicate id " + object.id + " in " + this);
		        if (this.isReservedId(object.id))
		            throw Error("id " + object.id + " is reserved in " + this);
		        if (this.isReservedName(object.name))
		            throw Error("name '" + object.name + "' is reserved in " + this);

		        if (object.parent)
		            object.parent.remove(object);
		        this.fields[object.name] = object;
		        object.message = this;
		        object.onAdd(this);
		        return clearCache(this);
		    }
		    if (object instanceof OneOf) {
		        if (!this.oneofs)
		            this.oneofs = {};
		        this.oneofs[object.name] = object;
		        object.onAdd(this);
		        return clearCache(this);
		    }
		    return Namespace.prototype.add.call(this, object);
		};

		/**
		 * Removes a nested object from this type.
		 * @param {ReflectionObject} object Nested object to remove
		 * @returns {Type} `this`
		 * @throws {TypeError} If arguments are invalid
		 * @throws {Error} If `object` is not a member of this type
		 */
		Type.prototype.remove = function remove(object) {
		    if (object instanceof Field && object.extend === undefined) {
		        // See Type#add for the reason why extension fields are excluded here.

		        /* istanbul ignore if */
		        if (!this.fields || this.fields[object.name] !== object)
		            throw Error(object + " is not a member of " + this);

		        delete this.fields[object.name];
		        object.parent = null;
		        object.onRemove(this);
		        return clearCache(this);
		    }
		    if (object instanceof OneOf) {

		        /* istanbul ignore if */
		        if (!this.oneofs || this.oneofs[object.name] !== object)
		            throw Error(object + " is not a member of " + this);

		        delete this.oneofs[object.name];
		        object.parent = null;
		        object.onRemove(this);
		        return clearCache(this);
		    }
		    return Namespace.prototype.remove.call(this, object);
		};

		/**
		 * Tests if the specified id is reserved.
		 * @param {number} id Id to test
		 * @returns {boolean} `true` if reserved, otherwise `false`
		 */
		Type.prototype.isReservedId = function isReservedId(id) {
		    return Namespace.isReservedId(this.reserved, id);
		};

		/**
		 * Tests if the specified name is reserved.
		 * @param {string} name Name to test
		 * @returns {boolean} `true` if reserved, otherwise `false`
		 */
		Type.prototype.isReservedName = function isReservedName(name) {
		    return Namespace.isReservedName(this.reserved, name);
		};

		/**
		 * Creates a new message of this type using the specified properties.
		 * @param {Object.<string,*>} [properties] Properties to set
		 * @returns {Message<{}>} Message instance
		 */
		Type.prototype.create = function create(properties) {
		    return new this.ctor(properties);
		};

		/**
		 * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
		 * @returns {Type} `this`
		 */
		Type.prototype.setup = function setup() {
		    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
		    // multiple times (V8, soft-deopt prototype-check).

		    var fullName = this.fullName,
		        types    = [];
		    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)
		        types.push(this._fieldsArray[i].resolve().resolvedType);

		    // Replace setup methods with type-specific generated functions
		    this.encode = encoder(this)({
		        Writer : Writer,
		        types  : types,
		        util   : util
		    });
		    this.decode = decoder(this)({
		        Reader : Reader,
		        types  : types,
		        util   : util
		    });
		    this.verify = verifier(this)({
		        types : types,
		        util  : util
		    });
		    this.fromObject = converter.fromObject(this)({
		        types : types,
		        util  : util
		    });
		    this.toObject = converter.toObject(this)({
		        types : types,
		        util  : util
		    });

		    // Inject custom wrappers for common types
		    var wrapper = wrappers[fullName];
		    if (wrapper) {
		        var originalThis = Object.create(this);
		        // if (wrapper.fromObject) {
		            originalThis.fromObject = this.fromObject;
		            this.fromObject = wrapper.fromObject.bind(originalThis);
		        // }
		        // if (wrapper.toObject) {
		            originalThis.toObject = this.toObject;
		            this.toObject = wrapper.toObject.bind(originalThis);
		        // }
		    }

		    return this;
		};

		/**
		 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
		 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
		 * @param {Writer} [writer] Writer to encode to
		 * @returns {Writer} writer
		 */
		Type.prototype.encode = function encode_setup(message, writer) {
		    return this.setup().encode(message, writer); // overrides this method
		};

		/**
		 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
		 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
		 * @param {Writer} [writer] Writer to encode to
		 * @returns {Writer} writer
		 */
		Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
		    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
		};

		/**
		 * Decodes a message of this type.
		 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
		 * @param {number} [length] Length of the message, if known beforehand
		 * @returns {Message<{}>} Decoded message
		 * @throws {Error} If the payload is not a reader or valid buffer
		 * @throws {util.ProtocolError<{}>} If required fields are missing
		 */
		Type.prototype.decode = function decode_setup(reader, length) {
		    return this.setup().decode(reader, length); // overrides this method
		};

		/**
		 * Decodes a message of this type preceeded by its byte length as a varint.
		 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
		 * @returns {Message<{}>} Decoded message
		 * @throws {Error} If the payload is not a reader or valid buffer
		 * @throws {util.ProtocolError} If required fields are missing
		 */
		Type.prototype.decodeDelimited = function decodeDelimited(reader) {
		    if (!(reader instanceof Reader))
		        reader = Reader.create(reader);
		    return this.decode(reader, reader.uint32());
		};

		/**
		 * Verifies that field values are valid and that required fields are present.
		 * @param {Object.<string,*>} message Plain object to verify
		 * @returns {null|string} `null` if valid, otherwise the reason why it is not
		 */
		Type.prototype.verify = function verify_setup(message) {
		    return this.setup().verify(message); // overrides this method
		};

		/**
		 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
		 * @param {Object.<string,*>} object Plain object to convert
		 * @returns {Message<{}>} Message instance
		 */
		Type.prototype.fromObject = function fromObject(object) {
		    return this.setup().fromObject(object);
		};

		/**
		 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
		 * @interface IConversionOptions
		 * @property {Function} [longs] Long conversion type.
		 * Valid values are `String` and `Number` (the global types).
		 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
		 * @property {Function} [enums] Enum value conversion type.
		 * Only valid value is `String` (the global type).
		 * Defaults to copy the present value, which is the numeric id.
		 * @property {Function} [bytes] Bytes value conversion type.
		 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
		 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
		 * @property {boolean} [defaults=false] Also sets default values on the resulting object
		 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
		 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
		 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
		 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
		 */

		/**
		 * Creates a plain object from a message of this type. Also converts values to other types if specified.
		 * @param {Message<{}>} message Message instance
		 * @param {IConversionOptions} [options] Conversion options
		 * @returns {Object.<string,*>} Plain object
		 */
		Type.prototype.toObject = function toObject(message, options) {
		    return this.setup().toObject(message, options);
		};

		/**
		 * Decorator function as returned by {@link Type.d} (TypeScript).
		 * @typedef TypeDecorator
		 * @type {function}
		 * @param {Constructor<T>} target Target constructor
		 * @returns {undefined}
		 * @template T extends Message<T>
		 */

		/**
		 * Type decorator (TypeScript).
		 * @param {string} [typeName] Type name, defaults to the constructor's name
		 * @returns {TypeDecorator<T>} Decorator function
		 * @template T extends Message<T>
		 */
		Type.d = function decorateType(typeName) {
		    return function typeDecorator(target) {
		        util.decorateType(target, typeName);
		    };
		};
		return type;
	}

	var root;
	var hasRequiredRoot;

	function requireRoot () {
		if (hasRequiredRoot) return root;
		hasRequiredRoot = 1;
		root = Root;

		// extends Namespace
		var Namespace = requireNamespace();
		((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

		var Field   = requireField(),
		    Enum    = require_enum(),
		    OneOf   = requireOneof(),
		    util    = requireUtil();

		var Type,   // cyclic
		    parse,  // might be excluded
		    common; // "

		/**
		 * Constructs a new root namespace instance.
		 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
		 * @extends NamespaceBase
		 * @constructor
		 * @param {Object.<string,*>} [options] Top level options
		 */
		function Root(options) {
		    Namespace.call(this, "", options);

		    /**
		     * Deferred extension fields.
		     * @type {Field[]}
		     */
		    this.deferred = [];

		    /**
		     * Resolved file names of loaded files.
		     * @type {string[]}
		     */
		    this.files = [];
		}

		/**
		 * Loads a namespace descriptor into a root namespace.
		 * @param {INamespace} json Nameespace descriptor
		 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
		 * @returns {Root} Root namespace
		 */
		Root.fromJSON = function fromJSON(json, root) {
		    if (!root)
		        root = new Root();
		    if (json.options)
		        root.setOptions(json.options);
		    return root.addJSON(json.nested);
		};

		/**
		 * Resolves the path of an imported file, relative to the importing origin.
		 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
		 * @function
		 * @param {string} origin The file name of the importing file
		 * @param {string} target The file name being imported
		 * @returns {string|null} Resolved path to `target` or `null` to skip the file
		 */
		Root.prototype.resolvePath = util.path.resolve;

		/**
		 * Fetch content from file path or url
		 * This method exists so you can override it with your own logic.
		 * @function
		 * @param {string} path File path or url
		 * @param {FetchCallback} callback Callback function
		 * @returns {undefined}
		 */
		Root.prototype.fetch = util.fetch;

		// A symbol-like function to safely signal synchronous loading
		/* istanbul ignore next */
		function SYNC() {} // eslint-disable-line no-empty-function

		/**
		 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
		 * @param {string|string[]} filename Names of one or multiple files to load
		 * @param {IParseOptions} options Parse options
		 * @param {LoadCallback} callback Callback function
		 * @returns {undefined}
		 */
		Root.prototype.load = function load(filename, options, callback) {
		    if (typeof options === "function") {
		        callback = options;
		        options = undefined;
		    }
		    var self = this;
		    if (!callback)
		        return util.asPromise(load, self, filename, options);

		    var sync = callback === SYNC; // undocumented

		    // Finishes loading by calling the callback (exactly once)
		    function finish(err, root) {
		        /* istanbul ignore if */
		        if (!callback)
		            return;
		        if (sync)
		            throw err;
		        var cb = callback;
		        callback = null;
		        cb(err, root);
		    }

		    // Bundled definition existence checking
		    function getBundledFileName(filename) {
		        var idx = filename.lastIndexOf("google/protobuf/");
		        if (idx > -1) {
		            var altname = filename.substring(idx);
		            if (altname in common) return altname;
		        }
		        return null;
		    }

		    // Processes a single file
		    function process(filename, source) {
		        try {
		            if (util.isString(source) && source.charAt(0) === "{")
		                source = JSON.parse(source);
		            if (!util.isString(source))
		                self.setOptions(source.options).addJSON(source.nested);
		            else {
		                parse.filename = filename;
		                var parsed = parse(source, self, options),
		                    resolved,
		                    i = 0;
		                if (parsed.imports)
		                    for (; i < parsed.imports.length; ++i)
		                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))
		                            fetch(resolved);
		                if (parsed.weakImports)
		                    for (i = 0; i < parsed.weakImports.length; ++i)
		                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))
		                            fetch(resolved, true);
		            }
		        } catch (err) {
		            finish(err);
		        }
		        if (!sync && !queued)
		            finish(null, self); // only once anyway
		    }

		    // Fetches a single file
		    function fetch(filename, weak) {
		        filename = getBundledFileName(filename) || filename;

		        // Skip if already loaded / attempted
		        if (self.files.indexOf(filename) > -1)
		            return;
		        self.files.push(filename);

		        // Shortcut bundled definitions
		        if (filename in common) {
		            if (sync)
		                process(filename, common[filename]);
		            else {
		                ++queued;
		                setTimeout(function() {
		                    --queued;
		                    process(filename, common[filename]);
		                });
		            }
		            return;
		        }

		        // Otherwise fetch from disk or network
		        if (sync) {
		            var source;
		            try {
		                source = util.fs.readFileSync(filename).toString("utf8");
		            } catch (err) {
		                if (!weak)
		                    finish(err);
		                return;
		            }
		            process(filename, source);
		        } else {
		            ++queued;
		            self.fetch(filename, function(err, source) {
		                --queued;
		                /* istanbul ignore if */
		                if (!callback)
		                    return; // terminated meanwhile
		                if (err) {
		                    /* istanbul ignore else */
		                    if (!weak)
		                        finish(err);
		                    else if (!queued) // can't be covered reliably
		                        finish(null, self);
		                    return;
		                }
		                process(filename, source);
		            });
		        }
		    }
		    var queued = 0;

		    // Assembling the root namespace doesn't require working type
		    // references anymore, so we can load everything in parallel
		    if (util.isString(filename))
		        filename = [ filename ];
		    for (var i = 0, resolved; i < filename.length; ++i)
		        if (resolved = self.resolvePath("", filename[i]))
		            fetch(resolved);

		    if (sync)
		        return self;
		    if (!queued)
		        finish(null, self);
		    return undefined;
		};
		// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

		/**
		 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
		 * @function Root#load
		 * @param {string|string[]} filename Names of one or multiple files to load
		 * @param {LoadCallback} callback Callback function
		 * @returns {undefined}
		 * @variation 2
		 */
		// function load(filename:string, callback:LoadCallback):undefined

		/**
		 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
		 * @function Root#load
		 * @param {string|string[]} filename Names of one or multiple files to load
		 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
		 * @returns {Promise<Root>} Promise
		 * @variation 3
		 */
		// function load(filename:string, [options:IParseOptions]):Promise<Root>

		/**
		 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
		 * @function Root#loadSync
		 * @param {string|string[]} filename Names of one or multiple files to load
		 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
		 * @returns {Root} Root namespace
		 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
		 */
		Root.prototype.loadSync = function loadSync(filename, options) {
		    if (!util.isNode)
		        throw Error("not supported");
		    return this.load(filename, options, SYNC);
		};

		/**
		 * @override
		 */
		Root.prototype.resolveAll = function resolveAll() {
		    if (this.deferred.length)
		        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
		            return "'extend " + field.extend + "' in " + field.parent.fullName;
		        }).join(", "));
		    return Namespace.prototype.resolveAll.call(this);
		};

		// only uppercased (and thus conflict-free) children are exposed, see below
		var exposeRe = /^[A-Z]/;

		/**
		 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
		 * @param {Root} root Root instance
		 * @param {Field} field Declaring extension field witin the declaring type
		 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
		 * @inner
		 * @ignore
		 */
		function tryHandleExtension(root, field) {
		    var extendedType = field.parent.lookup(field.extend);
		    if (extendedType) {
		        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
		        //do not allow to extend same field twice to prevent the error
		        if (extendedType.get(sisterField.name)) {
		            return true;
		        }
		        sisterField.declaringField = field;
		        field.extensionField = sisterField;
		        extendedType.add(sisterField);
		        return true;
		    }
		    return false;
		}

		/**
		 * Called when any object is added to this root or its sub-namespaces.
		 * @param {ReflectionObject} object Object added
		 * @returns {undefined}
		 * @private
		 */
		Root.prototype._handleAdd = function _handleAdd(object) {
		    if (object instanceof Field) {

		        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)
		            if (!tryHandleExtension(this, object))
		                this.deferred.push(object);

		    } else if (object instanceof Enum) {

		        if (exposeRe.test(object.name))
		            object.parent[object.name] = object.values; // expose enum values as property of its parent

		    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {

		        if (object instanceof Type) // Try to handle any deferred extensions
		            for (var i = 0; i < this.deferred.length;)
		                if (tryHandleExtension(this, this.deferred[i]))
		                    this.deferred.splice(i, 1);
		                else
		                    ++i;
		        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace
		            this._handleAdd(object._nestedArray[j]);
		        if (exposeRe.test(object.name))
		            object.parent[object.name] = object; // expose namespace as property of its parent
		    }

		    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
		    // properties of namespaces just like static code does. This allows using a .d.ts generated for
		    // a static module with reflection-based solutions where the condition is met.
		};

		/**
		 * Called when any object is removed from this root or its sub-namespaces.
		 * @param {ReflectionObject} object Object removed
		 * @returns {undefined}
		 * @private
		 */
		Root.prototype._handleRemove = function _handleRemove(object) {
		    if (object instanceof Field) {

		        if (/* an extension field */ object.extend !== undefined) {
		            if (/* already handled */ object.extensionField) { // remove its sister field
		                object.extensionField.parent.remove(object.extensionField);
		                object.extensionField = null;
		            } else { // cancel the extension
		                var index = this.deferred.indexOf(object);
		                /* istanbul ignore else */
		                if (index > -1)
		                    this.deferred.splice(index, 1);
		            }
		        }

		    } else if (object instanceof Enum) {

		        if (exposeRe.test(object.name))
		            delete object.parent[object.name]; // unexpose enum values

		    } else if (object instanceof Namespace) {

		        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace
		            this._handleRemove(object._nestedArray[i]);

		        if (exposeRe.test(object.name))
		            delete object.parent[object.name]; // unexpose namespaces

		    }
		};

		// Sets up cyclic dependencies (called in index-light)
		Root._configure = function(Type_, parse_, common_) {
		    Type   = Type_;
		    parse  = parse_;
		    common = common_;
		};
		return root;
	}

	var hasRequiredUtil;

	function requireUtil () {
		if (hasRequiredUtil) return util.exports;
		hasRequiredUtil = 1;

		/**
		 * Various utility functions.
		 * @namespace
		 */
		var util$1 = util.exports = requireMinimal();

		var roots = requireRoots();

		var Type, // cyclic
		    Enum;

		util$1.codegen = requireCodegen();
		util$1.fetch   = requireFetch();
		util$1.path    = requirePath();

		/**
		 * Node's fs module if available.
		 * @type {Object.<string,*>}
		 */
		util$1.fs = util$1.inquire("fs");

		/**
		 * Converts an object's values to an array.
		 * @param {Object.<string,*>} object Object to convert
		 * @returns {Array.<*>} Converted array
		 */
		util$1.toArray = function toArray(object) {
		    if (object) {
		        var keys  = Object.keys(object),
		            array = new Array(keys.length),
		            index = 0;
		        while (index < keys.length)
		            array[index] = object[keys[index++]];
		        return array;
		    }
		    return [];
		};

		/**
		 * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
		 * @param {Array.<*>} array Array to convert
		 * @returns {Object.<string,*>} Converted object
		 */
		util$1.toObject = function toObject(array) {
		    var object = {},
		        index  = 0;
		    while (index < array.length) {
		        var key = array[index++],
		            val = array[index++];
		        if (val !== undefined)
		            object[key] = val;
		    }
		    return object;
		};

		var safePropBackslashRe = /\\/g,
		    safePropQuoteRe     = /"/g;

		/**
		 * Tests whether the specified name is a reserved word in JS.
		 * @param {string} name Name to test
		 * @returns {boolean} `true` if reserved, otherwise `false`
		 */
		util$1.isReserved = function isReserved(name) {
		    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
		};

		/**
		 * Returns a safe property accessor for the specified property name.
		 * @param {string} prop Property name
		 * @returns {string} Safe accessor
		 */
		util$1.safeProp = function safeProp(prop) {
		    if (!/^[$\w_]+$/.test(prop) || util$1.isReserved(prop))
		        return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
		    return "." + prop;
		};

		/**
		 * Converts the first character of a string to upper case.
		 * @param {string} str String to convert
		 * @returns {string} Converted string
		 */
		util$1.ucFirst = function ucFirst(str) {
		    return str.charAt(0).toUpperCase() + str.substring(1);
		};

		var camelCaseRe = /_([a-z])/g;

		/**
		 * Converts a string to camel case.
		 * @param {string} str String to convert
		 * @returns {string} Converted string
		 */
		util$1.camelCase = function camelCase(str) {
		    return str.substring(0, 1)
		         + str.substring(1)
		               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });
		};

		/**
		 * Compares reflected fields by id.
		 * @param {Field} a First field
		 * @param {Field} b Second field
		 * @returns {number} Comparison value
		 */
		util$1.compareFieldsById = function compareFieldsById(a, b) {
		    return a.id - b.id;
		};

		/**
		 * Decorator helper for types (TypeScript).
		 * @param {Constructor<T>} ctor Constructor function
		 * @param {string} [typeName] Type name, defaults to the constructor's name
		 * @returns {Type} Reflected type
		 * @template T extends Message<T>
		 * @property {Root} root Decorators root
		 */
		util$1.decorateType = function decorateType(ctor, typeName) {

		    /* istanbul ignore if */
		    if (ctor.$type) {
		        if (typeName && ctor.$type.name !== typeName) {
		            util$1.decorateRoot.remove(ctor.$type);
		            ctor.$type.name = typeName;
		            util$1.decorateRoot.add(ctor.$type);
		        }
		        return ctor.$type;
		    }

		    /* istanbul ignore next */
		    if (!Type)
		        Type = requireType();

		    var type = new Type(typeName || ctor.name);
		    util$1.decorateRoot.add(type);
		    type.ctor = ctor; // sets up .encode, .decode etc.
		    Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
		    Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
		    return type;
		};

		var decorateEnumIndex = 0;

		/**
		 * Decorator helper for enums (TypeScript).
		 * @param {Object} object Enum object
		 * @returns {Enum} Reflected enum
		 */
		util$1.decorateEnum = function decorateEnum(object) {

		    /* istanbul ignore if */
		    if (object.$type)
		        return object.$type;

		    /* istanbul ignore next */
		    if (!Enum)
		        Enum = require_enum();

		    var enm = new Enum("Enum" + decorateEnumIndex++, object);
		    util$1.decorateRoot.add(enm);
		    Object.defineProperty(object, "$type", { value: enm, enumerable: false });
		    return enm;
		};


		/**
		 * Sets the value of a property by property path. If a value already exists, it is turned to an array
		 * @param {Object.<string,*>} dst Destination object
		 * @param {string} path dot '.' delimited path of the property to set
		 * @param {Object} value the value to set
		 * @returns {Object.<string,*>} Destination object
		 */
		util$1.setProperty = function setProperty(dst, path, value) {
		    function setProp(dst, path, value) {
		        var part = path.shift();
		        if (part === "__proto__" || part === "prototype") {
		          return dst;
		        }
		        if (path.length > 0) {
		            dst[part] = setProp(dst[part] || {}, path, value);
		        } else {
		            var prevValue = dst[part];
		            if (prevValue)
		                value = [].concat(prevValue).concat(value);
		            dst[part] = value;
		        }
		        return dst;
		    }

		    if (typeof dst !== "object")
		        throw TypeError("dst must be an object");
		    if (!path)
		        throw TypeError("path must be specified");

		    path = path.split(".");
		    return setProp(dst, path, value);
		};

		/**
		 * Decorator root (TypeScript).
		 * @name util.decorateRoot
		 * @type {Root}
		 * @readonly
		 */
		Object.defineProperty(util$1, "decorateRoot", {
		    get: function() {
		        return roots["decorated"] || (roots["decorated"] = new (requireRoot())());
		    }
		});
		return util.exports;
	}

	var object;
	var hasRequiredObject;

	function requireObject () {
		if (hasRequiredObject) return object;
		hasRequiredObject = 1;
		object = ReflectionObject;

		ReflectionObject.className = "ReflectionObject";

		var util = requireUtil();

		var Root; // cyclic

		/**
		 * Constructs a new reflection object instance.
		 * @classdesc Base class of all reflection objects.
		 * @constructor
		 * @param {string} name Object name
		 * @param {Object.<string,*>} [options] Declared options
		 * @abstract
		 */
		function ReflectionObject(name, options) {

		    if (!util.isString(name))
		        throw TypeError("name must be a string");

		    if (options && !util.isObject(options))
		        throw TypeError("options must be an object");

		    /**
		     * Options.
		     * @type {Object.<string,*>|undefined}
		     */
		    this.options = options; // toJSON

		    /**
		     * Parsed Options.
		     * @type {Array.<Object.<string,*>>|undefined}
		     */
		    this.parsedOptions = null;

		    /**
		     * Unique name within its namespace.
		     * @type {string}
		     */
		    this.name = name;

		    /**
		     * Parent namespace.
		     * @type {Namespace|null}
		     */
		    this.parent = null;

		    /**
		     * Whether already resolved or not.
		     * @type {boolean}
		     */
		    this.resolved = false;

		    /**
		     * Comment text, if any.
		     * @type {string|null}
		     */
		    this.comment = null;

		    /**
		     * Defining file name.
		     * @type {string|null}
		     */
		    this.filename = null;
		}

		Object.defineProperties(ReflectionObject.prototype, {

		    /**
		     * Reference to the root namespace.
		     * @name ReflectionObject#root
		     * @type {Root}
		     * @readonly
		     */
		    root: {
		        get: function() {
		            var ptr = this;
		            while (ptr.parent !== null)
		                ptr = ptr.parent;
		            return ptr;
		        }
		    },

		    /**
		     * Full name including leading dot.
		     * @name ReflectionObject#fullName
		     * @type {string}
		     * @readonly
		     */
		    fullName: {
		        get: function() {
		            var path = [ this.name ],
		                ptr = this.parent;
		            while (ptr) {
		                path.unshift(ptr.name);
		                ptr = ptr.parent;
		            }
		            return path.join(".");
		        }
		    }
		});

		/**
		 * Converts this reflection object to its descriptor representation.
		 * @returns {Object.<string,*>} Descriptor
		 * @abstract
		 */
		ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {
		    throw Error(); // not implemented, shouldn't happen
		};

		/**
		 * Called when this object is added to a parent.
		 * @param {ReflectionObject} parent Parent added to
		 * @returns {undefined}
		 */
		ReflectionObject.prototype.onAdd = function onAdd(parent) {
		    if (this.parent && this.parent !== parent)
		        this.parent.remove(this);
		    this.parent = parent;
		    this.resolved = false;
		    var root = parent.root;
		    if (root instanceof Root)
		        root._handleAdd(this);
		};

		/**
		 * Called when this object is removed from a parent.
		 * @param {ReflectionObject} parent Parent removed from
		 * @returns {undefined}
		 */
		ReflectionObject.prototype.onRemove = function onRemove(parent) {
		    var root = parent.root;
		    if (root instanceof Root)
		        root._handleRemove(this);
		    this.parent = null;
		    this.resolved = false;
		};

		/**
		 * Resolves this objects type references.
		 * @returns {ReflectionObject} `this`
		 */
		ReflectionObject.prototype.resolve = function resolve() {
		    if (this.resolved)
		        return this;
		    if (this.root instanceof Root)
		        this.resolved = true; // only if part of a root
		    return this;
		};

		/**
		 * Gets an option value.
		 * @param {string} name Option name
		 * @returns {*} Option value or `undefined` if not set
		 */
		ReflectionObject.prototype.getOption = function getOption(name) {
		    if (this.options)
		        return this.options[name];
		    return undefined;
		};

		/**
		 * Sets an option.
		 * @param {string} name Option name
		 * @param {*} value Option value
		 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
		 * @returns {ReflectionObject} `this`
		 */
		ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
		    if (!ifNotSet || !this.options || this.options[name] === undefined)
		        (this.options || (this.options = {}))[name] = value;
		    return this;
		};

		/**
		 * Sets a parsed option.
		 * @param {string} name parsed Option name
		 * @param {*} value Option value
		 * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\empty, will add a new option with that value
		 * @returns {ReflectionObject} `this`
		 */
		ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
		    if (!this.parsedOptions) {
		        this.parsedOptions = [];
		    }
		    var parsedOptions = this.parsedOptions;
		    if (propName) {
		        // If setting a sub property of an option then try to merge it
		        // with an existing option
		        var opt = parsedOptions.find(function (opt) {
		            return Object.prototype.hasOwnProperty.call(opt, name);
		        });
		        if (opt) {
		            // If we found an existing option - just merge the property value
		            var newValue = opt[name];
		            util.setProperty(newValue, propName, value);
		        } else {
		            // otherwise, create a new option, set it's property and add it to the list
		            opt = {};
		            opt[name] = util.setProperty({}, propName, value);
		            parsedOptions.push(opt);
		        }
		    } else {
		        // Always create a new option when setting the value of the option itself
		        var newOpt = {};
		        newOpt[name] = value;
		        parsedOptions.push(newOpt);
		    }
		    return this;
		};

		/**
		 * Sets multiple options.
		 * @param {Object.<string,*>} options Options to set
		 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
		 * @returns {ReflectionObject} `this`
		 */
		ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
		    if (options)
		        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
		            this.setOption(keys[i], options[keys[i]], ifNotSet);
		    return this;
		};

		/**
		 * Converts this instance to its string representation.
		 * @returns {string} Class name[, space, full name]
		 */
		ReflectionObject.prototype.toString = function toString() {
		    var className = this.constructor.className,
		        fullName  = this.fullName;
		    if (fullName.length)
		        return className + " " + fullName;
		    return className;
		};

		// Sets up cyclic dependencies (called in index-light)
		ReflectionObject._configure = function(Root_) {
		    Root = Root_;
		};
		return object;
	}

	var _enum;
	var hasRequired_enum;

	function require_enum () {
		if (hasRequired_enum) return _enum;
		hasRequired_enum = 1;
		_enum = Enum;

		// extends ReflectionObject
		var ReflectionObject = requireObject();
		((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

		var Namespace = requireNamespace(),
		    util = requireUtil();

		/**
		 * Constructs a new enum instance.
		 * @classdesc Reflected enum.
		 * @extends ReflectionObject
		 * @constructor
		 * @param {string} name Unique name within its namespace
		 * @param {Object.<string,number>} [values] Enum values as an object, by name
		 * @param {Object.<string,*>} [options] Declared options
		 * @param {string} [comment] The comment for this enum
		 * @param {Object.<string,string>} [comments] The value comments for this enum
		 * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum
		 */
		function Enum(name, values, options, comment, comments, valuesOptions) {
		    ReflectionObject.call(this, name, options);

		    if (values && typeof values !== "object")
		        throw TypeError("values must be an object");

		    /**
		     * Enum values by id.
		     * @type {Object.<number,string>}
		     */
		    this.valuesById = {};

		    /**
		     * Enum values by name.
		     * @type {Object.<string,number>}
		     */
		    this.values = Object.create(this.valuesById); // toJSON, marker

		    /**
		     * Enum comment text.
		     * @type {string|null}
		     */
		    this.comment = comment;

		    /**
		     * Value comment texts, if any.
		     * @type {Object.<string,string>}
		     */
		    this.comments = comments || {};

		    /**
		     * Values options, if any
		     * @type {Object<string, Object<string, *>>|undefined}
		     */
		    this.valuesOptions = valuesOptions;

		    /**
		     * Reserved ranges, if any.
		     * @type {Array.<number[]|string>}
		     */
		    this.reserved = undefined; // toJSON

		    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
		    // compatible enum. This is used by pbts to write actual enum definitions that work for
		    // static and reflection code alike instead of emitting generic object definitions.

		    if (values)
		        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
		            if (typeof values[keys[i]] === "number") // use forward entries only
		                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];
		}

		/**
		 * Enum descriptor.
		 * @interface IEnum
		 * @property {Object.<string,number>} values Enum values
		 * @property {Object.<string,*>} [options] Enum options
		 */

		/**
		 * Constructs an enum from an enum descriptor.
		 * @param {string} name Enum name
		 * @param {IEnum} json Enum descriptor
		 * @returns {Enum} Created enum
		 * @throws {TypeError} If arguments are invalid
		 */
		Enum.fromJSON = function fromJSON(name, json) {
		    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
		    enm.reserved = json.reserved;
		    return enm;
		};

		/**
		 * Converts this enum to an enum descriptor.
		 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
		 * @returns {IEnum} Enum descriptor
		 */
		Enum.prototype.toJSON = function toJSON(toJSONOptions) {
		    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
		    return util.toObject([
		        "options"       , this.options,
		        "valuesOptions" , this.valuesOptions,
		        "values"        , this.values,
		        "reserved"      , this.reserved && this.reserved.length ? this.reserved : undefined,
		        "comment"       , keepComments ? this.comment : undefined,
		        "comments"      , keepComments ? this.comments : undefined
		    ]);
		};

		/**
		 * Adds a value to this enum.
		 * @param {string} name Value name
		 * @param {number} id Value id
		 * @param {string} [comment] Comment, if any
		 * @param {Object.<string, *>|undefined} [options] Options, if any
		 * @returns {Enum} `this`
		 * @throws {TypeError} If arguments are invalid
		 * @throws {Error} If there is already a value with this name or id
		 */
		Enum.prototype.add = function add(name, id, comment, options) {
		    // utilized by the parser but not by .fromJSON

		    if (!util.isString(name))
		        throw TypeError("name must be a string");

		    if (!util.isInteger(id))
		        throw TypeError("id must be an integer");

		    if (this.values[name] !== undefined)
		        throw Error("duplicate name '" + name + "' in " + this);

		    if (this.isReservedId(id))
		        throw Error("id " + id + " is reserved in " + this);

		    if (this.isReservedName(name))
		        throw Error("name '" + name + "' is reserved in " + this);

		    if (this.valuesById[id] !== undefined) {
		        if (!(this.options && this.options.allow_alias))
		            throw Error("duplicate id " + id + " in " + this);
		        this.values[name] = id;
		    } else
		        this.valuesById[this.values[name] = id] = name;

		    if (options) {
		        if (this.valuesOptions === undefined)
		            this.valuesOptions = {};
		        this.valuesOptions[name] = options || null;
		    }

		    this.comments[name] = comment || null;
		    return this;
		};

		/**
		 * Removes a value from this enum
		 * @param {string} name Value name
		 * @returns {Enum} `this`
		 * @throws {TypeError} If arguments are invalid
		 * @throws {Error} If `name` is not a name of this enum
		 */
		Enum.prototype.remove = function remove(name) {

		    if (!util.isString(name))
		        throw TypeError("name must be a string");

		    var val = this.values[name];
		    if (val == null)
		        throw Error("name '" + name + "' does not exist in " + this);

		    delete this.valuesById[val];
		    delete this.values[name];
		    delete this.comments[name];
		    if (this.valuesOptions)
		        delete this.valuesOptions[name];

		    return this;
		};

		/**
		 * Tests if the specified id is reserved.
		 * @param {number} id Id to test
		 * @returns {boolean} `true` if reserved, otherwise `false`
		 */
		Enum.prototype.isReservedId = function isReservedId(id) {
		    return Namespace.isReservedId(this.reserved, id);
		};

		/**
		 * Tests if the specified name is reserved.
		 * @param {string} name Name to test
		 * @returns {boolean} `true` if reserved, otherwise `false`
		 */
		Enum.prototype.isReservedName = function isReservedName(name) {
		    return Namespace.isReservedName(this.reserved, name);
		};
		return _enum;
	}

	var encoder_1;
	var hasRequiredEncoder;

	function requireEncoder () {
		if (hasRequiredEncoder) return encoder_1;
		hasRequiredEncoder = 1;
		encoder_1 = encoder;

		var Enum     = require_enum(),
		    types    = requireTypes(),
		    util     = requireUtil();

		/**
		 * Generates a partial message type encoder.
		 * @param {Codegen} gen Codegen instance
		 * @param {Field} field Reflected field
		 * @param {number} fieldIndex Field index
		 * @param {string} ref Variable reference
		 * @returns {Codegen} Codegen instance
		 * @ignore
		 */
		function genTypePartial(gen, field, fieldIndex, ref) {
		    return field.resolvedType.group
		        ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)
		        : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
		}

		/**
		 * Generates an encoder specific to the specified message type.
		 * @param {Type} mtype Message type
		 * @returns {Codegen} Codegen instance
		 */
		function encoder(mtype) {
		    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
		    var gen = util.codegen(["m", "w"], mtype.name + "$encode")
		    ("if(!w)")
		        ("w=Writer.create()");

		    var i, ref;

		    // "when a message is serialized its known fields should be written sequentially by field number"
		    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);

		    for (var i = 0; i < fields.length; ++i) {
		        var field    = fields[i].resolve(),
		            index    = mtype._fieldsArray.indexOf(field),
		            type     = field.resolvedType instanceof Enum ? "int32" : field.type,
		            wireType = types.basic[type];
		            ref      = "m" + util.safeProp(field.name);

		        // Map fields
		        if (field.map) {
		            gen
		    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name) // !== undefined && !== null
		        ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)
		            ("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
		            if (wireType === undefined) gen
		            ("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
		            else gen
		            (".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
		            gen
		        ("}")
		    ("}");

		            // Repeated fields
		        } else if (field.repeated) { gen
		    ("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null

		            // Packed repeated
		            if (field.packed && types.packed[type] !== undefined) { gen

		        ("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)
		        ("for(var i=0;i<%s.length;++i)", ref)
		            ("w.%s(%s[i])", type, ref)
		        ("w.ldelim()");

		            // Non-packed
		            } else { gen

		        ("for(var i=0;i<%s.length;++i)", ref);
		                if (wireType === undefined)
		            genTypePartial(gen, field, index, ref + "[i]");
		                else gen
		            ("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);

		            } gen
		    ("}");

		        // Non-repeated
		        } else {
		            if (field.optional) gen
		    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name); // !== undefined && !== null

		            if (wireType === undefined)
		        genTypePartial(gen, field, index, ref);
		            else gen
		        ("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);

		        }
		    }

		    return gen
		    ("return w");
		    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
		}
		return encoder_1;
	}

	var hasRequiredIndexLight;

	function requireIndexLight () {
		if (hasRequiredIndexLight) return indexLight.exports;
		hasRequiredIndexLight = 1;
		var protobuf = indexLight.exports = requireIndexMinimal();

		protobuf.build = "light";

		/**
		 * A node-style callback as used by {@link load} and {@link Root#load}.
		 * @typedef LoadCallback
		 * @type {function}
		 * @param {Error|null} error Error, if any, otherwise `null`
		 * @param {Root} [root] Root, if there hasn't been an error
		 * @returns {undefined}
		 */

		/**
		 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
		 * @param {string|string[]} filename One or multiple files to load
		 * @param {Root} root Root namespace, defaults to create a new one if omitted.
		 * @param {LoadCallback} callback Callback function
		 * @returns {undefined}
		 * @see {@link Root#load}
		 */
		function load(filename, root, callback) {
		    if (typeof root === "function") {
		        callback = root;
		        root = new protobuf.Root();
		    } else if (!root)
		        root = new protobuf.Root();
		    return root.load(filename, callback);
		}

		/**
		 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
		 * @name load
		 * @function
		 * @param {string|string[]} filename One or multiple files to load
		 * @param {LoadCallback} callback Callback function
		 * @returns {undefined}
		 * @see {@link Root#load}
		 * @variation 2
		 */
		// function load(filename:string, callback:LoadCallback):undefined

		/**
		 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
		 * @name load
		 * @function
		 * @param {string|string[]} filename One or multiple files to load
		 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
		 * @returns {Promise<Root>} Promise
		 * @see {@link Root#load}
		 * @variation 3
		 */
		// function load(filename:string, [root:Root]):Promise<Root>

		protobuf.load = load;

		/**
		 * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
		 * @param {string|string[]} filename One or multiple files to load
		 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
		 * @returns {Root} Root namespace
		 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
		 * @see {@link Root#loadSync}
		 */
		function loadSync(filename, root) {
		    if (!root)
		        root = new protobuf.Root();
		    return root.loadSync(filename);
		}

		protobuf.loadSync = loadSync;

		// Serialization
		protobuf.encoder          = requireEncoder();
		protobuf.decoder          = requireDecoder();
		protobuf.verifier         = requireVerifier();
		protobuf.converter        = requireConverter();

		// Reflection
		protobuf.ReflectionObject = requireObject();
		protobuf.Namespace        = requireNamespace();
		protobuf.Root             = requireRoot();
		protobuf.Enum             = require_enum();
		protobuf.Type             = requireType();
		protobuf.Field            = requireField();
		protobuf.OneOf            = requireOneof();
		protobuf.MapField         = requireMapfield();
		protobuf.Service          = requireService();
		protobuf.Method           = requireMethod();

		// Runtime
		protobuf.Message          = requireMessage();
		protobuf.wrappers         = requireWrappers();

		// Utility
		protobuf.types            = requireTypes();
		protobuf.util             = requireUtil();

		// Set up possibly cyclic reflection dependencies
		protobuf.ReflectionObject._configure(protobuf.Root);
		protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
		protobuf.Root._configure(protobuf.Type);
		protobuf.Field._configure(protobuf.Type);
		return indexLight.exports;
	}

	var tokenize_1;
	var hasRequiredTokenize;

	function requireTokenize () {
		if (hasRequiredTokenize) return tokenize_1;
		hasRequiredTokenize = 1;
		tokenize_1 = tokenize;

		var delimRe        = /[\s{}=;:[\],'"()<>]/g,
		    stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
		    stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;

		var setCommentRe = /^ *[*/]+ */,
		    setCommentAltRe = /^\s*\*?\/*/,
		    setCommentSplitRe = /\n/g,
		    whitespaceRe = /\s/,
		    unescapeRe = /\\(.?)/g;

		var unescapeMap = {
		    "0": "\0",
		    "r": "\r",
		    "n": "\n",
		    "t": "\t"
		};

		/**
		 * Unescapes a string.
		 * @param {string} str String to unescape
		 * @returns {string} Unescaped string
		 * @property {Object.<string,string>} map Special characters map
		 * @memberof tokenize
		 */
		function unescape(str) {
		    return str.replace(unescapeRe, function($0, $1) {
		        switch ($1) {
		            case "\\":
		            case "":
		                return $1;
		            default:
		                return unescapeMap[$1] || "";
		        }
		    });
		}

		tokenize.unescape = unescape;

		/**
		 * Gets the next token and advances.
		 * @typedef TokenizerHandleNext
		 * @type {function}
		 * @returns {string|null} Next token or `null` on eof
		 */

		/**
		 * Peeks for the next token.
		 * @typedef TokenizerHandlePeek
		 * @type {function}
		 * @returns {string|null} Next token or `null` on eof
		 */

		/**
		 * Pushes a token back to the stack.
		 * @typedef TokenizerHandlePush
		 * @type {function}
		 * @param {string} token Token
		 * @returns {undefined}
		 */

		/**
		 * Skips the next token.
		 * @typedef TokenizerHandleSkip
		 * @type {function}
		 * @param {string} expected Expected token
		 * @param {boolean} [optional=false] If optional
		 * @returns {boolean} Whether the token matched
		 * @throws {Error} If the token didn't match and is not optional
		 */

		/**
		 * Gets the comment on the previous line or, alternatively, the line comment on the specified line.
		 * @typedef TokenizerHandleCmnt
		 * @type {function}
		 * @param {number} [line] Line number
		 * @returns {string|null} Comment text or `null` if none
		 */

		/**
		 * Handle object returned from {@link tokenize}.
		 * @interface ITokenizerHandle
		 * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)
		 * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)
		 * @property {TokenizerHandlePush} push Pushes a token back to the stack
		 * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws
		 * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any
		 * @property {number} line Current line number
		 */

		/**
		 * Tokenizes the given .proto source and returns an object with useful utility functions.
		 * @param {string} source Source contents
		 * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.
		 * @returns {ITokenizerHandle} Tokenizer handle
		 */
		function tokenize(source, alternateCommentMode) {
		    /* eslint-disable callback-return */
		    source = source.toString();

		    var offset = 0,
		        length = source.length,
		        line = 1,
		        lastCommentLine = 0,
		        comments = {};

		    var stack = [];

		    var stringDelim = null;

		    /* istanbul ignore next */
		    /**
		     * Creates an error for illegal syntax.
		     * @param {string} subject Subject
		     * @returns {Error} Error created
		     * @inner
		     */
		    function illegal(subject) {
		        return Error("illegal " + subject + " (line " + line + ")");
		    }

		    /**
		     * Reads a string till its end.
		     * @returns {string} String read
		     * @inner
		     */
		    function readString() {
		        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
		        re.lastIndex = offset - 1;
		        var match = re.exec(source);
		        if (!match)
		            throw illegal("string");
		        offset = re.lastIndex;
		        push(stringDelim);
		        stringDelim = null;
		        return unescape(match[1]);
		    }

		    /**
		     * Gets the character at `pos` within the source.
		     * @param {number} pos Position
		     * @returns {string} Character
		     * @inner
		     */
		    function charAt(pos) {
		        return source.charAt(pos);
		    }

		    /**
		     * Sets the current comment text.
		     * @param {number} start Start offset
		     * @param {number} end End offset
		     * @param {boolean} isLeading set if a leading comment
		     * @returns {undefined}
		     * @inner
		     */
		    function setComment(start, end, isLeading) {
		        var comment = {
		            type: source.charAt(start++),
		            lineEmpty: false,
		            leading: isLeading,
		        };
		        var lookback;
		        if (alternateCommentMode) {
		            lookback = 2;  // alternate comment parsing: "//" or "/*"
		        } else {
		            lookback = 3;  // "///" or "/**"
		        }
		        var commentOffset = start - lookback,
		            c;
		        do {
		            if (--commentOffset < 0 ||
		                    (c = source.charAt(commentOffset)) === "\n") {
		                comment.lineEmpty = true;
		                break;
		            }
		        } while (c === " " || c === "\t");
		        var lines = source
		            .substring(start, end)
		            .split(setCommentSplitRe);
		        for (var i = 0; i < lines.length; ++i)
		            lines[i] = lines[i]
		                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "")
		                .trim();
		        comment.text = lines
		            .join("\n")
		            .trim();

		        comments[line] = comment;
		        lastCommentLine = line;
		    }

		    function isDoubleSlashCommentLine(startOffset) {
		        var endOffset = findEndOfLine(startOffset);

		        // see if remaining line matches comment pattern
		        var lineText = source.substring(startOffset, endOffset);
		        var isComment = /^\s*\/\//.test(lineText);
		        return isComment;
		    }

		    function findEndOfLine(cursor) {
		        // find end of cursor's line
		        var endOffset = cursor;
		        while (endOffset < length && charAt(endOffset) !== "\n") {
		            endOffset++;
		        }
		        return endOffset;
		    }

		    /**
		     * Obtains the next token.
		     * @returns {string|null} Next token or `null` on eof
		     * @inner
		     */
		    function next() {
		        if (stack.length > 0)
		            return stack.shift();
		        if (stringDelim)
		            return readString();
		        var repeat,
		            prev,
		            curr,
		            start,
		            isDoc,
		            isLeadingComment = offset === 0;
		        do {
		            if (offset === length)
		                return null;
		            repeat = false;
		            while (whitespaceRe.test(curr = charAt(offset))) {
		                if (curr === "\n") {
		                    isLeadingComment = true;
		                    ++line;
		                }
		                if (++offset === length)
		                    return null;
		            }

		            if (charAt(offset) === "/") {
		                if (++offset === length) {
		                    throw illegal("comment");
		                }
		                if (charAt(offset) === "/") { // Line
		                    if (!alternateCommentMode) {
		                        // check for triple-slash comment
		                        isDoc = charAt(start = offset + 1) === "/";

		                        while (charAt(++offset) !== "\n") {
		                            if (offset === length) {
		                                return null;
		                            }
		                        }
		                        ++offset;
		                        if (isDoc) {
		                            setComment(start, offset - 1, isLeadingComment);
		                            // Trailing comment cannot not be multi-line,
		                            // so leading comment state should be reset to handle potential next comments
		                            isLeadingComment = true;
		                        }
		                        ++line;
		                        repeat = true;
		                    } else {
		                        // check for double-slash comments, consolidating consecutive lines
		                        start = offset;
		                        isDoc = false;
		                        if (isDoubleSlashCommentLine(offset - 1)) {
		                            isDoc = true;
		                            do {
		                                offset = findEndOfLine(offset);
		                                if (offset === length) {
		                                    break;
		                                }
		                                offset++;
		                                if (!isLeadingComment) {
		                                    // Trailing comment cannot not be multi-line
		                                    break;
		                                }
		                            } while (isDoubleSlashCommentLine(offset));
		                        } else {
		                            offset = Math.min(length, findEndOfLine(offset) + 1);
		                        }
		                        if (isDoc) {
		                            setComment(start, offset, isLeadingComment);
		                            isLeadingComment = true;
		                        }
		                        line++;
		                        repeat = true;
		                    }
		                } else if ((curr = charAt(offset)) === "*") { /* Block */
		                    // check for /** (regular comment mode) or /* (alternate comment mode)
		                    start = offset + 1;
		                    isDoc = alternateCommentMode || charAt(start) === "*";
		                    do {
		                        if (curr === "\n") {
		                            ++line;
		                        }
		                        if (++offset === length) {
		                            throw illegal("comment");
		                        }
		                        prev = curr;
		                        curr = charAt(offset);
		                    } while (prev !== "*" || curr !== "/");
		                    ++offset;
		                    if (isDoc) {
		                        setComment(start, offset - 2, isLeadingComment);
		                        isLeadingComment = true;
		                    }
		                    repeat = true;
		                } else {
		                    return "/";
		                }
		            }
		        } while (repeat);

		        // offset !== length if we got here

		        var end = offset;
		        delimRe.lastIndex = 0;
		        var delim = delimRe.test(charAt(end++));
		        if (!delim)
		            while (end < length && !delimRe.test(charAt(end)))
		                ++end;
		        var token = source.substring(offset, offset = end);
		        if (token === "\"" || token === "'")
		            stringDelim = token;
		        return token;
		    }

		    /**
		     * Pushes a token back to the stack.
		     * @param {string} token Token
		     * @returns {undefined}
		     * @inner
		     */
		    function push(token) {
		        stack.push(token);
		    }

		    /**
		     * Peeks for the next token.
		     * @returns {string|null} Token or `null` on eof
		     * @inner
		     */
		    function peek() {
		        if (!stack.length) {
		            var token = next();
		            if (token === null)
		                return null;
		            push(token);
		        }
		        return stack[0];
		    }

		    /**
		     * Skips a token.
		     * @param {string} expected Expected token
		     * @param {boolean} [optional=false] Whether the token is optional
		     * @returns {boolean} `true` when skipped, `false` if not
		     * @throws {Error} When a required token is not present
		     * @inner
		     */
		    function skip(expected, optional) {
		        var actual = peek(),
		            equals = actual === expected;
		        if (equals) {
		            next();
		            return true;
		        }
		        if (!optional)
		            throw illegal("token '" + actual + "', '" + expected + "' expected");
		        return false;
		    }

		    /**
		     * Gets a comment.
		     * @param {number} [trailingLine] Line number if looking for a trailing comment
		     * @returns {string|null} Comment text
		     * @inner
		     */
		    function cmnt(trailingLine) {
		        var ret = null;
		        var comment;
		        if (trailingLine === undefined) {
		            comment = comments[line - 1];
		            delete comments[line - 1];
		            if (comment && (alternateCommentMode || comment.type === "*" || comment.lineEmpty)) {
		                ret = comment.leading ? comment.text : null;
		            }
		        } else {
		            /* istanbul ignore else */
		            if (lastCommentLine < trailingLine) {
		                peek();
		            }
		            comment = comments[trailingLine];
		            delete comments[trailingLine];
		            if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === "/")) {
		                ret = comment.leading ? null : comment.text;
		            }
		        }
		        return ret;
		    }

		    return Object.defineProperty({
		        next: next,
		        peek: peek,
		        push: push,
		        skip: skip,
		        cmnt: cmnt
		    }, "line", {
		        get: function() { return line; }
		    });
		    /* eslint-enable callback-return */
		}
		return tokenize_1;
	}

	var parse_1;
	var hasRequiredParse;

	function requireParse () {
		if (hasRequiredParse) return parse_1;
		hasRequiredParse = 1;
		parse_1 = parse;

		parse.filename = null;
		parse.defaults = { keepCase: false };

		var tokenize  = requireTokenize(),
		    Root      = requireRoot(),
		    Type      = requireType(),
		    Field     = requireField(),
		    MapField  = requireMapfield(),
		    OneOf     = requireOneof(),
		    Enum      = require_enum(),
		    Service   = requireService(),
		    Method    = requireMethod(),
		    types     = requireTypes(),
		    util      = requireUtil();

		var base10Re    = /^[1-9][0-9]*$/,
		    base10NegRe = /^-?[1-9][0-9]*$/,
		    base16Re    = /^0[x][0-9a-fA-F]+$/,
		    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,
		    base8Re     = /^0[0-7]+$/,
		    base8NegRe  = /^-?0[0-7]+$/,
		    numberRe    = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,
		    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,
		    typeRefRe   = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,
		    fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;

		/**
		 * Result object returned from {@link parse}.
		 * @interface IParserResult
		 * @property {string|undefined} package Package name, if declared
		 * @property {string[]|undefined} imports Imports, if any
		 * @property {string[]|undefined} weakImports Weak imports, if any
		 * @property {string|undefined} syntax Syntax, if specified (either `"proto2"` or `"proto3"`)
		 * @property {Root} root Populated root instance
		 */

		/**
		 * Options modifying the behavior of {@link parse}.
		 * @interface IParseOptions
		 * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case
		 * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.
		 * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.
		 */

		/**
		 * Options modifying the behavior of JSON serialization.
		 * @interface IToJSONOptions
		 * @property {boolean} [keepComments=false] Serializes comments.
		 */

		/**
		 * Parses the given .proto source and returns an object with the parsed contents.
		 * @param {string} source Source contents
		 * @param {Root} root Root to populate
		 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
		 * @returns {IParserResult} Parser result
		 * @property {string} filename=null Currently processing file name for error reporting, if known
		 * @property {IParseOptions} defaults Default {@link IParseOptions}
		 */
		function parse(source, root, options) {
		    /* eslint-disable callback-return */
		    if (!(root instanceof Root)) {
		        options = root;
		        root = new Root();
		    }
		    if (!options)
		        options = parse.defaults;

		    var preferTrailingComment = options.preferTrailingComment || false;
		    var tn = tokenize(source, options.alternateCommentMode || false),
		        next = tn.next,
		        push = tn.push,
		        peek = tn.peek,
		        skip = tn.skip,
		        cmnt = tn.cmnt;

		    var head = true,
		        pkg,
		        imports,
		        weakImports,
		        syntax,
		        isProto3 = false;

		    var ptr = root;

		    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;

		    /* istanbul ignore next */
		    function illegal(token, name, insideTryCatch) {
		        var filename = parse.filename;
		        if (!insideTryCatch)
		            parse.filename = null;
		        return Error("illegal " + (name || "token") + " '" + token + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
		    }

		    function readString() {
		        var values = [],
		            token;
		        do {
		            /* istanbul ignore if */
		            if ((token = next()) !== "\"" && token !== "'")
		                throw illegal(token);

		            values.push(next());
		            skip(token);
		            token = peek();
		        } while (token === "\"" || token === "'");
		        return values.join("");
		    }

		    function readValue(acceptTypeRef) {
		        var token = next();
		        switch (token) {
		            case "'":
		            case "\"":
		                push(token);
		                return readString();
		            case "true": case "TRUE":
		                return true;
		            case "false": case "FALSE":
		                return false;
		        }
		        try {
		            return parseNumber(token, /* insideTryCatch */ true);
		        } catch (e) {

		            /* istanbul ignore else */
		            if (typeRefRe.test(token))
		                return token;

		            /* istanbul ignore next */
		            throw illegal(token, "value");
		        }
		    }

		    function readRanges(target, acceptStrings) {
		        var token, start;
		        do {
		            if (acceptStrings && ((token = peek()) === "\"" || token === "'"))
		                target.push(readString());
		            else
		                target.push([ start = parseId(next()), skip("to", true) ? parseId(next()) : start ]);
		        } while (skip(",", true));
		        var dummy = {options: undefined};
		        dummy.setOption = function(name, value) {
		          if (this.options === undefined) this.options = {};
		          this.options[name] = value;
		        };
		        ifBlock(
		            dummy,
		            function parseRange_block(token) {
		              /* istanbul ignore else */
		              if (token === "option") {
		                parseOption(dummy, token);  // skip
		                skip(";");
		              } else
		                throw illegal(token);
		            },
		            function parseRange_line() {
		              parseInlineOptions(dummy);  // skip
		            });
		    }

		    function parseNumber(token, insideTryCatch) {
		        var sign = 1;
		        if (token.charAt(0) === "-") {
		            sign = -1;
		            token = token.substring(1);
		        }
		        switch (token) {
		            case "inf": case "INF": case "Inf":
		                return sign * Infinity;
		            case "nan": case "NAN": case "Nan": case "NaN":
		                return NaN;
		            case "0":
		                return 0;
		        }
		        if (base10Re.test(token))
		            return sign * parseInt(token, 10);
		        if (base16Re.test(token))
		            return sign * parseInt(token, 16);
		        if (base8Re.test(token))
		            return sign * parseInt(token, 8);

		        /* istanbul ignore else */
		        if (numberRe.test(token))
		            return sign * parseFloat(token);

		        /* istanbul ignore next */
		        throw illegal(token, "number", insideTryCatch);
		    }

		    function parseId(token, acceptNegative) {
		        switch (token) {
		            case "max": case "MAX": case "Max":
		                return 536870911;
		            case "0":
		                return 0;
		        }

		        /* istanbul ignore if */
		        if (!acceptNegative && token.charAt(0) === "-")
		            throw illegal(token, "id");

		        if (base10NegRe.test(token))
		            return parseInt(token, 10);
		        if (base16NegRe.test(token))
		            return parseInt(token, 16);

		        /* istanbul ignore else */
		        if (base8NegRe.test(token))
		            return parseInt(token, 8);

		        /* istanbul ignore next */
		        throw illegal(token, "id");
		    }

		    function parsePackage() {

		        /* istanbul ignore if */
		        if (pkg !== undefined)
		            throw illegal("package");

		        pkg = next();

		        /* istanbul ignore if */
		        if (!typeRefRe.test(pkg))
		            throw illegal(pkg, "name");

		        ptr = ptr.define(pkg);
		        skip(";");
		    }

		    function parseImport() {
		        var token = peek();
		        var whichImports;
		        switch (token) {
		            case "weak":
		                whichImports = weakImports || (weakImports = []);
		                next();
		                break;
		            case "public":
		                next();
		                // eslint-disable-next-line no-fallthrough
		            default:
		                whichImports = imports || (imports = []);
		                break;
		        }
		        token = readString();
		        skip(";");
		        whichImports.push(token);
		    }

		    function parseSyntax() {
		        skip("=");
		        syntax = readString();
		        isProto3 = syntax === "proto3";

		        /* istanbul ignore if */
		        if (!isProto3 && syntax !== "proto2")
		            throw illegal(syntax, "syntax");

		        // Syntax is needed to understand the meaning of the optional field rule
		        // Otherwise the meaning is ambiguous between proto2 and proto3
		        root.setOption("syntax", syntax);

		        skip(";");
		    }

		    function parseCommon(parent, token) {
		        switch (token) {

		            case "option":
		                parseOption(parent, token);
		                skip(";");
		                return true;

		            case "message":
		                parseType(parent, token);
		                return true;

		            case "enum":
		                parseEnum(parent, token);
		                return true;

		            case "service":
		                parseService(parent, token);
		                return true;

		            case "extend":
		                parseExtension(parent, token);
		                return true;
		        }
		        return false;
		    }

		    function ifBlock(obj, fnIf, fnElse) {
		        var trailingLine = tn.line;
		        if (obj) {
		            if(typeof obj.comment !== "string") {
		              obj.comment = cmnt(); // try block-type comment
		            }
		            obj.filename = parse.filename;
		        }
		        if (skip("{", true)) {
		            var token;
		            while ((token = next()) !== "}")
		                fnIf(token);
		            skip(";", true);
		        } else {
		            if (fnElse)
		                fnElse();
		            skip(";");
		            if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
		                obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment
		        }
		    }

		    function parseType(parent, token) {

		        /* istanbul ignore if */
		        if (!nameRe.test(token = next()))
		            throw illegal(token, "type name");

		        var type = new Type(token);
		        ifBlock(type, function parseType_block(token) {
		            if (parseCommon(type, token))
		                return;

		            switch (token) {

		                case "map":
		                    parseMapField(type);
		                    break;

		                case "required":
		                case "repeated":
		                    parseField(type, token);
		                    break;

		                case "optional":
		                    /* istanbul ignore if */
		                    if (isProto3) {
		                        parseField(type, "proto3_optional");
		                    } else {
		                        parseField(type, "optional");
		                    }
		                    break;

		                case "oneof":
		                    parseOneOf(type, token);
		                    break;

		                case "extensions":
		                    readRanges(type.extensions || (type.extensions = []));
		                    break;

		                case "reserved":
		                    readRanges(type.reserved || (type.reserved = []), true);
		                    break;

		                default:
		                    /* istanbul ignore if */
		                    if (!isProto3 || !typeRefRe.test(token))
		                        throw illegal(token);

		                    push(token);
		                    parseField(type, "optional");
		                    break;
		            }
		        });
		        parent.add(type);
		    }

		    function parseField(parent, rule, extend) {
		        var type = next();
		        if (type === "group") {
		            parseGroup(parent, rule);
		            return;
		        }
		        // Type names can consume multiple tokens, in multiple variants:
		        //    package.subpackage   field       tokens: "package.subpackage" [TYPE NAME ENDS HERE] "field"
		        //    package . subpackage field       tokens: "package" "." "subpackage" [TYPE NAME ENDS HERE] "field"
		        //    package.  subpackage field       tokens: "package." "subpackage" [TYPE NAME ENDS HERE] "field"
		        //    package  .subpackage field       tokens: "package" ".subpackage" [TYPE NAME ENDS HERE] "field"
		        // Keep reading tokens until we get a type name with no period at the end,
		        // and the next token does not start with a period.
		        while (type.endsWith(".") || peek().startsWith(".")) {
		            type += next();
		        }

		        /* istanbul ignore if */
		        if (!typeRefRe.test(type))
		            throw illegal(type, "type");

		        var name = next();

		        /* istanbul ignore if */
		        if (!nameRe.test(name))
		            throw illegal(name, "name");

		        name = applyCase(name);
		        skip("=");

		        var field = new Field(name, parseId(next()), type, rule, extend);
		        ifBlock(field, function parseField_block(token) {

		            /* istanbul ignore else */
		            if (token === "option") {
		                parseOption(field, token);
		                skip(";");
		            } else
		                throw illegal(token);

		        }, function parseField_line() {
		            parseInlineOptions(field);
		        });

		        if (rule === "proto3_optional") {
		            // for proto3 optional fields, we create a single-member Oneof to mimic "optional" behavior
		            var oneof = new OneOf("_" + name);
		            field.setOption("proto3_optional", true);
		            oneof.add(field);
		            parent.add(oneof);
		        } else {
		            parent.add(field);
		        }

		        // JSON defaults to packed=true if not set so we have to set packed=false explicity when
		        // parsing proto2 descriptors without the option, where applicable. This must be done for
		        // all known packable types and anything that could be an enum (= is not a basic type).
		        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))
		            field.setOption("packed", false, /* ifNotSet */ true);
		    }

		    function parseGroup(parent, rule) {
		        var name = next();

		        /* istanbul ignore if */
		        if (!nameRe.test(name))
		            throw illegal(name, "name");

		        var fieldName = util.lcFirst(name);
		        if (name === fieldName)
		            name = util.ucFirst(name);
		        skip("=");
		        var id = parseId(next());
		        var type = new Type(name);
		        type.group = true;
		        var field = new Field(fieldName, id, name, rule);
		        field.filename = parse.filename;
		        ifBlock(type, function parseGroup_block(token) {
		            switch (token) {

		                case "option":
		                    parseOption(type, token);
		                    skip(";");
		                    break;

		                case "required":
		                case "repeated":
		                    parseField(type, token);
		                    break;

		                case "optional":
		                    /* istanbul ignore if */
		                    if (isProto3) {
		                        parseField(type, "proto3_optional");
		                    } else {
		                        parseField(type, "optional");
		                    }
		                    break;

		                case "message":
		                    parseType(type, token);
		                    break;

		                case "enum":
		                    parseEnum(type, token);
		                    break;

		                /* istanbul ignore next */
		                default:
		                    throw illegal(token); // there are no groups with proto3 semantics
		            }
		        });
		        parent.add(type)
		              .add(field);
		    }

		    function parseMapField(parent) {
		        skip("<");
		        var keyType = next();

		        /* istanbul ignore if */
		        if (types.mapKey[keyType] === undefined)
		            throw illegal(keyType, "type");

		        skip(",");
		        var valueType = next();

		        /* istanbul ignore if */
		        if (!typeRefRe.test(valueType))
		            throw illegal(valueType, "type");

		        skip(">");
		        var name = next();

		        /* istanbul ignore if */
		        if (!nameRe.test(name))
		            throw illegal(name, "name");

		        skip("=");
		        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
		        ifBlock(field, function parseMapField_block(token) {

		            /* istanbul ignore else */
		            if (token === "option") {
		                parseOption(field, token);
		                skip(";");
		            } else
		                throw illegal(token);

		        }, function parseMapField_line() {
		            parseInlineOptions(field);
		        });
		        parent.add(field);
		    }

		    function parseOneOf(parent, token) {

		        /* istanbul ignore if */
		        if (!nameRe.test(token = next()))
		            throw illegal(token, "name");

		        var oneof = new OneOf(applyCase(token));
		        ifBlock(oneof, function parseOneOf_block(token) {
		            if (token === "option") {
		                parseOption(oneof, token);
		                skip(";");
		            } else {
		                push(token);
		                parseField(oneof, "optional");
		            }
		        });
		        parent.add(oneof);
		    }

		    function parseEnum(parent, token) {

		        /* istanbul ignore if */
		        if (!nameRe.test(token = next()))
		            throw illegal(token, "name");

		        var enm = new Enum(token);
		        ifBlock(enm, function parseEnum_block(token) {
		          switch(token) {
		            case "option":
		              parseOption(enm, token);
		              skip(";");
		              break;

		            case "reserved":
		              readRanges(enm.reserved || (enm.reserved = []), true);
		              break;

		            default:
		              parseEnumValue(enm, token);
		          }
		        });
		        parent.add(enm);
		    }

		    function parseEnumValue(parent, token) {

		        /* istanbul ignore if */
		        if (!nameRe.test(token))
		            throw illegal(token, "name");

		        skip("=");
		        var value = parseId(next(), true),
		            dummy = {
		                options: undefined
		            };
		        dummy.setOption = function(name, value) {
		            if (this.options === undefined)
		                this.options = {};
		            this.options[name] = value;
		        };
		        ifBlock(dummy, function parseEnumValue_block(token) {

		            /* istanbul ignore else */
		            if (token === "option") {
		                parseOption(dummy, token); // skip
		                skip(";");
		            } else
		                throw illegal(token);

		        }, function parseEnumValue_line() {
		            parseInlineOptions(dummy); // skip
		        });
		        parent.add(token, value, dummy.comment, dummy.options);
		    }

		    function parseOption(parent, token) {
		        var isCustom = skip("(", true);

		        /* istanbul ignore if */
		        if (!typeRefRe.test(token = next()))
		            throw illegal(token, "name");

		        var name = token;
		        var option = name;
		        var propName;

		        if (isCustom) {
		            skip(")");
		            name = "(" + name + ")";
		            option = name;
		            token = peek();
		            if (fqTypeRefRe.test(token)) {
		                propName = token.slice(1); //remove '.' before property name
		                name += token;
		                next();
		            }
		        }
		        skip("=");
		        var optionValue = parseOptionValue(parent, name);
		        setParsedOption(parent, option, optionValue, propName);
		    }

		    function parseOptionValue(parent, name) {
		        // { a: "foo" b { c: "bar" } }
		        if (skip("{", true)) {
		            var objectResult = {};

		            while (!skip("}", true)) {
		                /* istanbul ignore if */
		                if (!nameRe.test(token = next())) {
		                    throw illegal(token, "name");
		                }
		                if (token === null) {
		                  throw illegal(token, "end of input");
		                }

		                var value;
		                var propName = token;

		                skip(":", true);

		                if (peek() === "{")
		                    value = parseOptionValue(parent, name + "." + token);
		                else if (peek() === "[") {
		                    // option (my_option) = {
		                    //     repeated_value: [ "foo", "bar" ]
		                    // };
		                    value = [];
		                    var lastValue;
		                    if (skip("[", true)) {
		                        do {
		                            lastValue = readValue();
		                            value.push(lastValue);
		                        } while (skip(",", true));
		                        skip("]");
		                        if (typeof lastValue !== "undefined") {
		                            setOption(parent, name + "." + token, lastValue);
		                        }
		                    }
		                } else {
		                    value = readValue();
		                    setOption(parent, name + "." + token, value);
		                }

		                var prevValue = objectResult[propName];

		                if (prevValue)
		                    value = [].concat(prevValue).concat(value);

		                objectResult[propName] = value;

		                // Semicolons and commas can be optional
		                skip(",", true);
		                skip(";", true);
		            }

		            return objectResult;
		        }

		        var simpleValue = readValue();
		        setOption(parent, name, simpleValue);
		        return simpleValue;
		        // Does not enforce a delimiter to be universal
		    }

		    function setOption(parent, name, value) {
		        if (parent.setOption)
		            parent.setOption(name, value);
		    }

		    function setParsedOption(parent, name, value, propName) {
		        if (parent.setParsedOption)
		            parent.setParsedOption(name, value, propName);
		    }

		    function parseInlineOptions(parent) {
		        if (skip("[", true)) {
		            do {
		                parseOption(parent, "option");
		            } while (skip(",", true));
		            skip("]");
		        }
		        return parent;
		    }

		    function parseService(parent, token) {

		        /* istanbul ignore if */
		        if (!nameRe.test(token = next()))
		            throw illegal(token, "service name");

		        var service = new Service(token);
		        ifBlock(service, function parseService_block(token) {
		            if (parseCommon(service, token))
		                return;

		            /* istanbul ignore else */
		            if (token === "rpc")
		                parseMethod(service, token);
		            else
		                throw illegal(token);
		        });
		        parent.add(service);
		    }

		    function parseMethod(parent, token) {
		        // Get the comment of the preceding line now (if one exists) in case the
		        // method is defined across multiple lines.
		        var commentText = cmnt();

		        var type = token;

		        /* istanbul ignore if */
		        if (!nameRe.test(token = next()))
		            throw illegal(token, "name");

		        var name = token,
		            requestType, requestStream,
		            responseType, responseStream;

		        skip("(");
		        if (skip("stream", true))
		            requestStream = true;

		        /* istanbul ignore if */
		        if (!typeRefRe.test(token = next()))
		            throw illegal(token);

		        requestType = token;
		        skip(")"); skip("returns"); skip("(");
		        if (skip("stream", true))
		            responseStream = true;

		        /* istanbul ignore if */
		        if (!typeRefRe.test(token = next()))
		            throw illegal(token);

		        responseType = token;
		        skip(")");

		        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
		        method.comment = commentText;
		        ifBlock(method, function parseMethod_block(token) {

		            /* istanbul ignore else */
		            if (token === "option") {
		                parseOption(method, token);
		                skip(";");
		            } else
		                throw illegal(token);

		        });
		        parent.add(method);
		    }

		    function parseExtension(parent, token) {

		        /* istanbul ignore if */
		        if (!typeRefRe.test(token = next()))
		            throw illegal(token, "reference");

		        var reference = token;
		        ifBlock(null, function parseExtension_block(token) {
		            switch (token) {

		                case "required":
		                case "repeated":
		                    parseField(parent, token, reference);
		                    break;

		                case "optional":
		                    /* istanbul ignore if */
		                    if (isProto3) {
		                        parseField(parent, "proto3_optional", reference);
		                    } else {
		                        parseField(parent, "optional", reference);
		                    }
		                    break;

		                default:
		                    /* istanbul ignore if */
		                    if (!isProto3 || !typeRefRe.test(token))
		                        throw illegal(token);
		                    push(token);
		                    parseField(parent, "optional", reference);
		                    break;
		            }
		        });
		    }

		    var token;
		    while ((token = next()) !== null) {
		        switch (token) {

		            case "package":

		                /* istanbul ignore if */
		                if (!head)
		                    throw illegal(token);

		                parsePackage();
		                break;

		            case "import":

		                /* istanbul ignore if */
		                if (!head)
		                    throw illegal(token);

		                parseImport();
		                break;

		            case "syntax":

		                /* istanbul ignore if */
		                if (!head)
		                    throw illegal(token);

		                parseSyntax();
		                break;

		            case "option":

		                parseOption(ptr, token);
		                skip(";");
		                break;

		            default:

		                /* istanbul ignore else */
		                if (parseCommon(ptr, token)) {
		                    head = false;
		                    continue;
		                }

		                /* istanbul ignore next */
		                throw illegal(token);
		        }
		    }

		    parse.filename = null;
		    return {
		        "package"     : pkg,
		        "imports"     : imports,
		         weakImports  : weakImports,
		         syntax       : syntax,
		         root         : root
		    };
		}

		/**
		 * Parses the given .proto source and returns an object with the parsed contents.
		 * @name parse
		 * @function
		 * @param {string} source Source contents
		 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
		 * @returns {IParserResult} Parser result
		 * @property {string} filename=null Currently processing file name for error reporting, if known
		 * @property {IParseOptions} defaults Default {@link IParseOptions}
		 * @variation 2
		 */
		return parse_1;
	}

	var common_1;
	var hasRequiredCommon;

	function requireCommon () {
		if (hasRequiredCommon) return common_1;
		hasRequiredCommon = 1;
		common_1 = common;

		var commonRe = /\/|\./;

		/**
		 * Provides common type definitions.
		 * Can also be used to provide additional google types or your own custom types.
		 * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name
		 * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition
		 * @returns {undefined}
		 * @property {INamespace} google/protobuf/any.proto Any
		 * @property {INamespace} google/protobuf/duration.proto Duration
		 * @property {INamespace} google/protobuf/empty.proto Empty
		 * @property {INamespace} google/protobuf/field_mask.proto FieldMask
		 * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue
		 * @property {INamespace} google/protobuf/timestamp.proto Timestamp
		 * @property {INamespace} google/protobuf/wrappers.proto Wrappers
		 * @example
		 * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)
		 * protobuf.common("descriptor", descriptorJson);
		 *
		 * // manually provides a custom definition (uses my.foo namespace)
		 * protobuf.common("my/foo/bar.proto", myFooBarJson);
		 */
		function common(name, json) {
		    if (!commonRe.test(name)) {
		        name = "google/protobuf/" + name + ".proto";
		        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
		    }
		    common[name] = json;
		}

		// Not provided because of limited use (feel free to discuss or to provide yourself):
		//
		// google/protobuf/descriptor.proto
		// google/protobuf/source_context.proto
		// google/protobuf/type.proto
		//
		// Stripped and pre-parsed versions of these non-bundled files are instead available as part of
		// the repository or package within the google/protobuf directory.

		common("any", {

		    /**
		     * Properties of a google.protobuf.Any message.
		     * @interface IAny
		     * @type {Object}
		     * @property {string} [typeUrl]
		     * @property {Uint8Array} [bytes]
		     * @memberof common
		     */
		    Any: {
		        fields: {
		            type_url: {
		                type: "string",
		                id: 1
		            },
		            value: {
		                type: "bytes",
		                id: 2
		            }
		        }
		    }
		});

		var timeType;

		common("duration", {

		    /**
		     * Properties of a google.protobuf.Duration message.
		     * @interface IDuration
		     * @type {Object}
		     * @property {number|Long} [seconds]
		     * @property {number} [nanos]
		     * @memberof common
		     */
		    Duration: timeType = {
		        fields: {
		            seconds: {
		                type: "int64",
		                id: 1
		            },
		            nanos: {
		                type: "int32",
		                id: 2
		            }
		        }
		    }
		});

		common("timestamp", {

		    /**
		     * Properties of a google.protobuf.Timestamp message.
		     * @interface ITimestamp
		     * @type {Object}
		     * @property {number|Long} [seconds]
		     * @property {number} [nanos]
		     * @memberof common
		     */
		    Timestamp: timeType
		});

		common("empty", {

		    /**
		     * Properties of a google.protobuf.Empty message.
		     * @interface IEmpty
		     * @memberof common
		     */
		    Empty: {
		        fields: {}
		    }
		});

		common("struct", {

		    /**
		     * Properties of a google.protobuf.Struct message.
		     * @interface IStruct
		     * @type {Object}
		     * @property {Object.<string,IValue>} [fields]
		     * @memberof common
		     */
		    Struct: {
		        fields: {
		            fields: {
		                keyType: "string",
		                type: "Value",
		                id: 1
		            }
		        }
		    },

		    /**
		     * Properties of a google.protobuf.Value message.
		     * @interface IValue
		     * @type {Object}
		     * @property {string} [kind]
		     * @property {0} [nullValue]
		     * @property {number} [numberValue]
		     * @property {string} [stringValue]
		     * @property {boolean} [boolValue]
		     * @property {IStruct} [structValue]
		     * @property {IListValue} [listValue]
		     * @memberof common
		     */
		    Value: {
		        oneofs: {
		            kind: {
		                oneof: [
		                    "nullValue",
		                    "numberValue",
		                    "stringValue",
		                    "boolValue",
		                    "structValue",
		                    "listValue"
		                ]
		            }
		        },
		        fields: {
		            nullValue: {
		                type: "NullValue",
		                id: 1
		            },
		            numberValue: {
		                type: "double",
		                id: 2
		            },
		            stringValue: {
		                type: "string",
		                id: 3
		            },
		            boolValue: {
		                type: "bool",
		                id: 4
		            },
		            structValue: {
		                type: "Struct",
		                id: 5
		            },
		            listValue: {
		                type: "ListValue",
		                id: 6
		            }
		        }
		    },

		    NullValue: {
		        values: {
		            NULL_VALUE: 0
		        }
		    },

		    /**
		     * Properties of a google.protobuf.ListValue message.
		     * @interface IListValue
		     * @type {Object}
		     * @property {Array.<IValue>} [values]
		     * @memberof common
		     */
		    ListValue: {
		        fields: {
		            values: {
		                rule: "repeated",
		                type: "Value",
		                id: 1
		            }
		        }
		    }
		});

		common("wrappers", {

		    /**
		     * Properties of a google.protobuf.DoubleValue message.
		     * @interface IDoubleValue
		     * @type {Object}
		     * @property {number} [value]
		     * @memberof common
		     */
		    DoubleValue: {
		        fields: {
		            value: {
		                type: "double",
		                id: 1
		            }
		        }
		    },

		    /**
		     * Properties of a google.protobuf.FloatValue message.
		     * @interface IFloatValue
		     * @type {Object}
		     * @property {number} [value]
		     * @memberof common
		     */
		    FloatValue: {
		        fields: {
		            value: {
		                type: "float",
		                id: 1
		            }
		        }
		    },

		    /**
		     * Properties of a google.protobuf.Int64Value message.
		     * @interface IInt64Value
		     * @type {Object}
		     * @property {number|Long} [value]
		     * @memberof common
		     */
		    Int64Value: {
		        fields: {
		            value: {
		                type: "int64",
		                id: 1
		            }
		        }
		    },

		    /**
		     * Properties of a google.protobuf.UInt64Value message.
		     * @interface IUInt64Value
		     * @type {Object}
		     * @property {number|Long} [value]
		     * @memberof common
		     */
		    UInt64Value: {
		        fields: {
		            value: {
		                type: "uint64",
		                id: 1
		            }
		        }
		    },

		    /**
		     * Properties of a google.protobuf.Int32Value message.
		     * @interface IInt32Value
		     * @type {Object}
		     * @property {number} [value]
		     * @memberof common
		     */
		    Int32Value: {
		        fields: {
		            value: {
		                type: "int32",
		                id: 1
		            }
		        }
		    },

		    /**
		     * Properties of a google.protobuf.UInt32Value message.
		     * @interface IUInt32Value
		     * @type {Object}
		     * @property {number} [value]
		     * @memberof common
		     */
		    UInt32Value: {
		        fields: {
		            value: {
		                type: "uint32",
		                id: 1
		            }
		        }
		    },

		    /**
		     * Properties of a google.protobuf.BoolValue message.
		     * @interface IBoolValue
		     * @type {Object}
		     * @property {boolean} [value]
		     * @memberof common
		     */
		    BoolValue: {
		        fields: {
		            value: {
		                type: "bool",
		                id: 1
		            }
		        }
		    },

		    /**
		     * Properties of a google.protobuf.StringValue message.
		     * @interface IStringValue
		     * @type {Object}
		     * @property {string} [value]
		     * @memberof common
		     */
		    StringValue: {
		        fields: {
		            value: {
		                type: "string",
		                id: 1
		            }
		        }
		    },

		    /**
		     * Properties of a google.protobuf.BytesValue message.
		     * @interface IBytesValue
		     * @type {Object}
		     * @property {Uint8Array} [value]
		     * @memberof common
		     */
		    BytesValue: {
		        fields: {
		            value: {
		                type: "bytes",
		                id: 1
		            }
		        }
		    }
		});

		common("field_mask", {

		    /**
		     * Properties of a google.protobuf.FieldMask message.
		     * @interface IDoubleValue
		     * @type {Object}
		     * @property {number} [value]
		     * @memberof common
		     */
		    FieldMask: {
		        fields: {
		            paths: {
		                rule: "repeated",
		                type: "string",
		                id: 1
		            }
		        }
		    }
		});

		/**
		 * Gets the root definition of the specified common proto file.
		 *
		 * Bundled definitions are:
		 * - google/protobuf/any.proto
		 * - google/protobuf/duration.proto
		 * - google/protobuf/empty.proto
		 * - google/protobuf/field_mask.proto
		 * - google/protobuf/struct.proto
		 * - google/protobuf/timestamp.proto
		 * - google/protobuf/wrappers.proto
		 *
		 * @param {string} file Proto file name
		 * @returns {INamespace|null} Root definition or `null` if not defined
		 */
		common.get = function get(file) {
		    return common[file] || null;
		};
		return common_1;
	}

	var hasRequiredSrc;

	function requireSrc () {
		if (hasRequiredSrc) return src.exports;
		hasRequiredSrc = 1;
		var protobuf = src.exports = requireIndexLight();

		protobuf.build = "full";

		// Parser
		protobuf.tokenize         = requireTokenize();
		protobuf.parse            = requireParse();
		protobuf.common           = requireCommon();

		// Configure parser
		protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
		return src.exports;
	}

	var protobufjs;
	var hasRequiredProtobufjs;

	function requireProtobufjs () {
		if (hasRequiredProtobufjs) return protobufjs;
		hasRequiredProtobufjs = 1;
		protobufjs = requireSrc();
		return protobufjs;
	}

	var protobufjsExports = requireProtobufjs();
	const $protobuf = /*@__PURE__*/getDefaultExportFromCjs(protobufjsExports);

	let $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
	const $root = $protobuf.roots["push-server"] || ($protobuf.roots["push-server"] = {});
	$root.RequestBatch = function() {
	  function RequestBatch(properties) {
	    this.requests = [];
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  RequestBatch.prototype.requests = $util.emptyArray;
	  RequestBatch.create = function create(properties) {
	    return new RequestBatch(properties);
	  };
	  RequestBatch.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.requests != null && message.requests.length) {
	      for (var i = 0; i < message.requests.length; ++i)
	        $root.Request.encode(message.requests[i], writer.uint32(
	          /* id 1, wireType 2 =*/
	          10
	        ).fork()).ldelim();
	    }
	    return writer;
	  };
	  RequestBatch.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.RequestBatch();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          if (!(message.requests && message.requests.length)) {
	            message.requests = [];
	          }
	          message.requests.push($root.Request.decode(reader, reader.uint32()));
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return RequestBatch;
	}();
	$root.Request = function() {
	  function Request(properties) {
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  Request.prototype.incomingMessages = null;
	  Request.prototype.channelStats = null;
	  Request.prototype.serverStats = null;
	  var $oneOfFields;
	  Object.defineProperty(Request.prototype, "command", {
	    get: $util.oneOfGetter($oneOfFields = [
	      "incomingMessages",
	      "channelStats",
	      "serverStats"
	    ]),
	    set: $util.oneOfSetter($oneOfFields)
	  });
	  Request.create = function create(properties) {
	    return new Request(properties);
	  };
	  Request.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.incomingMessages != null && message.hasOwnProperty("incomingMessages")) {
	      $root.IncomingMessagesRequest.encode(message.incomingMessages, writer.uint32(
	        /* id 1, wireType 2 =*/
	        10
	      ).fork()).ldelim();
	    }
	    if (message.channelStats != null && message.hasOwnProperty("channelStats")) {
	      $root.ChannelStatsRequest.encode(message.channelStats, writer.uint32(
	        /* id 2, wireType 2 =*/
	        18
	      ).fork()).ldelim();
	    }
	    if (message.serverStats != null && message.hasOwnProperty("serverStats")) {
	      $root.ServerStatsRequest.encode(message.serverStats, writer.uint32(
	        /* id 3, wireType 2 =*/
	        26
	      ).fork()).ldelim();
	    }
	    return writer;
	  };
	  Request.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Request();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          message.incomingMessages = $root.IncomingMessagesRequest.decode(reader, reader.uint32());
	          break;
	        case 2:
	          message.channelStats = $root.ChannelStatsRequest.decode(reader, reader.uint32());
	          break;
	        case 3:
	          message.serverStats = $root.ServerStatsRequest.decode(reader, reader.uint32());
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return Request;
	}();
	$root.IncomingMessagesRequest = function() {
	  function IncomingMessagesRequest(properties) {
	    this.messages = [];
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  IncomingMessagesRequest.prototype.messages = $util.emptyArray;
	  IncomingMessagesRequest.create = function create(properties) {
	    return new IncomingMessagesRequest(properties);
	  };
	  IncomingMessagesRequest.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.messages != null && message.messages.length) {
	      for (var i = 0; i < message.messages.length; ++i)
	        $root.IncomingMessage.encode(message.messages[i], writer.uint32(
	          /* id 1, wireType 2 =*/
	          10
	        ).fork()).ldelim();
	    }
	    return writer;
	  };
	  IncomingMessagesRequest.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.IncomingMessagesRequest();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          if (!(message.messages && message.messages.length)) {
	            message.messages = [];
	          }
	          message.messages.push($root.IncomingMessage.decode(reader, reader.uint32()));
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return IncomingMessagesRequest;
	}();
	$root.IncomingMessage = function() {
	  function IncomingMessage(properties) {
	    this.receivers = [];
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  IncomingMessage.prototype.receivers = $util.emptyArray;
	  IncomingMessage.prototype.sender = null;
	  IncomingMessage.prototype.body = "";
	  IncomingMessage.prototype.expiry = 0;
	  IncomingMessage.prototype.type = "";
	  IncomingMessage.create = function create(properties) {
	    return new IncomingMessage(properties);
	  };
	  IncomingMessage.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.receivers != null && message.receivers.length) {
	      for (var i = 0; i < message.receivers.length; ++i)
	        $root.Receiver.encode(message.receivers[i], writer.uint32(
	          /* id 1, wireType 2 =*/
	          10
	        ).fork()).ldelim();
	    }
	    if (message.sender != null && message.hasOwnProperty("sender")) {
	      $root.Sender.encode(message.sender, writer.uint32(
	        /* id 2, wireType 2 =*/
	        18
	      ).fork()).ldelim();
	    }
	    if (message.body != null && message.hasOwnProperty("body")) {
	      writer.uint32(
	        /* id 3, wireType 2 =*/
	        26
	      ).string(message.body);
	    }
	    if (message.expiry != null && message.hasOwnProperty("expiry")) {
	      writer.uint32(
	        /* id 4, wireType 0 =*/
	        32
	      ).uint32(message.expiry);
	    }
	    if (message.type != null && message.hasOwnProperty("type")) {
	      writer.uint32(
	        /* id 5, wireType 2 =*/
	        42
	      ).string(message.type);
	    }
	    return writer;
	  };
	  IncomingMessage.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.IncomingMessage();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          if (!(message.receivers && message.receivers.length)) {
	            message.receivers = [];
	          }
	          message.receivers.push($root.Receiver.decode(reader, reader.uint32()));
	          break;
	        case 2:
	          message.sender = $root.Sender.decode(reader, reader.uint32());
	          break;
	        case 3:
	          message.body = reader.string();
	          break;
	        case 4:
	          message.expiry = reader.uint32();
	          break;
	        case 5:
	          message.type = reader.string();
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return IncomingMessage;
	}();
	$root.ChannelStatsRequest = function() {
	  function ChannelStatsRequest(properties) {
	    this.channels = [];
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  ChannelStatsRequest.prototype.channels = $util.emptyArray;
	  ChannelStatsRequest.create = function create(properties) {
	    return new ChannelStatsRequest(properties);
	  };
	  ChannelStatsRequest.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.channels != null && message.channels.length) {
	      for (var i = 0; i < message.channels.length; ++i)
	        $root.ChannelId.encode(message.channels[i], writer.uint32(
	          /* id 1, wireType 2 =*/
	          10
	        ).fork()).ldelim();
	    }
	    return writer;
	  };
	  ChannelStatsRequest.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ChannelStatsRequest();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          if (!(message.channels && message.channels.length)) {
	            message.channels = [];
	          }
	          message.channels.push($root.ChannelId.decode(reader, reader.uint32()));
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return ChannelStatsRequest;
	}();
	$root.ChannelId = function() {
	  function ChannelId(properties) {
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  ChannelId.prototype.id = $util.newBuffer([]);
	  ChannelId.prototype.isPrivate = false;
	  ChannelId.prototype.signature = $util.newBuffer([]);
	  ChannelId.create = function create(properties) {
	    return new ChannelId(properties);
	  };
	  ChannelId.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.id != null && message.hasOwnProperty("id")) {
	      writer.uint32(
	        /* id 1, wireType 2 =*/
	        10
	      ).bytes(message.id);
	    }
	    if (message.isPrivate != null && message.hasOwnProperty("isPrivate")) {
	      writer.uint32(
	        /* id 2, wireType 0 =*/
	        16
	      ).bool(message.isPrivate);
	    }
	    if (message.signature != null && message.hasOwnProperty("signature")) {
	      writer.uint32(
	        /* id 3, wireType 2 =*/
	        26
	      ).bytes(message.signature);
	    }
	    return writer;
	  };
	  ChannelId.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ChannelId();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          message.id = reader.bytes();
	          break;
	        case 2:
	          message.isPrivate = reader.bool();
	          break;
	        case 3:
	          message.signature = reader.bytes();
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return ChannelId;
	}();
	$root.ServerStatsRequest = function() {
	  function ServerStatsRequest(properties) {
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  ServerStatsRequest.create = function create(properties) {
	    return new ServerStatsRequest(properties);
	  };
	  ServerStatsRequest.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    return writer;
	  };
	  ServerStatsRequest.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ServerStatsRequest();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return ServerStatsRequest;
	}();
	$root.Sender = function() {
	  function Sender(properties) {
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  Sender.prototype.type = 0;
	  Sender.prototype.id = $util.newBuffer([]);
	  Sender.create = function create(properties) {
	    return new Sender(properties);
	  };
	  Sender.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.type != null && message.hasOwnProperty("type")) {
	      writer.uint32(
	        /* id 1, wireType 0 =*/
	        8
	      ).int32(message.type);
	    }
	    if (message.id != null && message.hasOwnProperty("id")) {
	      writer.uint32(
	        /* id 2, wireType 2 =*/
	        18
	      ).bytes(message.id);
	    }
	    return writer;
	  };
	  Sender.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Sender();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          message.type = reader.int32();
	          break;
	        case 2:
	          message.id = reader.bytes();
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return Sender;
	}();
	$root.SenderType = function() {
	  var valuesById = {}, values = Object.create(valuesById);
	  values[valuesById[0] = "UNKNOWN"] = 0;
	  values[valuesById[1] = "CLIENT"] = 1;
	  values[valuesById[2] = "BACKEND"] = 2;
	  return values;
	}();
	$root.Receiver = function() {
	  function Receiver(properties) {
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  Receiver.prototype.id = $util.newBuffer([]);
	  Receiver.prototype.isPrivate = false;
	  Receiver.prototype.signature = $util.newBuffer([]);
	  Receiver.create = function create(properties) {
	    return new Receiver(properties);
	  };
	  Receiver.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.id != null && message.hasOwnProperty("id")) {
	      writer.uint32(
	        /* id 1, wireType 2 =*/
	        10
	      ).bytes(message.id);
	    }
	    if (message.isPrivate != null && message.hasOwnProperty("isPrivate")) {
	      writer.uint32(
	        /* id 2, wireType 0 =*/
	        16
	      ).bool(message.isPrivate);
	    }
	    if (message.signature != null && message.hasOwnProperty("signature")) {
	      writer.uint32(
	        /* id 3, wireType 2 =*/
	        26
	      ).bytes(message.signature);
	    }
	    return writer;
	  };
	  Receiver.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Receiver();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          message.id = reader.bytes();
	          break;
	        case 2:
	          message.isPrivate = reader.bool();
	          break;
	        case 3:
	          message.signature = reader.bytes();
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return Receiver;
	}();
	$root.ResponseBatch = function() {
	  function ResponseBatch(properties) {
	    this.responses = [];
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  ResponseBatch.prototype.responses = $util.emptyArray;
	  ResponseBatch.create = function create(properties) {
	    return new ResponseBatch(properties);
	  };
	  ResponseBatch.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.responses != null && message.responses.length) {
	      for (var i = 0; i < message.responses.length; ++i)
	        $root.Response.encode(message.responses[i], writer.uint32(
	          /* id 1, wireType 2 =*/
	          10
	        ).fork()).ldelim();
	    }
	    return writer;
	  };
	  ResponseBatch.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ResponseBatch();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          if (!(message.responses && message.responses.length)) {
	            message.responses = [];
	          }
	          message.responses.push($root.Response.decode(reader, reader.uint32()));
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return ResponseBatch;
	}();
	$root.Response = function() {
	  function Response(properties) {
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  Response.prototype.outgoingMessages = null;
	  Response.prototype.channelStats = null;
	  Response.prototype.serverStats = null;
	  var $oneOfFields;
	  Object.defineProperty(Response.prototype, "command", {
	    get: $util.oneOfGetter($oneOfFields = [
	      "outgoingMessages",
	      "channelStats",
	      "serverStats"
	    ]),
	    set: $util.oneOfSetter($oneOfFields)
	  });
	  Response.create = function create(properties) {
	    return new Response(properties);
	  };
	  Response.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.outgoingMessages != null && message.hasOwnProperty("outgoingMessages")) {
	      $root.OutgoingMessagesResponse.encode(message.outgoingMessages, writer.uint32(
	        /* id 1, wireType 2 =*/
	        10
	      ).fork()).ldelim();
	    }
	    if (message.channelStats != null && message.hasOwnProperty("channelStats")) {
	      $root.ChannelStatsResponse.encode(message.channelStats, writer.uint32(
	        /* id 2, wireType 2 =*/
	        18
	      ).fork()).ldelim();
	    }
	    if (message.serverStats != null && message.hasOwnProperty("serverStats")) {
	      $root.JsonResponse.encode(message.serverStats, writer.uint32(
	        /* id 3, wireType 2 =*/
	        26
	      ).fork()).ldelim();
	    }
	    return writer;
	  };
	  Response.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Response();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          message.outgoingMessages = $root.OutgoingMessagesResponse.decode(reader, reader.uint32());
	          break;
	        case 2:
	          message.channelStats = $root.ChannelStatsResponse.decode(reader, reader.uint32());
	          break;
	        case 3:
	          message.serverStats = $root.JsonResponse.decode(reader, reader.uint32());
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return Response;
	}();
	$root.OutgoingMessagesResponse = function() {
	  function OutgoingMessagesResponse(properties) {
	    this.messages = [];
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  OutgoingMessagesResponse.prototype.messages = $util.emptyArray;
	  OutgoingMessagesResponse.create = function create(properties) {
	    return new OutgoingMessagesResponse(properties);
	  };
	  OutgoingMessagesResponse.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.messages != null && message.messages.length) {
	      for (var i = 0; i < message.messages.length; ++i)
	        $root.OutgoingMessage.encode(message.messages[i], writer.uint32(
	          /* id 1, wireType 2 =*/
	          10
	        ).fork()).ldelim();
	    }
	    return writer;
	  };
	  OutgoingMessagesResponse.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.OutgoingMessagesResponse();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          if (!(message.messages && message.messages.length)) {
	            message.messages = [];
	          }
	          message.messages.push($root.OutgoingMessage.decode(reader, reader.uint32()));
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return OutgoingMessagesResponse;
	}();
	$root.OutgoingMessage = function() {
	  function OutgoingMessage(properties) {
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  OutgoingMessage.prototype.id = $util.newBuffer([]);
	  OutgoingMessage.prototype.body = "";
	  OutgoingMessage.prototype.expiry = 0;
	  OutgoingMessage.prototype.created = 0;
	  OutgoingMessage.prototype.sender = null;
	  OutgoingMessage.create = function create(properties) {
	    return new OutgoingMessage(properties);
	  };
	  OutgoingMessage.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.id != null && message.hasOwnProperty("id")) {
	      writer.uint32(
	        /* id 1, wireType 2 =*/
	        10
	      ).bytes(message.id);
	    }
	    if (message.body != null && message.hasOwnProperty("body")) {
	      writer.uint32(
	        /* id 2, wireType 2 =*/
	        18
	      ).string(message.body);
	    }
	    if (message.expiry != null && message.hasOwnProperty("expiry")) {
	      writer.uint32(
	        /* id 3, wireType 0 =*/
	        24
	      ).uint32(message.expiry);
	    }
	    if (message.created != null && message.hasOwnProperty("created")) {
	      writer.uint32(
	        /* id 4, wireType 5 =*/
	        37
	      ).fixed32(message.created);
	    }
	    if (message.sender != null && message.hasOwnProperty("sender")) {
	      $root.Sender.encode(message.sender, writer.uint32(
	        /* id 5, wireType 2 =*/
	        42
	      ).fork()).ldelim();
	    }
	    return writer;
	  };
	  OutgoingMessage.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.OutgoingMessage();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          message.id = reader.bytes();
	          break;
	        case 2:
	          message.body = reader.string();
	          break;
	        case 3:
	          message.expiry = reader.uint32();
	          break;
	        case 4:
	          message.created = reader.fixed32();
	          break;
	        case 5:
	          message.sender = $root.Sender.decode(reader, reader.uint32());
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return OutgoingMessage;
	}();
	$root.ChannelStatsResponse = function() {
	  function ChannelStatsResponse(properties) {
	    this.channels = [];
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  ChannelStatsResponse.prototype.channels = $util.emptyArray;
	  ChannelStatsResponse.create = function create(properties) {
	    return new ChannelStatsResponse(properties);
	  };
	  ChannelStatsResponse.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.channels != null && message.channels.length) {
	      for (var i = 0; i < message.channels.length; ++i)
	        $root.ChannelStats.encode(message.channels[i], writer.uint32(
	          /* id 1, wireType 2 =*/
	          10
	        ).fork()).ldelim();
	    }
	    return writer;
	  };
	  ChannelStatsResponse.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ChannelStatsResponse();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          if (!(message.channels && message.channels.length)) {
	            message.channels = [];
	          }
	          message.channels.push($root.ChannelStats.decode(reader, reader.uint32()));
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return ChannelStatsResponse;
	}();
	$root.ChannelStats = function() {
	  function ChannelStats(properties) {
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  ChannelStats.prototype.id = $util.newBuffer([]);
	  ChannelStats.prototype.isPrivate = false;
	  ChannelStats.prototype.isOnline = false;
	  ChannelStats.create = function create(properties) {
	    return new ChannelStats(properties);
	  };
	  ChannelStats.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.id != null && message.hasOwnProperty("id")) {
	      writer.uint32(
	        /* id 1, wireType 2 =*/
	        10
	      ).bytes(message.id);
	    }
	    if (message.isPrivate != null && message.hasOwnProperty("isPrivate")) {
	      writer.uint32(
	        /* id 2, wireType 0 =*/
	        16
	      ).bool(message.isPrivate);
	    }
	    if (message.isOnline != null && message.hasOwnProperty("isOnline")) {
	      writer.uint32(
	        /* id 3, wireType 0 =*/
	        24
	      ).bool(message.isOnline);
	    }
	    return writer;
	  };
	  ChannelStats.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ChannelStats();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          message.id = reader.bytes();
	          break;
	        case 2:
	          message.isPrivate = reader.bool();
	          break;
	        case 3:
	          message.isOnline = reader.bool();
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return ChannelStats;
	}();
	$root.JsonResponse = function() {
	  function JsonResponse(properties) {
	    if (properties) {
	      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	        if (properties[keys[i]] != null) {
	          this[keys[i]] = properties[keys[i]];
	        }
	    }
	  }
	  JsonResponse.prototype.json = "";
	  JsonResponse.create = function create(properties) {
	    return new JsonResponse(properties);
	  };
	  JsonResponse.encode = function encode(message, writer) {
	    if (!writer) {
	      writer = $Writer.create();
	    }
	    if (message.json != null && message.hasOwnProperty("json")) {
	      writer.uint32(
	        /* id 1, wireType 2 =*/
	        10
	      ).string(message.json);
	    }
	    return writer;
	  };
	  JsonResponse.decode = function decode(reader, length) {
	    if (!(reader instanceof $Reader)) {
	      reader = $Reader.create(reader);
	    }
	    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.JsonResponse();
	    while (reader.pos < end) {
	      var tag = reader.uint32();
	      switch (tag >>> 3) {
	        case 1:
	          message.json = reader.string();
	          break;
	        default:
	          reader.skipType(tag & 7);
	          break;
	      }
	    }
	    return message;
	  };
	  return JsonResponse;
	}();

	$root["Response"];
	const ResponseBatch = $root["ResponseBatch"];
	$root["Request"];
	const RequestBatch = $root["RequestBatch"];
	$root["IncomingMessagesRequest"];
	const IncomingMessage = $root["IncomingMessage"];
	const Receiver = $root["Receiver"];

	class AbstractConnector {
	  _logger = null;
	  _connected = false;
	  _connectionType;
	  _disconnectCode = 0;
	  _disconnectReason = "";
	  _parent;
	  _callbacks;
	  constructor(config) {
	    this._parent = config.parent;
	    this._connectionType = ConnectionType.Undefined;
	    this._callbacks = {
	      onOpen: Type.isFunction(config.onOpen) ? config.onOpen : () => {
	      },
	      onDisconnect: Type.isFunction(config.onDisconnect) ? config.onDisconnect : () => {
	      },
	      onError: Type.isFunction(config.onError) ? config.onError : () => {
	      },
	      onMessage: Type.isFunction(config.onMessage) ? config.onMessage : () => {
	      }
	    };
	  }
	  setLogger(logger) {
	    this._logger = logger;
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  destroy() {
	  }
	  get connected() {
	    return this._connected;
	  }
	  set connected(value) {
	    if (value == this._connected) {
	      return;
	    }
	    this._connected = value;
	    if (this._connected) {
	      this._callbacks.onOpen();
	    } else {
	      this._callbacks.onDisconnect({
	        code: this.disconnectCode,
	        reason: this.disconnectReason
	      });
	    }
	  }
	  get disconnectCode() {
	    return this._disconnectCode;
	  }
	  get disconnectReason() {
	    return this._disconnectReason;
	  }
	  get connectionPath() {
	    return this._parent.getConnectionPath(
	      this._connectionType
	    );
	  }
	}

	class WebSocketConnector extends AbstractConnector {
	  _socket;
	  _onSocketOpenHandler;
	  _onSocketCloseHandler;
	  _onSocketErrorHandler;
	  _onSocketMessageHandler;
	  constructor(config) {
	    super(config);
	    this._connectionType = ConnectionType.WebSocket;
	    this._socket = null;
	    this._onSocketOpenHandler = this._onSocketOpen.bind(this);
	    this._onSocketCloseHandler = this._onSocketClose.bind(this);
	    this._onSocketErrorHandler = this._onSocketError.bind(this);
	    this._onSocketMessageHandler = this._onSocketMessage.bind(this);
	  }
	  destroy() {
	    super.destroy();
	    if (this._socket) {
	      this._socket.close();
	      this._socket = null;
	    }
	  }
	  /**
	   * @inheritDoc
	   */
	  connect() {
	    if (this._socket) {
	      if (this._socket.readyState === 1) {
	        return;
	      } else {
	        this.clearEventListener();
	        this._socket.close();
	        this._socket = null;
	      }
	    }
	    this._createSocket();
	  }
	  get socket() {
	    return this._socket;
	  }
	  /**
	   * @inheritDoc
	   * @param code
	   * @param reason
	   */
	  disconnect(code, reason) {
	    if (this._socket !== null) {
	      this.clearEventListener();
	      this._socket.close(
	        code,
	        reason
	      );
	    }
	    this._socket = null;
	    this._disconnectCode = code;
	    this._disconnectReason = reason;
	    this.connected = false;
	  }
	  /**
	   * Via websocket connection
	   * @inheritDoc
	   */
	  send(buffer) {
	    if (!this._socket || this._socket.readyState !== 1) {
	      this.getLogger().error(new Error(
	        `${Text.getDateForLog()}: Pull: WebSocket is not connected`
	      ));
	      return false;
	    }
	    this._socket.send(buffer);
	    return true;
	  }
	  // region Event Handlers ////
	  _onSocketOpen() {
	    this.connected = true;
	  }
	  _onSocketClose(event) {
	    this._socket = null;
	    this._disconnectCode = Number(event.code);
	    this._disconnectReason = event.reason;
	    this.connected = false;
	  }
	  _onSocketError(event) {
	    this._callbacks.onError(new Error(
	      `Socket error: ${event}`
	    ));
	  }
	  _onSocketMessage(event) {
	    this._callbacks.onMessage(
	      event.data
	    );
	  }
	  // endregion ////
	  // region Tools ////
	  clearEventListener() {
	    if (this._socket) {
	      this._socket.removeEventListener(
	        "open",
	        this._onSocketOpenHandler
	      );
	      this._socket.removeEventListener(
	        "close",
	        this._onSocketCloseHandler
	      );
	      this._socket.removeEventListener(
	        "error",
	        this._onSocketErrorHandler
	      );
	      this._socket.removeEventListener(
	        "message",
	        this._onSocketMessageHandler
	      );
	    }
	  }
	  _createSocket() {
	    if (this._socket) {
	      throw new Error("Socket already exists");
	    }
	    if (!this.connectionPath) {
	      throw new Error("Websocket connection path is not defined");
	    }
	    this._socket = new WebSocket(this.connectionPath);
	    this._socket.binaryType = "arraybuffer";
	    this._socket.addEventListener(
	      "open",
	      this._onSocketOpenHandler
	    );
	    this._socket.addEventListener(
	      "close",
	      this._onSocketCloseHandler
	    );
	    this._socket.addEventListener(
	      "error",
	      this._onSocketErrorHandler
	    );
	    this._socket.addEventListener(
	      "message",
	      this._onSocketMessageHandler
	    );
	  }
	  // endregion ////
	}

	const LONG_POLLING_TIMEOUT = 60;
	class LongPollingConnector extends AbstractConnector {
	  _active;
	  _requestTimeout;
	  _failureTimeout;
	  _xhr;
	  _requestAborted;
	  constructor(config) {
	    super(config);
	    this._active = false;
	    this._connectionType = ConnectionType.LongPolling;
	    this._requestTimeout = null;
	    this._failureTimeout = null;
	    this._xhr = this.createXhr();
	    this._requestAborted = false;
	  }
	  /**
	   * @inheritDoc
	   */
	  connect() {
	    this._active = true;
	    this.performRequest();
	  }
	  /**
	   * @inheritDoc
	   * @param code
	   * @param reason
	   */
	  disconnect(code, reason) {
	    this._active = false;
	    this.clearTimeOut();
	    if (this._xhr) {
	      this._requestAborted = true;
	      this._xhr.abort();
	    }
	    this._disconnectCode = code;
	    this._disconnectReason = reason;
	    this.connected = false;
	  }
	  performRequest() {
	    if (!this._active) {
	      return;
	    }
	    if (!this.connectionPath) {
	      throw new Error("Long polling connection path is not defined");
	    }
	    if (this._xhr.readyState !== 0 && this._xhr.readyState !== 4) {
	      return;
	    }
	    this.clearTimeOut();
	    this._failureTimeout = setTimeout(
	      () => {
	        this.connected = true;
	      },
	      5e3
	    );
	    this._requestTimeout = setTimeout(
	      this.onRequestTimeout.bind(this),
	      LONG_POLLING_TIMEOUT * 1e3
	    );
	    this._xhr.open("GET", this.connectionPath);
	    this._xhr.send();
	  }
	  onRequestTimeout() {
	    this._requestAborted = true;
	    this._xhr.abort();
	    this.performRequest();
	  }
	  onXhrReadyStateChange() {
	    if (this._xhr.readyState === 4) {
	      if (!this._requestAborted || this._xhr.status == 200) {
	        this.onResponse(this._xhr.response);
	      }
	      this._requestAborted = false;
	    }
	  }
	  /**
	   * Via http request
	   * @inheritDoc
	   */
	  send(buffer) {
	    const path = this._parent.getPublicationPath();
	    if (!path) {
	      this.getLogger().error(new Error(
	        `${Text.getDateForLog()}: Pull: publication path is empty`
	      ));
	      return false;
	    }
	    const xhr = new XMLHttpRequest();
	    xhr.open("POST", path);
	    xhr.send(buffer);
	    return true;
	  }
	  onResponse(response) {
	    this.clearTimeOut();
	    if (this._xhr.status === 200) {
	      this.connected = true;
	      if (Type.isStringFilled(response) || response instanceof ArrayBuffer) {
	        this._callbacks.onMessage(response);
	      } else {
	        this._parent.session.mid = null;
	      }
	      this.performRequest();
	    } else if (this._xhr.status === 304) {
	      this.connected = true;
	      if (this._xhr.getResponseHeader("Expires") === "Thu, 01 Jan 1973 11:11:01 GMT") {
	        const lastMessageId = this._xhr.getResponseHeader("Last-Message-Id");
	        if (Type.isStringFilled(lastMessageId)) {
	          this._parent.setLastMessageId(lastMessageId || "");
	        }
	      }
	      this.performRequest();
	    } else {
	      this._callbacks.onError(new Error(
	        "Could not connect to the server"
	      ));
	      this.connected = false;
	    }
	  }
	  // region Tools ////
	  clearTimeOut() {
	    if (this._failureTimeout) {
	      clearTimeout(this._failureTimeout);
	      this._failureTimeout = null;
	    }
	    if (this._requestTimeout) {
	      clearTimeout(this._requestTimeout);
	      this._requestTimeout = null;
	    }
	  }
	  createXhr() {
	    const result = new XMLHttpRequest();
	    if (this._parent.isProtobufSupported() && !this._parent.isJsonRpc()) {
	      result.responseType = "arraybuffer";
	    }
	    result.addEventListener(
	      "readystatechange",
	      this.onXhrReadyStateChange.bind(this)
	    );
	    return result;
	  }
	  // endregion ////
	}

	const REVISION = 19;
	const RESTORE_WEBSOCKET_TIMEOUT = 30 * 60;
	const OFFLINE_STATUS_DELAY = 5e3;
	const CONFIG_CHECK_INTERVAL = 60 * 1e3;
	const MAX_IDS_TO_STORE = 10;
	const PING_TIMEOUT = 10;
	const JSON_RPC_PING = "ping";
	const JSON_RPC_PONG = "pong";
	const LS_SESSION = "bx-pull-session";
	const LS_SESSION_CACHE_TIME = 20;
	const EmptyConfig = {
	  api: {},
	  channels: {},
	  publicChannels: {},
	  server: { timeShift: 0 },
	  clientId: null,
	  jwt: null,
	  exp: 0
	};
	class PullClient {
	  // region Params ////
	  _logger = null;
	  _restClient;
	  _status;
	  _context;
	  _guestMode;
	  _guestUserId;
	  _userId;
	  _configGetMethod;
	  _getPublicListMethod;
	  _siteId;
	  _enabled;
	  _unloading = false;
	  _starting = false;
	  _debug = false;
	  _connectionAttempt = 0;
	  _connectionType = ConnectionType.WebSocket;
	  _reconnectTimeout = null;
	  _restartTimeout = null;
	  _restoreWebSocketTimeout = null;
	  _skipStorageInit;
	  _skipCheckRevision;
	  _subscribers = {};
	  _watchTagsQueue = /* @__PURE__ */ new Map();
	  _watchUpdateInterval = 174e4;
	  _watchForceUpdateInterval = 5e3;
	  _configTimestamp = 0;
	  _session = {
	    mid: null,
	    tag: null,
	    time: null,
	    history: {},
	    lastMessageIds: [],
	    messageCount: 0
	  };
	  _connectors = {
	    [ConnectionType.Undefined]: null,
	    [ConnectionType.WebSocket]: null,
	    [ConnectionType.LongPolling]: null
	  };
	  _isSecure;
	  _config = null;
	  _storage = null;
	  _sharedConfig;
	  _channelManager;
	  _jsonRpcAdapter = null;
	  /**
	   * @depricate
	   * @private
	   */
	  // private _notificationPopup: null = null
	  // timers ////
	  _checkInterval = null;
	  _offlineTimeout = null;
	  _watchUpdateTimeout = null;
	  _pingWaitTimeout = null;
	  // manual stop workaround ////
	  _isManualDisconnect = false;
	  _loggingEnabled = false;
	  // bound event handlers ////
	  _onPingTimeoutHandler;
	  // [userId] => array of callbacks
	  _userStatusCallbacks = {};
	  _connectPromise = null;
	  _startingPromise = null;
	  // endregion ////
	  // region Init ////
	  /**
	   * @done
	   * @param params
	   */
	  constructor(params) {
	    this._restClient = params.b24;
	    this._status = PullStatus.Offline;
	    this._context = "master";
	    if (params.restApplication) {
	      if (typeof params.configGetMethod === "undefined") {
	        params.configGetMethod = "pull.application.config.get";
	      }
	      if (typeof params.skipCheckRevision === "undefined") {
	        params.skipCheckRevision = true;
	      }
	      if (Type.isStringFilled(params.restApplication)) {
	        params.siteId = params.restApplication;
	      }
	      params.serverEnabled = true;
	    }
	    this._guestMode = params.guestMode ? Text.toBoolean(params.guestMode) : false;
	    this._guestUserId = params.guestUserId ? Text.toInteger(params.guestUserId) : 0;
	    if (this._guestMode && this._guestUserId > 0) {
	      this._userId = this._guestUserId;
	    } else {
	      this._guestMode = false;
	      this._userId = params.userId ? Text.toInteger(params.userId) : 0;
	    }
	    this._siteId = params.siteId ? params.siteId : "none";
	    this._enabled = !Type.isUndefined(params.serverEnabled) ? params.serverEnabled === true : true;
	    this._configGetMethod = !Type.isStringFilled(params.configGetMethod) ? "pull.config.get" : params.configGetMethod || "";
	    this._getPublicListMethod = !Type.isStringFilled(params.getPublicListMethod) ? "pull.channel.public.list" : params.getPublicListMethod || "";
	    this._skipStorageInit = params.skipStorageInit === true;
	    this._skipCheckRevision = params.skipCheckRevision === true;
	    if (!Type.isUndefined(params.configTimestamp)) {
	      this._configTimestamp = Text.toInteger(params.configTimestamp);
	    }
	    this._isSecure = document?.location.href.indexOf("https") === 0;
	    if (this._userId && !this._skipStorageInit) {
	      this._storage = new StorageManager({
	        userId: this._userId,
	        siteId: this._siteId
	      });
	    }
	    this._sharedConfig = new SharedConfig({
	      onWebSocketBlockChanged: this.onWebSocketBlockChanged.bind(this),
	      storage: this._storage
	    });
	    this._channelManager = new ChannelManager({
	      b24: this._restClient,
	      getPublicListMethod: this._getPublicListMethod
	    });
	    this._loggingEnabled = this._sharedConfig.isLoggingEnabled();
	    this._onPingTimeoutHandler = this.onPingTimeout.bind(this);
	  }
	  setLogger(logger) {
	    this._logger = logger;
	    this._jsonRpcAdapter?.setLogger(this.getLogger());
	    this._storage?.setLogger(this.getLogger());
	    this._sharedConfig.setLogger(this.getLogger());
	    this._channelManager.setLogger(this.getLogger());
	    this._connectors.webSocket?.setLogger(this.getLogger());
	    this._connectors.longPolling?.setLogger(this.getLogger());
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(
	        `NullLogger`
	      );
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  destroy() {
	    this.stop(
	      CloseReasons.NORMAL_CLOSURE,
	      "manual stop"
	    );
	    this.onBeforeUnload();
	  }
	  /**
	   * @done
	   * @private
	   */
	  init() {
	    this._connectors.webSocket = new WebSocketConnector({
	      parent: this,
	      onOpen: this.onWebSocketOpen.bind(this),
	      onMessage: this.onIncomingMessage.bind(this),
	      onDisconnect: this.onWebSocketDisconnect.bind(this),
	      onError: this.onWebSocketError.bind(this)
	    });
	    this._connectors.longPolling = new LongPollingConnector({
	      parent: this,
	      onOpen: this.onLongPollingOpen.bind(this),
	      onMessage: this.onIncomingMessage.bind(this),
	      onDisconnect: this.onLongPollingDisconnect.bind(this),
	      onError: this.onLongPollingError.bind(this)
	    });
	    this._connectionType = this.isWebSocketAllowed() ? ConnectionType.WebSocket : ConnectionType.LongPolling;
	    window.addEventListener("beforeunload", this.onBeforeUnload.bind(this));
	    window.addEventListener("offline", this.onOffline.bind(this));
	    window.addEventListener("online", this.onOnline.bind(this));
	    this._jsonRpcAdapter = new JsonRpc({
	      connector: this._connectors.webSocket,
	      handlers: {
	        "incoming.message": this.handleRpcIncomingMessage.bind(this)
	      }
	    });
	  }
	  // endregion ////
	  // region Get-Set ////
	  /**
	   * @done
	   */
	  get connector() {
	    return this._connectors[this._connectionType];
	  }
	  /**
	   * @done
	   */
	  get status() {
	    return this._status;
	  }
	  /**
	   * @done
	   * @param status
	   */
	  set status(status) {
	    if (this._status === status) {
	      return;
	    }
	    this._status = status;
	    if (this._offlineTimeout) {
	      clearTimeout(this._offlineTimeout);
	      this._offlineTimeout = null;
	    }
	    if (status === PullStatus.Offline) {
	      this.sendPullStatusDelayed(status, OFFLINE_STATUS_DELAY);
	    } else {
	      this.sendPullStatus(status);
	    }
	  }
	  get session() {
	    return this._session;
	  }
	  // endregion ////
	  // region Public /////
	  /**
	   * @done
	   * Creates a subscription to incoming messages.
	   *
	   * @param {TypeSubscriptionOptions | TypeSubscriptionCommandHandler} params
	   * @returns {Function} - Unsubscribe callback function
	   */
	  subscribe(params) {
	    if (!Type.isPlainObject(params)) {
	      return this.attachCommandHandler(params);
	    }
	    params = params;
	    params.type = params.type || SubscriptionType.Server;
	    params.command = params.command || null;
	    if (params.type == SubscriptionType.Server || params.type == SubscriptionType.Client) {
	      if (typeof params.moduleId === "undefined") {
	        throw new Error(`${Text.getDateForLog()}: Pull.subscribe: parameter moduleId is not specified`);
	      }
	      if (typeof this._subscribers[params.type] === "undefined") {
	        this._subscribers[params.type] = {};
	      }
	      if (typeof this._subscribers[params.type][params.moduleId] === "undefined") {
	        this._subscribers[params.type][params.moduleId] = {
	          callbacks: [],
	          commands: {}
	        };
	      }
	      if (params.command) {
	        if (typeof this._subscribers[params.type][params.moduleId]["commands"][params.command] === "undefined") {
	          this._subscribers[params.type][params.moduleId]["commands"][params.command] = [];
	        }
	        this._subscribers[params.type][params.moduleId]["commands"][params.command].push(params.callback);
	        return () => {
	          if (typeof params.type === "undefined" || typeof params.moduleId === "undefined" || typeof params.command === "undefined" || null === params.command) {
	            return;
	          }
	          this._subscribers[params.type][params.moduleId]["commands"][params.command] = this._subscribers[params.type][params.moduleId]["commands"][params.command].filter((element) => {
	            return element !== params.callback;
	          });
	        };
	      } else {
	        this._subscribers[params.type][params.moduleId]["callbacks"].push(params.callback);
	        return () => {
	          if (typeof params.type === "undefined" || typeof params.moduleId === "undefined") {
	            return;
	          }
	          this._subscribers[params.type][params.moduleId]["callbacks"] = this._subscribers[params.type][params.moduleId]["callbacks"].filter((element) => {
	            return element !== params.callback;
	          });
	        };
	      }
	    } else {
	      if (typeof this._subscribers[params.type] === "undefined") {
	        this._subscribers[params.type] = [];
	      }
	      this._subscribers[params.type].push(params.callback);
	      return () => {
	        if (typeof params.type === "undefined") {
	          return;
	        }
	        this._subscribers[params.type] = this._subscribers[params.type].filter((element) => {
	          return element !== params.callback;
	        });
	      };
	    }
	  }
	  /**
	   * @done
	   * @param {TypeSubscriptionCommandHandler} handler
	   * @returns {Function} - Unsubscribe callback function
	   */
	  attachCommandHandler(handler) {
	    if (typeof handler.getModuleId !== "function" || typeof handler.getModuleId() !== "string") {
	      this.getLogger().error(`${Text.getDateForLog()}: Pull.attachCommandHandler: result of handler.getModuleId() is not a string.`);
	      return () => {
	      };
	    }
	    let type = SubscriptionType.Server;
	    if (typeof handler.getSubscriptionType === "function") {
	      type = handler.getSubscriptionType();
	    }
	    return this.subscribe({
	      type,
	      moduleId: handler.getModuleId(),
	      callback: (data) => {
	        let method = null;
	        if (typeof handler.getMap === "function") {
	          const mapping = handler.getMap();
	          if (mapping && typeof mapping === "object") {
	            const rowMapping = mapping[data.command];
	            if (typeof rowMapping === "function") {
	              method = rowMapping.bind(handler);
	            } else if (typeof rowMapping === "string" && typeof handler[rowMapping] === "function") {
	              method = handler[rowMapping].bind(handler);
	            }
	          }
	        }
	        if (!method) {
	          const methodName = `handle${Text.capitalize(data.command)}`;
	          if (typeof handler[methodName] === "function") {
	            method = handler[methodName].bind(handler);
	          }
	        }
	        if (method) {
	          if (this._debug && this._context !== "master") {
	            this.getLogger().warn(
	              `${Text.getDateForLog()}: Pull.attachCommandHandler: result of handler.getModuleId() is not a string`,
	              data
	            );
	          }
	          method(
	            data.params,
	            data.extra,
	            data.command
	          );
	        }
	      }
	    });
	  }
	  /**
	   * @done
	   * @param config
	   */
	  async start(config = null) {
	    let allowConfigCaching = true;
	    if (this.isConnected()) {
	      return Promise.resolve(true);
	    }
	    if (this._starting && this._startingPromise) {
	      return this._startingPromise;
	    }
	    if (!this._userId) {
	      throw new Error("Not set userId");
	    }
	    if (this._siteId === "none") {
	      throw new Error("Not set siteId");
	    }
	    let skipReconnectToLastSession = false;
	    if (!!config && Type.isPlainObject(config)) {
	      if (typeof config?.skipReconnectToLastSession !== "undefined") {
	        skipReconnectToLastSession = config.skipReconnectToLastSession;
	        delete config.skipReconnectToLastSession;
	      }
	      this._config = config;
	      allowConfigCaching = false;
	    }
	    if (!this._enabled) {
	      return Promise.reject({
	        ex: {
	          error: "PULL_DISABLED",
	          error_description: "Push & Pull server is disabled"
	        }
	      });
	    }
	    const now = (/* @__PURE__ */ new Date()).getTime();
	    let oldSession;
	    if (!skipReconnectToLastSession && this._storage) {
	      oldSession = this._storage.get(LS_SESSION, null);
	    }
	    if (Type.isPlainObject(oldSession) && oldSession.hasOwnProperty("ttl") && oldSession.ttl >= now) {
	      this._session.mid = oldSession.mid;
	    }
	    this._starting = true;
	    return this._startingPromise = new Promise((resolve, reject) => {
	      this.loadConfig("client_start").then((config2) => {
	        this.setConfig(
	          config2,
	          allowConfigCaching
	        );
	        this.init();
	        this.updateWatch(true);
	        this.startCheckConfig();
	        this.connect().then(
	          () => resolve(true),
	          (error) => reject(error)
	        );
	      }).catch((error) => {
	        this._starting = false;
	        this.status = PullStatus.Offline;
	        this.stopCheckConfig();
	        this.getLogger().error(`${Text.getDateForLog()}: Pull: could not read push-server config `, error);
	        reject(error);
	      });
	    });
	  }
	  /**
	   * @done
	   * @param disconnectCode
	   * @param disconnectReason
	   */
	  restart(disconnectCode = CloseReasons.NORMAL_CLOSURE, disconnectReason = "manual restart") {
	    if (this._restartTimeout) {
	      clearTimeout(this._restartTimeout);
	      this._restartTimeout = null;
	    }
	    this.getLogger().log(`${Text.getDateForLog()}: Pull: restarting with code ${disconnectCode}`);
	    this.disconnect(
	      disconnectCode,
	      disconnectReason
	    );
	    if (this._storage) {
	      this._storage.remove(LsKeys.PullConfig);
	    }
	    this._config = null;
	    const loadConfigReason = `${disconnectCode}_${disconnectReason.replaceAll(" ", "_")}`;
	    this.loadConfig(loadConfigReason).then(
	      (config) => {
	        this.setConfig(config, true);
	        this.updateWatch();
	        this.startCheckConfig();
	        this.connect().catch((error) => {
	          this.getLogger().error(error);
	        });
	      },
	      (error) => {
	        this.getLogger().error(`${Text.getDateForLog()}: Pull: could not read push-server config `, error);
	        this.status = PullStatus.Offline;
	        if (this._reconnectTimeout) {
	          clearTimeout(this._reconnectTimeout);
	          this._reconnectTimeout = null;
	        }
	        if (error?.status == 401 || error?.status == 403) {
	          this.stopCheckConfig();
	          this.onCustomEvent("onPullError", ["AUTHORIZE_ERROR"]);
	        }
	      }
	    );
	  }
	  /**
	   * @done
	   */
	  stop(disconnectCode = CloseReasons.NORMAL_CLOSURE, disconnectReason = "manual stop") {
	    this.disconnect(
	      disconnectCode,
	      disconnectReason
	    );
	    this.stopCheckConfig();
	  }
	  /**
	   * @done
	   */
	  reconnect(disconnectCode, disconnectReason, delay = 1) {
	    this.disconnect(
	      disconnectCode,
	      disconnectReason
	    );
	    this.scheduleReconnect(
	      delay
	    );
	  }
	  /**
	   * @done
	   * @param lastMessageId
	   */
	  setLastMessageId(lastMessageId) {
	    this._session.mid = lastMessageId;
	  }
	  /**
	   * @done
	   *
	   * Send single message to the specified users.
	   *
	   * @param users User ids of the message receivers.
	   * @param moduleId Name of the module to receive message,
	   * @param command Command name.
	   * @param {object} params Command parameters.
	   * @param [expiry] Message expiry time in seconds.
	   * @return {Promise}
	   */
	  async sendMessage(users, moduleId, command, params, expiry) {
	    const message = {
	      userList: users,
	      body: {
	        module_id: moduleId,
	        command,
	        params
	      },
	      expiry
	    };
	    if (this.isJsonRpc()) {
	      return this._jsonRpcAdapter?.executeOutgoingRpcCommand(
	        RpcMethod.Publish,
	        message
	      );
	    } else {
	      return this.sendMessageBatch([message]);
	    }
	  }
	  /**
	   * @done
	   * Send single message to the specified public channels.
	   *
	   * @param  publicChannels Public ids of the channels to receive message.
	   * @param moduleId Name of the module to receive message,
	   * @param command Command name.
	   * @param {object} params Command parameters.
	   * @param [expiry] Message expiry time in seconds.
	   * @return {Promise}
	   */
	  async sendMessageToChannels(publicChannels, moduleId, command, params, expiry) {
	    const message = {
	      channelList: publicChannels,
	      body: {
	        module_id: moduleId,
	        command,
	        params
	      },
	      expiry
	    };
	    if (this.isJsonRpc()) {
	      return this._jsonRpcAdapter?.executeOutgoingRpcCommand(
	        RpcMethod.Publish,
	        message
	      );
	    } else {
	      return this.sendMessageBatch([message]);
	    }
	  }
	  /**
	   * @done
	   * @param debugFlag
	   */
	  capturePullEvent(debugFlag = true) {
	    this._debug = debugFlag;
	  }
	  /**
	   * @done
	   * @param loggingFlag
	   */
	  enableLogging(loggingFlag = true) {
	    this._sharedConfig.setLoggingEnabled(loggingFlag);
	    this._loggingEnabled = loggingFlag;
	  }
	  /**
	   * Returns list channels that the connection is subscribed to.
	   *
	   * @returns {Promise}
	   */
	  async listChannels() {
	    return this._jsonRpcAdapter?.executeOutgoingRpcCommand(
	      RpcMethod.ListChannels,
	      {}
	    ) || Promise.reject(new Error("jsonRpcAdapter not init"));
	  }
	  /**
	   * @done
	   * Returns "last seen" time in seconds for the users. Result format: Object{userId: int}
	   * If the user is currently connected - will return 0.
	   * If the user if offline - will return diff between current timestamp and last seen timestamp in seconds.
	   * If the user was never online - the record for user will be missing from the result object.
	   *
	   * @param {integer[]} userList List of user ids.
	   * @returns {Promise}
	   */
	  async getUsersLastSeen(userList) {
	    if (!Type.isArray(userList) || !userList.every((item) => typeof item === "number")) {
	      throw new Error("userList must be an array of numbers");
	    }
	    let result = {};
	    return new Promise((resolve, reject) => {
	      this._jsonRpcAdapter?.executeOutgoingRpcCommand(
	        RpcMethod.GetUsersLastSeen,
	        {
	          userList
	        }
	      ).then((response) => {
	        let unresolved = [];
	        for (let i = 0; i < userList.length; i++) {
	          if (!response.hasOwnProperty(userList[i])) {
	            unresolved.push(userList[i]);
	          }
	        }
	        if (unresolved.length === 0) {
	          return resolve(result);
	        }
	        const params = {
	          userIds: unresolved,
	          sendToQueueSever: true
	        };
	        this._restClient.callMethod(
	          "pull.api.user.getLastSeen",
	          params
	        ).then((response2) => {
	          let data = response2.getData().result;
	          for (let userId in data) {
	            result[Number(userId)] = Number(data[userId]);
	          }
	          return resolve(result);
	        }).catch((error) => {
	          this.getLogger().error(error);
	          reject(error);
	        });
	      }).catch((error) => {
	        this.getLogger().error(error);
	        reject(error);
	      });
	    });
	  }
	  /**
	   * @done
	   * Pings server. In case of success promise will be resolved, otherwise - rejected.
	   *
	   * @param {number} timeout Request timeout in seconds
	   * @returns {Promise}
	   */
	  async ping(timeout = 5) {
	    return this._jsonRpcAdapter?.executeOutgoingRpcCommand(
	      RpcMethod.Ping,
	      {},
	      timeout
	    );
	  }
	  /**
	   * @done
	   * @param userId {number}
	   * @param callback {UserStatusCallback}
	   * @returns {Promise}
	   */
	  async subscribeUserStatusChange(userId, callback) {
	    return new Promise((resolve, reject) => {
	      this._jsonRpcAdapter?.executeOutgoingRpcCommand(
	        RpcMethod.SubscribeStatusChange,
	        {
	          userId
	        }
	      ).then(() => {
	        if (!this._userStatusCallbacks[userId]) {
	          this._userStatusCallbacks[userId] = [];
	        }
	        if (Type.isFunction(callback)) {
	          this._userStatusCallbacks[userId].push(callback);
	        }
	        return resolve();
	      }).catch((err) => reject(err));
	    });
	  }
	  /**
	   * @done
	   * @param {number} userId
	   * @param {UserStatusCallback} callback
	   * @returns {Promise}
	   */
	  async unsubscribeUserStatusChange(userId, callback) {
	    if (this._userStatusCallbacks[userId]) {
	      this._userStatusCallbacks[userId] = this._userStatusCallbacks[userId].filter(
	        (cb) => cb !== callback
	      );
	      if (this._userStatusCallbacks[userId].length === 0) {
	        return this._jsonRpcAdapter?.executeOutgoingRpcCommand(
	          RpcMethod.UnsubscribeStatusChange,
	          {
	            userId
	          }
	        );
	      }
	    }
	    return Promise.resolve();
	  }
	  // endregion ////
	  // region Get ////
	  /**
	   * @done
	   */
	  getRevision() {
	    return this._config && this._config.api ? this._config.api.revision_web : null;
	  }
	  /**
	   * @done
	   */
	  getServerVersion() {
	    return this._config && this._config.server ? this._config.server.version : 0;
	  }
	  /**
	   * @done
	   */
	  getServerMode() {
	    return this._config && this._config.server ? this._config.server.mode : null;
	  }
	  /**
	   * @done
	   */
	  getConfig() {
	    return this._config;
	  }
	  /**
	   * @done
	   */
	  getDebugInfo() {
	    if (!JSON || !JSON.stringify) {
	      return {};
	    }
	    let configDump;
	    if (this._config && this._config.channels) {
	      configDump = {
	        ChannelID: this._config.channels.private?.id || "n/a",
	        ChannelDie: this._config.channels.private?.end || "n/a",
	        ChannelDieShared: this._config.channels.shared?.end || "n/a"
	      };
	    } else {
	      configDump = {
	        ConfigError: "config is not loaded"
	      };
	    }
	    let websocketMode = "-";
	    if (this._connectors.webSocket && this._connectors.webSocket?.socket) {
	      if (this.isJsonRpc()) {
	        websocketMode = "json-rpc";
	      } else {
	        websocketMode = this._connectors.webSocket?.socket?.url.search("binaryMode=true") != -1 ? "protobuf" : "text";
	      }
	    }
	    return {
	      "UserId": this._userId + (this._userId > 0 ? "" : "(guest)"),
	      "Guest userId": this._guestMode && this._guestUserId !== 0 ? this._guestUserId : "-",
	      "Browser online": navigator.onLine ? "Y" : "N",
	      "Connect": this.isConnected() ? "Y" : "N",
	      "Server type": this.isSharedMode() ? "cloud" : "local",
	      "WebSocket supported": this.isWebSocketSupported() ? "Y" : "N",
	      "WebSocket connected": this._connectors.webSocket && this._connectors.webSocket.connected ? "Y" : "N",
	      "WebSocket mode": websocketMode,
	      "Try connect": this._reconnectTimeout ? "Y" : "N",
	      "Try number": this._connectionAttempt,
	      "Path": this.connector?.connectionPath || "-",
	      ...configDump,
	      "Last message": this._session.mid ? this._session.mid : "-",
	      "Session history": this._session.history,
	      "Watch tags": this._watchTagsQueue.entries()
	    };
	  }
	  /**
	   * @process
	   * @param connectionType
	   */
	  getConnectionPath(connectionType) {
	    let path;
	    let params = {};
	    switch (connectionType) {
	      case ConnectionType.WebSocket:
	        path = this._isSecure ? this._config?.server.websocket_secure : this._config?.server.websocket;
	        break;
	      case ConnectionType.LongPolling:
	        path = this._isSecure ? this._config?.server.long_pooling_secure : this._config?.server.long_polling;
	        break;
	      default:
	        throw new Error(`Unknown connection type ${connectionType}`);
	    }
	    if (!Type.isStringFilled(path)) {
	      throw new Error(`Empty path`);
	    }
	    if (typeof this._config?.jwt === "string" && this._config?.jwt !== "") {
	      params["token"] = this._config?.jwt;
	    } else {
	      let channels = [];
	      if (this._config?.channels?.private) {
	        channels.push(this._config.channels.private?.id || "");
	      }
	      if (this._config?.channels.private?.id) {
	        channels.push(this._config.channels.private.id);
	      }
	      if (this._config?.channels.shared?.id) {
	        channels.push(this._config.channels.shared.id);
	      }
	      if (channels.length === 0) {
	        throw new Error(`Empty channels`);
	      }
	      params["CHANNEL_ID"] = channels.join("/");
	    }
	    if (this.isJsonRpc()) {
	      params.jsonRpc = "true";
	    } else if (this.isProtobufSupported()) {
	      params.binaryMode = "true";
	    }
	    if (this.isSharedMode()) {
	      if (!this._config?.clientId) {
	        throw new Error("Push-server is in shared mode, but clientId is not set");
	      }
	      params.clientId = this._config.clientId;
	    }
	    if (this._session.mid) {
	      params.mid = this._session.mid;
	    }
	    if (this._session.tag) {
	      params.tag = this._session.tag;
	    }
	    if (this._session.time) {
	      params.time = this._session.time;
	    }
	    params.revision = REVISION;
	    return `${path}?${Text.buildQueryString(params)}`;
	  }
	  /**
	   * @process
	   */
	  getPublicationPath() {
	    const path = this._isSecure ? this._config?.server.publish_secure : this._config?.server.publish;
	    if (!path) {
	      return "";
	    }
	    let channels = [];
	    if (this._config?.channels.private?.id) {
	      channels.push(this._config.channels.private.id);
	    }
	    if (this._config?.channels.shared?.id) {
	      channels.push(this._config.channels.shared.id);
	    }
	    const params = {
	      CHANNEL_ID: channels.join("/")
	    };
	    return path + "?" + Text.buildQueryString(params);
	  }
	  // endregion ////
	  // region Is* ////
	  /**
	   * @done
	   */
	  isConnected() {
	    return this.connector ? this.connector.connected : false;
	  }
	  /**
	   * @done
	   */
	  isWebSocketSupported() {
	    return typeof window.WebSocket !== "undefined";
	  }
	  /**
	   * @done
	   */
	  isWebSocketAllowed() {
	    if (this._sharedConfig.isWebSocketBlocked()) {
	      return false;
	    }
	    return this.isWebSocketEnabled();
	  }
	  /**
	   * @done
	   */
	  isWebSocketEnabled() {
	    if (!this.isWebSocketSupported()) {
	      return false;
	    }
	    if (!this._config) {
	      return false;
	    }
	    if (!this._config.server) {
	      return false;
	    }
	    return this._config.server.websocket_enabled;
	  }
	  /**
	   * @done
	   */
	  isPublishingSupported() {
	    return this.getServerVersion() > 3;
	  }
	  /**
	   * @done
	   */
	  isPublishingEnabled() {
	    if (!this.isPublishingSupported()) {
	      return false;
	    }
	    return this._config?.server.publish_enabled === true;
	  }
	  /**
	   * @done
	   */
	  isProtobufSupported() {
	    return this.getServerVersion() == 4 && !Browser.isIE();
	  }
	  /**
	   * @done
	   */
	  isJsonRpc() {
	    return this.getServerVersion() >= 5;
	  }
	  /**
	   * @done
	   */
	  isSharedMode() {
	    return this.getServerMode() === ServerMode.Shared;
	  }
	  // endregion ////
	  // region Events ////
	  /**
	   * @dones
	   * @param {TypePullClientEmitConfig} params
	   * @returns {boolean}
	   */
	  emit(params) {
	    if (params.type == SubscriptionType.Server || params.type == SubscriptionType.Client) {
	      if (typeof this._subscribers[params.type] === "undefined") {
	        this._subscribers[params.type] = {};
	      }
	      if (typeof params.moduleId === "undefined") {
	        throw new Error(`${Text.getDateForLog()}: Pull.emit: parameter moduleId is not specified`);
	      }
	      if (typeof this._subscribers[params.type][params.moduleId] === "undefined") {
	        this._subscribers[params.type][params.moduleId] = {
	          callbacks: [],
	          commands: {}
	        };
	      }
	      if (this._subscribers[params.type][params.moduleId]["callbacks"].length > 0) {
	        this._subscribers[params.type][params.moduleId]["callbacks"].forEach((callback) => {
	          callback(
	            params.data,
	            {
	              type: params.type,
	              moduleId: params.moduleId
	            }
	          );
	        });
	      }
	      if (!(typeof params.data === "undefined") && !(typeof params.data["command"] === "undefined") && this._subscribers[params.type][params.moduleId]["commands"][params.data["command"]] && this._subscribers[params.type][params.moduleId]["commands"][params.data["command"]].length > 0) {
	        this._subscribers[params.type][params.moduleId]["commands"][params.data["command"]].forEach((callback) => {
	          if (typeof params.data === "undefined") {
	            return;
	          }
	          callback(
	            params.data["params"],
	            params.data["extra"],
	            params.data["command"],
	            {
	              type: params.type,
	              moduleId: params.moduleId
	            }
	          );
	        });
	      }
	      return true;
	    } else {
	      if (typeof this._subscribers[params.type] === "undefined") {
	        this._subscribers[params.type] = [];
	      }
	      if (this._subscribers[params.type].length <= 0) {
	        return true;
	      }
	      this._subscribers[params.type].forEach((callback) => {
	        callback(
	          params.data,
	          {
	            type: params.type
	          }
	        );
	      });
	      return true;
	    }
	  }
	  /**
	   * @process
	   *
	   * @param message
	   * @private
	   */
	  broadcastMessage(message) {
	    const moduleId = message.module_id = message.module_id.toLowerCase();
	    const command = message.command;
	    if (!message.extra) {
	      message.extra = {};
	    }
	    if (message.extra.server_time_unix) {
	      message.extra.server_time_ago = ((/* @__PURE__ */ new Date()).getTime() - message.extra.server_time_unix * 1e3) / 1e3 - (this._config?.server.timeShift ? this._config?.server.timeShift : 0);
	      message.extra.server_time_ago = message.extra.server_time_ago > 0 ? message.extra.server_time_ago : 0;
	    }
	    this.logMessage(message);
	    try {
	      if (message.extra.sender && message.extra.sender.type === SenderType.Client) {
	        this.onCustomEvent("onPullClientEvent-" + moduleId, [command, message.params, message.extra], true);
	        this.onCustomEvent("onPullClientEvent", [moduleId, command, message.params, message.extra], true);
	        this.emit({
	          type: SubscriptionType.Client,
	          moduleId,
	          data: {
	            command,
	            params: Type.clone(message.params),
	            extra: Type.clone(message.extra)
	          }
	        });
	      } else if (moduleId === "pull") {
	        this.handleInternalPullEvent(command, message);
	      } else if (moduleId == "online") {
	        if ((message?.extra?.server_time_ago || 0) < 240) {
	          this.onCustomEvent("onPullOnlineEvent", [command, message.params, message.extra], true);
	          this.emit({
	            type: SubscriptionType.Online,
	            data: {
	              command,
	              params: Type.clone(message.params),
	              extra: Type.clone(message.extra)
	            }
	          });
	        }
	        if (command === "userStatusChange") {
	          this.emitUserStatusChange(
	            message.params.user_id,
	            message.params.online
	          );
	        }
	      } else {
	        this.onCustomEvent("onPullEvent-" + moduleId, [command, message.params, message.extra], true);
	        this.onCustomEvent("onPullEvent", [moduleId, command, message.params, message.extra], true);
	        this.emit({
	          type: SubscriptionType.Server,
	          moduleId,
	          data: {
	            command,
	            params: Type.clone(message.params),
	            extra: Type.clone(message.extra)
	          }
	        });
	      }
	    } catch (event) {
	      this.getLogger().warn(
	        "\n========= PULL ERROR ===========\nError type: broadcastMessages execute error\nError event: ",
	        event,
	        "\nMessage: ",
	        message,
	        "\n================================\n"
	      );
	    }
	    if (message.extra && message.extra.revision_web) {
	      this.checkRevision(Text.toInteger(message.extra.revision_web));
	    }
	  }
	  /**
	   * @process
	   *
	   * @param messages
	   * @private
	   */
	  broadcastMessages(messages) {
	    messages.forEach((message) => this.broadcastMessage(message));
	  }
	  // endregion ////
	  // region sendMessage ////
	  /**
	   * @done
	   * Sends batch of messages to the multiple public channels.
	   *
	   * @param messageBatchList Array of messages to send.
	   * @return void
	   */
	  async sendMessageBatch(messageBatchList) {
	    if (!this.isPublishingEnabled()) {
	      this.getLogger().error(`Client publishing is not supported or is disabled`);
	      return Promise.reject(new Error(`Client publishing is not supported or is disabled`));
	    }
	    if (this.isJsonRpc()) {
	      let rpcRequest = this._jsonRpcAdapter?.createPublishRequest(messageBatchList);
	      this.connector?.send(JSON.stringify(rpcRequest));
	      return Promise.resolve(true);
	    } else {
	      let userIds = {};
	      for (let i = 0; i < messageBatchList.length; i++) {
	        const messageBatch = messageBatchList[i];
	        if (typeof messageBatch.userList !== "undefined") {
	          const cnt = messageBatch.userList.length;
	          for (let j = 0; j < cnt; j++) {
	            const userId = Number(messageBatch.userList[j]);
	            userIds[userId] = userId;
	          }
	        }
	      }
	      this._channelManager?.getPublicIds(Object.values(userIds)).then((publicIds) => {
	        const response = this.connector?.send(
	          this.encodeMessageBatch(
	            messageBatchList,
	            publicIds
	          )
	        );
	        return Promise.resolve(response);
	      });
	    }
	  }
	  /**
	   * @done
	   * @param messageBatchList
	   * @param publicIds
	   */
	  encodeMessageBatch(messageBatchList, publicIds) {
	    let messages = [];
	    messageBatchList.forEach((messageFields) => {
	      const messageBody = messageFields.body;
	      let receivers = [];
	      if (messageFields.userList) {
	        receivers = this.createMessageReceivers(
	          messageFields.userList,
	          publicIds
	        );
	      }
	      if (messageFields.channelList) {
	        if (!Type.isArray(messageFields.channelList)) {
	          throw new Error("messageFields.publicChannels must be an array");
	        }
	        messageFields.channelList.forEach((publicChannel) => {
	          let publicId;
	          let signature;
	          if (typeof publicChannel === "string" && publicChannel.includes(".")) {
	            const fields = publicChannel.toString().split(".");
	            publicId = fields[0];
	            signature = fields[1];
	          } else if (typeof publicChannel === "object" && "publicId" in publicChannel && "signature" in publicChannel) {
	            publicId = publicChannel?.publicId;
	            signature = publicChannel?.signature;
	          } else {
	            throw new Error(`Public channel MUST be either a string, formatted like "{publicId}.{signature}" or an object with fields 'publicId' and 'signature'`);
	          }
	          receivers.push(Receiver.create({
	            id: this.encodeId(publicId),
	            signature: this.encodeId(signature)
	          }));
	        });
	      }
	      const message = IncomingMessage.create({
	        receivers,
	        body: JSON.stringify(messageBody),
	        expiry: messageFields.expiry || 0
	      });
	      messages.push(message);
	    });
	    const requestBatch = RequestBatch.create({
	      requests: [{
	        incomingMessages: {
	          messages
	        }
	      }]
	    });
	    return RequestBatch.encode(requestBatch).finish();
	  }
	  /**
	   * @done
	   * @memo fix return type
	   * @param users
	   * @param publicIds
	   */
	  createMessageReceivers(users, publicIds) {
	    let result = [];
	    for (let i = 0; i < users.length; i++) {
	      let userId = users[i];
	      if (!publicIds[userId] || !publicIds[userId].publicId) {
	        throw new Error(`Could not determine public id for user ${userId}`);
	      }
	      result.push(Receiver.create({
	        id: this.encodeId(publicIds[userId].publicId),
	        signature: this.encodeId(publicIds[userId].signature)
	      }));
	    }
	    return result;
	  }
	  // endregion ////
	  // region _userStatusCallbacks ////
	  /**
	   * @done
	   * @param userId
	   * @param isOnline
	   * @private
	   */
	  emitUserStatusChange(userId, isOnline) {
	    if (this._userStatusCallbacks[userId]) {
	      this._userStatusCallbacks[userId].forEach((callback) => callback({
	        userId,
	        isOnline
	      }));
	    }
	  }
	  /**
	   * @done
	   * @private
	   */
	  restoreUserStatusSubscription() {
	    for (const userId in this._userStatusCallbacks) {
	      if (this._userStatusCallbacks.hasOwnProperty(userId) && this._userStatusCallbacks[userId].length > 0) {
	        this._jsonRpcAdapter?.executeOutgoingRpcCommand(
	          RpcMethod.SubscribeStatusChange,
	          {
	            userId
	          }
	        );
	      }
	    }
	  }
	  // endregion ////
	  // region Config ////
	  /**
	   * @done
	   *
	   * @param logTag
	   * @private
	   */
	  async loadConfig(logTag) {
	    if (!this._config) {
	      this._config = Object.assign({}, EmptyConfig);
	      let config;
	      if (this._storage) {
	        config = this._storage.get(LsKeys.PullConfig, null);
	      }
	      if (this.isConfigActual(config) && this.checkRevision(config.api.revision_web)) {
	        return Promise.resolve(config);
	      } else if (this._storage) {
	        this._storage.remove(LsKeys.PullConfig);
	      }
	    } else if (this.isConfigActual(this._config) && this.checkRevision(this._config.api.revision_web)) {
	      return Promise.resolve(this._config);
	    } else {
	      this._config = Object.assign({}, EmptyConfig);
	    }
	    return new Promise((resolve, reject) => {
	      this._restClient.getHttpClient().setLogTag(logTag);
	      this._restClient.callMethod(
	        this._configGetMethod,
	        {
	          CACHE: "N"
	        }
	      ).then((response) => {
	        const data = response.getData().result;
	        let timeShift;
	        timeShift = Math.floor(((/* @__PURE__ */ new Date()).getTime() - new Date(data.serverTime).getTime()) / 1e3);
	        delete data.serverTime;
	        let config = Object.assign({}, data);
	        config.server.timeShift = timeShift;
	        resolve(config);
	      }).catch((error) => {
	        if (error?.answerError?.error === "AUTHORIZE_ERROR" || error?.answerError?.error === "WRONG_AUTH_TYPE") {
	          error.status = 403;
	        }
	        reject(error);
	      }).finally(() => {
	        this._restClient.getHttpClient().clearLogTag();
	      });
	    });
	  }
	  /**
	   * @done
	   * @param config
	   */
	  isConfigActual(config) {
	    if (!Type.isPlainObject(config)) {
	      return false;
	    }
	    if (Number(config.server.config_timestamp) !== this._configTimestamp) {
	      return false;
	    }
	    const now = /* @__PURE__ */ new Date();
	    if (Type.isNumber(config.exp) && config.exp > 0 && config.exp < now.getTime() / 1e3) {
	      return false;
	    }
	    const channelCount = Object.keys(config.channels).length;
	    if (channelCount === 0) {
	      return false;
	    }
	    for (let channelType in config.channels) {
	      if (!config.channels.hasOwnProperty(channelType)) {
	        continue;
	      }
	      const channel = config.channels[channelType];
	      const channelEnd = new Date(channel.end);
	      if (channelEnd < now) {
	        return false;
	      }
	    }
	    return true;
	  }
	  /**
	   * @done
	   * @private
	   */
	  startCheckConfig() {
	    if (this._checkInterval) {
	      clearInterval(this._checkInterval);
	      this._checkInterval = null;
	    }
	    this._checkInterval = setInterval(
	      this.checkConfig.bind(this),
	      CONFIG_CHECK_INTERVAL
	    );
	  }
	  /**
	   * @done
	   */
	  stopCheckConfig() {
	    if (this._checkInterval) {
	      clearInterval(this._checkInterval);
	    }
	    this._checkInterval = null;
	  }
	  /**
	   * @done
	   * @private
	   */
	  checkConfig() {
	    if (this.isConfigActual(this._config)) {
	      if (!this.checkRevision(Text.toInteger(this._config?.api.revision_web))) {
	        return false;
	      }
	    } else {
	      this.logToConsole("Stale config detected. Restarting");
	      this.restart(
	        CloseReasons.CONFIG_EXPIRED,
	        "config expired"
	      );
	    }
	    return true;
	  }
	  /**
	   * @done
	   *
	   * @param config
	   * @param allowCaching
	   * @private
	   */
	  setConfig(config, allowCaching) {
	    for (let key in config) {
	      if (config.hasOwnProperty(key) && this._config?.hasOwnProperty(key)) {
	        this._config[key] = config[key];
	      }
	    }
	    if (config.publicChannels) {
	      this.setPublicIds(
	        Array.from(Object.values(config.publicChannels))
	      );
	    }
	    this._configTimestamp = Number(config.server.config_timestamp);
	    if (this._storage && allowCaching) {
	      try {
	        this._storage.set(
	          LsKeys.PullConfig,
	          config
	        );
	      } catch (error) {
	        if (localStorage && localStorage.removeItem) {
	          localStorage.removeItem("history");
	        }
	        this.getLogger().error(`${Text.getDateForLog()}: Pull: Could not cache config in local storage. Error: `, error);
	      }
	    }
	  }
	  /**
	   * @done
	   */
	  setPublicIds(publicIds) {
	    this._channelManager.setPublicIds(publicIds);
	  }
	  /**
	   * @done
	   * @param serverRevision
	   * @private
	   */
	  checkRevision(serverRevision) {
	    if (this._skipCheckRevision) {
	      return true;
	    }
	    if (serverRevision > 0 && serverRevision !== REVISION) {
	      this._enabled = false;
	      this.showNotification("PULL_OLD_REVISION");
	      this.disconnect(
	        CloseReasons.NORMAL_CLOSURE,
	        "check_revision"
	      );
	      this.onCustomEvent("onPullRevisionUp", [serverRevision, REVISION]);
	      this.emit({
	        type: SubscriptionType.Revision,
	        data: {
	          server: serverRevision,
	          client: REVISION
	        }
	      });
	      this.logToConsole(`Pull revision changed from ${REVISION} to ${serverRevision}. Reload required`);
	      return false;
	    }
	    return true;
	  }
	  // endregion ////
	  // region Connect|ReConnect|DisConnect ////
	  /**
	   * @done
	   */
	  disconnect(disconnectCode, disconnectReason) {
	    if (this.connector) {
	      this._isManualDisconnect = true;
	      this.connector.disconnect(
	        disconnectCode,
	        disconnectReason
	      );
	    }
	  }
	  /**
	   * @done
	   */
	  restoreWebSocketConnection() {
	    if (this._connectionType === ConnectionType.WebSocket) {
	      return;
	    }
	    this._connectors.webSocket?.connect();
	  }
	  /**
	   * @done
	   * @param connectionDelay
	   * @private
	   */
	  scheduleReconnect(connectionDelay = 0) {
	    if (!this._enabled) {
	      return;
	    }
	    if (!connectionDelay) {
	      {
	        connectionDelay = this.getConnectionAttemptDelay(this._connectionAttempt);
	      }
	    }
	    if (this._reconnectTimeout) {
	      clearTimeout(this._reconnectTimeout);
	      this._reconnectTimeout = null;
	    }
	    this.logToConsole(
	      `Pull: scheduling reconnection in ${connectionDelay} seconds; attempt # ${this._connectionAttempt}`
	    );
	    this._reconnectTimeout = setTimeout(
	      () => {
	        this.connect().catch((error) => {
	          this.getLogger().error(error);
	        });
	      },
	      connectionDelay * 1e3
	    );
	  }
	  /**
	   * @done
	   * @private
	   */
	  scheduleRestoreWebSocketConnection() {
	    this.logToConsole(
	      `Pull: scheduling restoration of websocket connection in ${RESTORE_WEBSOCKET_TIMEOUT} seconds`
	    );
	    if (this._restoreWebSocketTimeout) {
	      return;
	    }
	    this._restoreWebSocketTimeout = setTimeout(
	      () => {
	        this._restoreWebSocketTimeout = 0;
	        this.restoreWebSocketConnection();
	      },
	      RESTORE_WEBSOCKET_TIMEOUT * 1e3
	    );
	  }
	  /**
	   * @done
	   * @returns {Promise}
	   */
	  async connect() {
	    if (!this._enabled) {
	      return Promise.reject();
	    }
	    if (this.connector?.connected) {
	      return Promise.resolve();
	    }
	    if (this._reconnectTimeout) {
	      clearTimeout(this._reconnectTimeout);
	      this._reconnectTimeout = null;
	    }
	    this.status = PullStatus.Connecting;
	    this._connectionAttempt++;
	    return new Promise((resolve, reject) => {
	      this._connectPromise = {
	        resolve,
	        reject
	      };
	      this.connector?.connect();
	    });
	  }
	  /**
	   * @done
	   * @param disconnectCode
	   * @param disconnectReason
	   * @param restartDelay
	   * @private
	   */
	  scheduleRestart(disconnectCode, disconnectReason, restartDelay = 0) {
	    if (this._restartTimeout) {
	      clearTimeout(this._restartTimeout);
	      this._restartTimeout = null;
	    }
	    if (restartDelay < 1) {
	      restartDelay = Math.ceil(Math.random() * 30) + 5;
	    }
	    this._restartTimeout = setTimeout(
	      () => this.restart(disconnectCode, disconnectReason),
	      restartDelay * 1e3
	    );
	  }
	  // endregion ////
	  // region Handlers ////
	  /**
	   * @done
	   *
	   * @param messageFields
	   * @private
	   */
	  handleRpcIncomingMessage(messageFields) {
	    this._session.mid = messageFields.mid;
	    let body = messageFields.body;
	    if (!messageFields.body.extra) {
	      body.extra = {};
	    }
	    body.extra.sender = messageFields.sender;
	    if ("user_params" in messageFields && Type.isPlainObject(messageFields.user_params)) {
	      Object.assign(body.params, messageFields.user_params);
	    }
	    if ("dictionary" in messageFields && Type.isPlainObject(messageFields.dictionary)) {
	      Object.assign(body.params, messageFields.dictionary);
	    }
	    if (this.checkDuplicate(messageFields.mid)) {
	      this.addMessageToStat(body);
	      this.trimDuplicates();
	      this.broadcastMessage(body);
	    }
	    this.connector?.send(`mack:${messageFields.mid}`);
	    return {};
	  }
	  /**
	   * @done
	   * @param events
	   * @private
	   */
	  handleIncomingEvents(events) {
	    let messages = [];
	    if (events.length === 0) {
	      this._session.mid = null;
	      return;
	    }
	    for (let i = 0; i < events.length; i++) {
	      let event = events[i];
	      this.updateSessionFromEvent(event);
	      if (event.mid && !this.checkDuplicate(event.mid)) {
	        continue;
	      }
	      this.addMessageToStat(
	        event.text
	      );
	      messages.push(event.text);
	    }
	    this.trimDuplicates();
	    this.broadcastMessages(messages);
	  }
	  /**
	   * @done
	   * @param event
	   * @private
	   */
	  updateSessionFromEvent(event) {
	    this._session.mid = event.mid || null;
	    this._session.tag = event.tag || null;
	    this._session.time = event.time || null;
	  }
	  /**
	   * @process
	   *
	   * @param command
	   * @param message
	   * @private
	   */
	  handleInternalPullEvent(command, message) {
	    switch (command.toUpperCase()) {
	      case SystemCommands.CHANNEL_EXPIRE: {
	        if (message.params.action === "reconnect") {
	          const typeChanel = message.params?.channel.type;
	          if (typeChanel === "private" && this._config?.channels?.private) {
	            this._config.channels.private = message.params.new_channel;
	            this.logToConsole(`Pull: new config for ${message.params.channel.type} channel set: ${this._config.channels.private}`);
	          }
	          if (typeChanel === "shared" && this._config?.channels?.shared) {
	            this._config.channels.shared = message.params.new_channel;
	            this.logToConsole(`Pull: new config for ${message.params.channel.type} channel set: ${this._config.channels.shared}`);
	          }
	          this.reconnect(
	            CloseReasons.CONFIG_REPLACED,
	            "config was replaced"
	          );
	        } else {
	          this.restart(
	            CloseReasons.CHANNEL_EXPIRED,
	            "channel expired received"
	          );
	        }
	        break;
	      }
	      case SystemCommands.CONFIG_EXPIRE: {
	        this.restart(
	          CloseReasons.CONFIG_EXPIRED,
	          "config expired received"
	        );
	        break;
	      }
	      case SystemCommands.SERVER_RESTART: {
	        this.reconnect(
	          CloseReasons.SERVER_RESTARTED,
	          "server was restarted",
	          15
	        );
	        break;
	      }
	    }
	  }
	  // region Handlers For Message ////
	  /**
	   * @done
	   * @param response
	   * @private
	   */
	  onIncomingMessage(response) {
	    if (this.isJsonRpc()) {
	      response === JSON_RPC_PING ? this.onJsonRpcPing() : this._jsonRpcAdapter?.parseJsonRpcMessage(
	        response
	      );
	    } else {
	      const events = this.extractMessages(response);
	      this.handleIncomingEvents(events);
	    }
	  }
	  // region onLongPolling ////
	  /**
	   * @done
	   */
	  onLongPollingOpen() {
	    this._unloading = false;
	    this._starting = false;
	    this._connectionAttempt = 0;
	    this._isManualDisconnect = false;
	    this.status = PullStatus.Online;
	    this.logToConsole("Pull: Long polling connection with push-server opened");
	    if (this.isWebSocketEnabled()) {
	      this.scheduleRestoreWebSocketConnection();
	    }
	    if (this._connectPromise) {
	      this._connectPromise.resolve({});
	    }
	  }
	  /**
	   * @done
	   * @param response
	   * @private
	   */
	  onLongPollingDisconnect(response) {
	    if (this._connectionType === ConnectionType.LongPolling) {
	      this.status = PullStatus.Offline;
	    }
	    this.logToConsole(`Pull: Long polling connection with push-server closed. Code: ${response.code}, reason: ${response.reason}`);
	    if (!this._isManualDisconnect) {
	      this.scheduleReconnect();
	    }
	    this._isManualDisconnect = false;
	    this.clearPingWaitTimeout();
	  }
	  /**
	   * @done
	   * @param error
	   */
	  onLongPollingError(error) {
	    this._starting = false;
	    if (this._connectionType === ConnectionType.LongPolling) {
	      this.status = PullStatus.Offline;
	    }
	    this.getLogger().error(`${Text.getDateForLog()}: Pull: Long polling connection error `, error);
	    this.scheduleReconnect();
	    if (this._connectPromise) {
	      this._connectPromise.reject(error);
	    }
	    this.clearPingWaitTimeout();
	  }
	  // endregion ////
	  // region onWebSocket ////
	  /**
	   * @done
	   * @param response
	   * @private
	   */
	  onWebSocketBlockChanged(response) {
	    const isWebSocketBlocked = response.isWebSocketBlocked;
	    if (isWebSocketBlocked && this._connectionType === ConnectionType.WebSocket && !this.isConnected()) {
	      if (this._reconnectTimeout) {
	        clearTimeout(this._reconnectTimeout);
	        this._reconnectTimeout = null;
	      }
	      this._connectionAttempt = 0;
	      this._connectionType = ConnectionType.LongPolling;
	      this.scheduleReconnect(1);
	    } else if (!isWebSocketBlocked && this._connectionType === ConnectionType.LongPolling) {
	      if (this._reconnectTimeout) {
	        clearTimeout(this._reconnectTimeout);
	        this._reconnectTimeout = null;
	      }
	      if (this._restoreWebSocketTimeout) {
	        clearTimeout(this._restoreWebSocketTimeout);
	        this._restoreWebSocketTimeout = null;
	      }
	      this._connectionAttempt = 0;
	      this._connectionType = ConnectionType.WebSocket;
	      this.scheduleReconnect(1);
	    }
	  }
	  /**
	   * @done
	   */
	  onWebSocketOpen() {
	    this._unloading = false;
	    this._starting = false;
	    this._connectionAttempt = 0;
	    this._isManualDisconnect = false;
	    this.status = PullStatus.Online;
	    this._sharedConfig.setWebSocketBlocked(false);
	    this._sharedConfig.setLongPollingBlocked(true);
	    if (this._connectionType == ConnectionType.LongPolling) {
	      this._connectionType = ConnectionType.WebSocket;
	      this._connectors.longPolling?.disconnect(
	        CloseReasons.CONFIG_REPLACED,
	        "Fire at onWebSocketOpen"
	      );
	    }
	    if (this._restoreWebSocketTimeout) {
	      clearTimeout(this._restoreWebSocketTimeout);
	      this._restoreWebSocketTimeout = null;
	    }
	    this.logToConsole("Pull: Websocket connection with push-server opened");
	    if (this._connectPromise) {
	      this._connectPromise.resolve({});
	    }
	    this.restoreUserStatusSubscription();
	  }
	  /**
	   * @done
	   * @param response
	   * @private
	   */
	  onWebSocketDisconnect(response) {
	    if (this._connectionType === ConnectionType.WebSocket) {
	      this.status = PullStatus.Offline;
	    }
	    this.logToConsole(`Pull: Websocket connection with push-server closed. Code: ${response.code}, reason: ${response.reason}`, true);
	    if (!this._isManualDisconnect) {
	      if (response.code == CloseReasons.WRONG_CHANNEL_ID) {
	        this.scheduleRestart(
	          CloseReasons.WRONG_CHANNEL_ID,
	          "wrong channel signature"
	        );
	      } else {
	        this.scheduleReconnect();
	      }
	    }
	    this._sharedConfig.setLongPollingBlocked(true);
	    this._isManualDisconnect = false;
	    this.clearPingWaitTimeout();
	  }
	  /**
	   * @done
	   * @param error
	   */
	  onWebSocketError(error) {
	    this._starting = false;
	    if (this._connectionType === ConnectionType.WebSocket) {
	      this.status = PullStatus.Offline;
	    }
	    this.getLogger().error(`${Text.getDateForLog()}: Pull: WebSocket connection error `, error);
	    this.scheduleReconnect();
	    if (this._connectPromise) {
	      this._connectPromise.reject(error);
	    }
	    this.clearPingWaitTimeout();
	  }
	  // endregion ////
	  // endregion ////
	  // endregion ////
	  // region extractMessages ////
	  /**
	   * @done
	   * @param pullEvent
	   * @private
	   */
	  extractMessages(pullEvent) {
	    if (pullEvent instanceof ArrayBuffer) {
	      return this.extractProtobufMessages(pullEvent);
	    } else if (Type.isStringFilled(pullEvent)) {
	      return this.extractPlainTextMessages(pullEvent);
	    }
	    throw new Error("Error pullEvent type");
	  }
	  /**
	   * @done
	   * @param pullEvent
	   * @private
	   */
	  extractProtobufMessages(pullEvent) {
	    let result = [];
	    try {
	      let responseBatch = ResponseBatch.decode(new Uint8Array(pullEvent));
	      for (let i = 0; i < responseBatch.responses.length; i++) {
	        let response = responseBatch.responses[i];
	        if (response.command !== "outgoingMessages") {
	          continue;
	        }
	        let messages = response.outgoingMessages.messages;
	        for (let m = 0; m < messages.length; m++) {
	          const message = messages[m];
	          let messageFields;
	          try {
	            messageFields = JSON.parse(message.body);
	          } catch (error) {
	            this.getLogger().error(`${Text.getDateForLog()}: Pull: Could not parse message body `, error);
	            continue;
	          }
	          if (!messageFields.extra) {
	            messageFields.extra = {};
	          }
	          messageFields.extra.sender = {
	            type: message.sender.type
	          };
	          if (message.sender.id instanceof Uint8Array) {
	            messageFields.extra.sender.id = this.decodeId(message.sender.id);
	          }
	          const compatibleMessage = {
	            mid: this.decodeId(message.id),
	            text: messageFields
	          };
	          result.push(compatibleMessage);
	        }
	      }
	    } catch (error) {
	      this.getLogger().error(`${Text.getDateForLog()}: Pull: Could not parse message `, error);
	    }
	    return result;
	  }
	  /**
	   * @done
	   * @param pullEvent
	   * @private
	   */
	  extractPlainTextMessages(pullEvent) {
	    let result = [];
	    const dataArray = pullEvent.match(/#!NGINXNMS!#(.*?)#!NGINXNME!#/gm);
	    if (dataArray === null) {
	      const text = `
========= PULL ERROR ===========
Error type: parseResponse error parsing message

Data string: ${pullEvent}
================================

`;
	      this.getLogger().warn(text);
	      return [];
	    }
	    for (let i = 0; i < dataArray.length; i++) {
	      dataArray[i] = dataArray[i].substring(12, dataArray[i].length - 12);
	      if (dataArray[i].length <= 0) {
	        continue;
	      }
	      let data;
	      try {
	        data = JSON.parse(dataArray[i]);
	      } catch (error) {
	        continue;
	      }
	      result.push(data);
	    }
	    return result;
	  }
	  /**
	   * @done
	   * Converts message id from byte[] to string
	   * @param {Uint8Array} encodedId
	   * @return {string}
	   */
	  decodeId(encodedId) {
	    let result = "";
	    for (let i = 0; i < encodedId.length; i++) {
	      const hexByte = encodedId[i].toString(16);
	      if (hexByte.length === 1) {
	        result += "0";
	      }
	      result += hexByte;
	    }
	    return result;
	  }
	  /**
	   * @done
	   * Converts message id from hex-encoded string to byte[]
	   * @param {string} id Hex-encoded string.
	   * @return {Uint8Array}
	   */
	  encodeId(id) {
	    if (!id) {
	      return new Uint8Array();
	    }
	    let result = [];
	    for (let i = 0; i < id.length; i += 2) {
	      result.push(parseInt(id.substring(i, 2), 16));
	    }
	    return new Uint8Array(result);
	  }
	  // endregion ////
	  // region Events.Status /////
	  /**
	   * @done
	   */
	  onOffline() {
	    this.disconnect(
	      CloseReasons.NORMAL_CLOSURE,
	      "offline"
	    );
	  }
	  /**
	   * @done
	   */
	  onOnline() {
	    this.connect().catch((error) => {
	      this.getLogger().error(error);
	    });
	  }
	  /**
	   * @done
	   * @private
	   */
	  onBeforeUnload() {
	    this._unloading = true;
	    const session = Type.clone(this.session);
	    session.ttl = (/* @__PURE__ */ new Date()).getTime() + LS_SESSION_CACHE_TIME * 1e3;
	    if (this._storage) {
	      try {
	        this._storage.set(
	          LS_SESSION,
	          JSON.stringify(session)
	          //LS_SESSION_CACHE_TIME
	        );
	      } catch (error) {
	        this.getLogger().error(`${Text.getDateForLog()}: Pull: Could not save session info in local storage. Error: `, error);
	      }
	    }
	    this.scheduleReconnect(15);
	  }
	  // endregion ////
	  // region PullStatus ////
	  /**
	   * @done
	   * @param status
	   * @param delay
	   * @private
	   */
	  sendPullStatusDelayed(status, delay) {
	    if (this._offlineTimeout) {
	      clearTimeout(this._offlineTimeout);
	      this._offlineTimeout = null;
	    }
	    this._offlineTimeout = setTimeout(
	      () => {
	        this._offlineTimeout = null;
	        this.sendPullStatus(status);
	      },
	      delay
	    );
	  }
	  /**
	   * @done
	   * @param status
	   * @private
	   */
	  sendPullStatus(status) {
	    if (this._unloading) {
	      return;
	    }
	    this.onCustomEvent("onPullStatus", [status]);
	    this.emit({
	      type: SubscriptionType.Status,
	      data: {
	        status
	      }
	    });
	  }
	  // endregion ////
	  // region _watchTagsQueue ////
	  /**
	   * @done
	   * @memo if private ?
	   * @param tagId
	   * @param force
	   */
	  extendWatch(tagId, force = false) {
	    if (this._watchTagsQueue.get(tagId)) {
	      return;
	    }
	    this._watchTagsQueue.set(tagId, true);
	    if (force) {
	      this.updateWatch(force);
	    }
	  }
	  /**
	   * @done
	   * @param force
	   * @private
	   */
	  updateWatch(force = false) {
	    if (this._watchUpdateTimeout) {
	      clearTimeout(this._watchUpdateTimeout);
	      this._watchUpdateTimeout = null;
	    }
	    this._watchUpdateTimeout = setTimeout(
	      () => {
	        const watchTags = Array.from(this._watchTagsQueue.keys());
	        if (watchTags.length > 0) {
	          this._restClient.callMethod(
	            "pull.watch.extend",
	            {
	              tags: watchTags
	            }
	          ).then((response) => {
	            const updatedTags = response.getData().result;
	            updatedTags.forEach((tagId) => this.clearWatch(tagId));
	            this.updateWatch();
	          }).catch(() => {
	            this.updateWatch();
	          });
	        } else {
	          this.updateWatch();
	        }
	      },
	      force ? this._watchForceUpdateInterval : this._watchUpdateInterval
	    );
	  }
	  /**
	   * @done
	   * @param tagId
	   * @private
	   */
	  clearWatch(tagId) {
	    this._watchTagsQueue.delete(tagId);
	  }
	  // endregion ////
	  // region Ping ////
	  /**
	   * @done
	   * @private
	   */
	  onJsonRpcPing() {
	    this.updatePingWaitTimeout();
	    this.connector?.send(
	      JSON_RPC_PONG
	    );
	  }
	  /**
	   * @done
	   * @private
	   */
	  updatePingWaitTimeout() {
	    if (this._pingWaitTimeout) {
	      clearTimeout(this._pingWaitTimeout);
	      this._pingWaitTimeout = null;
	    }
	    this._pingWaitTimeout = setTimeout(
	      this._onPingTimeoutHandler,
	      PING_TIMEOUT * 2 * 1e3
	    );
	  }
	  /**
	   * @done
	   * @private
	   */
	  clearPingWaitTimeout() {
	    if (this._pingWaitTimeout) {
	      clearTimeout(this._pingWaitTimeout);
	    }
	    this._pingWaitTimeout = null;
	  }
	  /**
	   * @done
	   * @private
	   */
	  onPingTimeout() {
	    this._pingWaitTimeout = null;
	    if (!this._enabled || !this.isConnected()) {
	      return;
	    }
	    this.getLogger().warn(`No pings are received in ${PING_TIMEOUT * 2} seconds. Reconnecting`);
	    this.disconnect(
	      CloseReasons.STUCK,
	      "connection stuck"
	    );
	    this.scheduleReconnect();
	  }
	  // endregion ////
	  // region Time ////
	  /**
	   * @done
	   * Returns reconnect delay in seconds
	   *
	   * @param attemptNumber
	   * @return {number}
	   */
	  getConnectionAttemptDelay(attemptNumber) {
	    let result;
	    if (attemptNumber < 1) {
	      result = 0.5;
	    } else if (attemptNumber < 3) {
	      result = 15;
	    } else if (attemptNumber < 5) {
	      result = 45;
	    } else if (attemptNumber < 10) {
	      result = 600;
	    } else {
	      result = 3600;
	    }
	    return result + result * Math.random() * 0.2;
	  }
	  // endregion ////
	  // region Tools ////
	  /**
	   * @done
	   * @param mid
	   */
	  checkDuplicate(mid) {
	    if (this._session.lastMessageIds.includes(mid)) {
	      this.getLogger().warn(`Duplicate message ${mid} skipped`);
	      return false;
	    } else {
	      this._session.lastMessageIds.push(mid);
	      return true;
	    }
	  }
	  /**
	   * @done
	   */
	  trimDuplicates() {
	    if (this._session.lastMessageIds.length > MAX_IDS_TO_STORE) {
	      this._session.lastMessageIds = this._session.lastMessageIds.slice(-MAX_IDS_TO_STORE);
	    }
	  }
	  // endregion ////
	  // region Logging ////
	  /**
	   * @done
	   * @param message
	   * @private
	   */
	  logMessage(message) {
	    if (!this._debug) {
	      return;
	    }
	    if (message.extra?.sender && message.extra.sender.type === SenderType.Client) {
	      this.getLogger().info(`onPullClientEvent-${message.module_id}`, message.command, message.params, message.extra);
	    } else if (message.module_id == "online") {
	      this.getLogger().info(`onPullOnlineEvent`, message.command, message.params, message.extra);
	    } else {
	      this.getLogger().info(`onPullEvent`, message.module_id, message.command, message.params, message.extra);
	    }
	  }
	  /**
	   * @done
	   * @param message
	   * @param force
	   * @private
	   */
	  logToConsole(message, force = false) {
	    if (this._loggingEnabled || force) {
	      this.getLogger().log(`${Text.getDateForLog()}: ${message}`);
	    }
	  }
	  /**
	   * @done
	   * @param message
	   * @private
	   */
	  addMessageToStat(message) {
	    if (!this._session.history[message.module_id]) {
	      this._session.history[message.module_id] = {};
	    }
	    if (!this._session.history[message.module_id][message.command]) {
	      this.session.history[message.module_id][message.command] = 0;
	    }
	    this._session.history[message.module_id][message.command]++;
	    this._session.messageCount++;
	  }
	  /**
	   * @done
	   *
	   * @param text
	   */
	  showNotification(text) {
	    this.getLogger().warn(text);
	  }
	  // endregion ////
	  // region onCustomEvent ////
	  /**
	   * @done
	   * @memo may be need use onCustomEvent
	   * @memo wtf ? force
	   */
	  onCustomEvent(eventName, data, force = false) {
	  }
	  // endregion ////
	  // region deprecated /////
	  /**
	   * @deprecated
	   */
	  /*/
	  	getRestClientOptions()
	  	{
	  		let result = {};
	  
	  		if (this.guestMode && this.guestUserId !== 0)
	  		{
	  			result.queryParams = {
	  				pull_guest_id: this.guestUserId
	  			}
	  		}
	  		return result;
	  	}
	  	//*/
	  // endregion ////
	}

	class B24HelperManager {
	  _b24;
	  _logger = null;
	  _isInit = false;
	  _profile = null;
	  _app = null;
	  _payment = null;
	  _license = null;
	  _currency = null;
	  _appOptions = null;
	  _userOptions = null;
	  _b24PullClient = null;
	  _pullClientUnSubscribe = [];
	  _pullClientModuleId = "";
	  constructor(b24) {
	    this._b24 = b24;
	    this.setLogger(this._b24.getLogger());
	  }
	  setLogger(logger) {
	    this._logger = logger;
	    if (null !== this._profile) {
	      this._profile.setLogger(this.getLogger());
	    }
	    if (null !== this._app) {
	      this._app.setLogger(this.getLogger());
	    }
	    if (null !== this._payment) {
	      this._payment.setLogger(this.getLogger());
	    }
	    if (null !== this._license) {
	      this._license.setLogger(this.getLogger());
	    }
	    if (null !== this._currency) {
	      this._currency.setLogger(this.getLogger());
	    }
	    if (null !== this._appOptions) {
	      this._appOptions.setLogger(this.getLogger());
	    }
	    if (null !== this._userOptions) {
	      this._userOptions.setLogger(this.getLogger());
	    }
	  }
	  getLogger() {
	    if (null === this._logger) {
	      this._logger = LoggerBrowser.build(`NullLogger`);
	      this._logger.setConfig({
	        [LoggerType.desktop]: false,
	        [LoggerType.log]: false,
	        [LoggerType.info]: false,
	        [LoggerType.warn]: false,
	        [LoggerType.error]: true,
	        [LoggerType.trace]: false
	      });
	    }
	    return this._logger;
	  }
	  destroy() {
	    this._destroyPullClient();
	  }
	  // region loadData ////
	  async loadData(dataTypes = [
	    LoadDataType.App,
	    LoadDataType.Profile
	  ]) {
	    const batchMethods = {
	      [LoadDataType.App]: { method: "app.info" },
	      [LoadDataType.Profile]: { method: "profile" },
	      [LoadDataType.Currency]: [{ method: "crm.currency.base.get" }, { method: "crm.currency.list" }],
	      [LoadDataType.AppOptions]: { method: "app.option.get" },
	      [LoadDataType.UserOptions]: { method: "user.option.get" }
	    };
	    const batchRequest = dataTypes.reduce((acc, type) => {
	      if (batchMethods[type]) {
	        if (Array.isArray(batchMethods[type])) {
	          batchMethods[type].forEach((row, index) => {
	            acc[`get_${type}_${index}`] = row;
	          });
	        } else {
	          acc[`get_${type}`] = batchMethods[type];
	        }
	      }
	      return acc;
	    }, {});
	    try {
	      const response = await this._b24.callBatch(batchRequest);
	      const data = response.getData();
	      if (data[`get_${LoadDataType.App}`]) {
	        this._app = await this.parseAppData(data[`get_${LoadDataType.App}`]);
	        this._payment = await this.parsePaymentData(data[`get_${LoadDataType.App}`]);
	        this._license = await this.parseLicenseData(data[`get_${LoadDataType.App}`]);
	      }
	      if (data[`get_${LoadDataType.Profile}`]) {
	        this._profile = await this.parseUserData(data[`get_${LoadDataType.Profile}`]);
	      }
	      if (data[`get_${LoadDataType.Currency}_0`] && data[`get_${LoadDataType.Currency}_1`]) {
	        this._currency = await this.parseCurrencyData({
	          currencyBase: data[`get_${LoadDataType.Currency}_0`],
	          currencyList: data[`get_${LoadDataType.Currency}_1`]
	        });
	      }
	      if (data[`get_${LoadDataType.AppOptions}`]) {
	        this._appOptions = await this.parseOptionsData("app", data[`get_${LoadDataType.AppOptions}`]);
	      }
	      if (data[`get_${LoadDataType.UserOptions}`]) {
	        this._userOptions = await this.parseOptionsData("user", data[`get_${LoadDataType.UserOptions}`]);
	      }
	      this._isInit = true;
	    } catch (error) {
	      if (error instanceof Error) {
	        throw error;
	      }
	      console.error("Error loading data:", error);
	      throw new Error("Failed to load data");
	    }
	  }
	  async parseUserData(profileData) {
	    const manager = new ProfileManager(this._b24);
	    manager.setLogger(this.getLogger());
	    return manager.initData({
	      id: Number(profileData.ID),
	      isAdmin: profileData.ADMIN === true,
	      lastName: profileData?.LAST_NAME || "",
	      name: profileData?.NAME || "",
	      gender: profileData?.PERSONAL_GENDER || "",
	      photo: profileData?.PERSONAL_PHOTO || "",
	      TimeZone: profileData?.TIME_ZONE || "",
	      TimeZoneOffset: profileData?.TIME_ZONE_OFFSET
	    }).then(() => {
	      return manager;
	    });
	  }
	  async parseAppData(appData) {
	    const manager = new AppManager(this._b24);
	    manager.setLogger(this.getLogger());
	    return manager.initData({
	      id: parseInt(appData.ID),
	      code: appData.CODE,
	      version: parseInt(appData.VERSION),
	      status: appData.STATUS,
	      isInstalled: appData.INSTALLED
	    }).then(() => {
	      return manager;
	    });
	  }
	  async parsePaymentData(appData) {
	    const manager = new PaymentManager(this._b24);
	    manager.setLogger(this.getLogger());
	    return manager.initData({
	      isExpired: appData.PAYMENT_EXPIRED === "Y",
	      days: parseInt(appData.DAYS || "0")
	    }).then(() => {
	      return manager;
	    });
	  }
	  async parseLicenseData(appData) {
	    const manager = new LicenseManager(this._b24);
	    manager.setLogger(this.getLogger());
	    return manager.initData({
	      languageId: appData.LANGUAGE_ID,
	      license: appData.LICENSE,
	      licensePrevious: appData.LICENSE_PREVIOUS,
	      licenseType: appData.LICENSE_TYPE,
	      licenseFamily: appData.LICENSE_FAMILY,
	      isSelfHosted: appData.LICENSE.includes("selfhosted")
	    }).then(() => {
	      return manager;
	    });
	  }
	  async parseCurrencyData(currencyData) {
	    const manager = new CurrencyManager(this._b24);
	    manager.setLogger(this.getLogger());
	    return manager.initData(currencyData).then(() => {
	      return manager;
	    });
	  }
	  async parseOptionsData(type, optionsData) {
	    const manager = new OptionsManager(this._b24, type);
	    manager.setLogger(this.getLogger());
	    return manager.initData(optionsData).then(() => {
	      return manager;
	    });
	  }
	  // endregion ////
	  // region Get ////
	  get isInit() {
	    return this._isInit;
	  }
	  get forB24Form() {
	    this.ensureInitialized();
	    if (null === this._profile) {
	      throw new Error("B24HelperManager.profileInfo not initialized");
	    }
	    if (null === this._app) {
	      throw new Error("B24HelperManager.appInfo not initialized");
	    }
	    return {
	      app_code: this.appInfo.data.code,
	      app_status: this.appInfo.data.status,
	      payment_expired: this.paymentInfo.data.isExpired ? "Y" : "N",
	      days: this.paymentInfo.data.days,
	      b24_plan: this.licenseInfo.data.license,
	      c_name: this.profileInfo.data.name,
	      c_last_name: this.profileInfo.data.lastName,
	      hostname: this.hostName
	    };
	  }
	  /**
	   * Get the account address BX24 ( https://name.bitrix24.com )
	   */
	  get hostName() {
	    return this._b24.getTargetOrigin();
	  }
	  get profileInfo() {
	    this.ensureInitialized();
	    if (null === this._profile) {
	      throw new Error("B24HelperManager.profileInfo not initialized");
	    }
	    return this._profile;
	  }
	  get appInfo() {
	    this.ensureInitialized();
	    if (null === this._app) {
	      throw new Error("B24HelperManager.appInfo not initialized");
	    }
	    return this._app;
	  }
	  get paymentInfo() {
	    this.ensureInitialized();
	    if (null === this._payment) {
	      throw new Error("B24HelperManager.paymentInfo not initialized");
	    }
	    return this._payment;
	  }
	  get licenseInfo() {
	    this.ensureInitialized();
	    if (null === this._license) {
	      throw new Error("B24HelperManager.licenseInfo not initialized");
	    }
	    return this._license;
	  }
	  get currency() {
	    this.ensureInitialized();
	    if (null === this._currency) {
	      throw new Error("B24HelperManager.currency not initialized");
	    }
	    return this._currency;
	  }
	  get appOptions() {
	    this.ensureInitialized();
	    if (null === this._appOptions) {
	      throw new Error("B24HelperManager.appOptions not initialized");
	    }
	    return this._appOptions;
	  }
	  get userOptions() {
	    this.ensureInitialized();
	    if (null === this._userOptions) {
	      throw new Error("B24HelperManager.userOptions not initialized");
	    }
	    return this._userOptions;
	  }
	  // endregion ////
	  // region Custom SelfHosted && Cloud ////
	  get isSelfHosted() {
	    return this.licenseInfo.data.isSelfHosted;
	  }
	  /**
	   * Returns the increment step of fields of type ID
	   * @memo in cloud step = 2 in box step = 1
	   *
	   * @returns {number}
	   */
	  get primaryKeyIncrementValue() {
	    if (this.isSelfHosted) {
	      return 1;
	    }
	    return 2;
	  }
	  /**
	   * Defines specific URLs for a Bitrix24 box or cloud
	   */
	  get b24SpecificUrl() {
	    if (this.isSelfHosted) {
	      return {
	        [TypeSpecificUrl.MainSettings]: "/configs/",
	        [TypeSpecificUrl.UfList]: "/configs/userfield_list.php",
	        [TypeSpecificUrl.UfPage]: "/configs/userfield.php"
	      };
	    }
	    return {
	      [TypeSpecificUrl.MainSettings]: "/settings/configs/",
	      [TypeSpecificUrl.UfList]: "/settings/configs/userfield_list.php",
	      [TypeSpecificUrl.UfPage]: "/settings/configs/userfield.php"
	    };
	  }
	  // endregion ////
	  // region Pull.Client ////
	  usePullClient(prefix = "prefix", userId) {
	    if (this._b24PullClient) {
	      return this;
	    }
	    this.initializePullClient(
	      typeof userId === "undefined" ? this.profileInfo.data.id || 0 : userId,
	      prefix
	    );
	    return this;
	  }
	  initializePullClient(userId, prefix = "prefix") {
	    this._b24PullClient = new PullClient({
	      b24: this._b24,
	      restApplication: this._b24.auth.getUniq(prefix),
	      userId
	    });
	  }
	  subscribePullClient(callback, moduleId = "application") {
	    if (!this._b24PullClient) {
	      throw new Error("PullClient not init");
	    }
	    this._pullClientModuleId = moduleId;
	    this._pullClientUnSubscribe.push(
	      this._b24PullClient.subscribe({
	        moduleId: this._pullClientModuleId,
	        callback
	      })
	    );
	    return this;
	  }
	  startPullClient() {
	    if (!this._b24PullClient) {
	      throw new Error("PullClient not init");
	    }
	    this._b24PullClient.start().catch((error) => {
	      this.getLogger().error(`${Text.getDateForLog()}: Pull not running`, error);
	    });
	  }
	  getModuleIdPullClient() {
	    if (!this._b24PullClient) {
	      throw new Error("PullClient not init");
	    }
	    return this._pullClientModuleId;
	  }
	  _destroyPullClient() {
	    this._pullClientUnSubscribe.forEach(
	      (unsubscribeCallback) => unsubscribeCallback()
	    );
	    this._b24PullClient?.destroy();
	    this._b24PullClient = null;
	  }
	  // endregion ////
	  // region Tools ////
	  ensureInitialized() {
	    if (!this._isInit) {
	      throw new Error("B24HelperManager not initialized");
	    }
	  }
	  // endregion ////
	}

	const useB24Helper = () => {
	  let $isInitB24Helper = false;
	  let $isInitPullClient = false;
	  let $b24Helper = null;
	  const initB24Helper = async ($b24, dataTypes = [
	    LoadDataType.App,
	    LoadDataType.Profile
	  ]) => {
	    if (null === $b24Helper) {
	      $b24Helper = new B24HelperManager($b24);
	    }
	    if ($isInitB24Helper) {
	      return $b24Helper;
	    }
	    return $b24Helper.loadData(dataTypes).then(() => {
	      $isInitB24Helper = true;
	      return $b24Helper;
	    });
	  };
	  const destroyB24Helper = () => {
	    $b24Helper?.destroy();
	    $b24Helper = null;
	    $isInitB24Helper = false;
	    $isInitPullClient = false;
	  };
	  const isInitB24Helper = () => {
	    return $isInitB24Helper;
	  };
	  const getB24Helper = () => {
	    if (null === $b24Helper) {
	      throw new Error("B24HelperManager is not initialized. You need to call initB24Helper first.");
	    }
	    return $b24Helper;
	  };
	  const usePullClient = () => {
	    if (null === $b24Helper) {
	      throw new Error("B24HelperManager is not initialized. You need to call initB24Helper first.");
	    }
	    $b24Helper.usePullClient();
	    $isInitPullClient = true;
	  };
	  const useSubscribePullClient = (callback, moduleId = "application") => {
	    if (!$isInitPullClient) {
	      throw new Error("PullClient is not initialized. You need to call usePullClient first.");
	    }
	    $b24Helper?.subscribePullClient(callback, moduleId);
	  };
	  const startPullClient = () => {
	    if (!$isInitPullClient) {
	      throw new Error("PullClient is not initialized. You need to call usePullClient first.");
	    }
	    $b24Helper?.startPullClient();
	  };
	  return {
	    initB24Helper,
	    isInitB24Helper,
	    destroyB24Helper,
	    getB24Helper,
	    usePullClient,
	    useSubscribePullClient,
	    startPullClient
	  };
	};

	const delay = 50;
	let $b24Frame = null;
	let isInit = false;
	let connectError = null;
	let isMakeFirstCall = false;
	let listCallBack = [];
	let isStartWatch = false;
	function startWatch() {
	  window.setTimeout(() => {
	    if (!isInit || $b24Frame === null) {
	      startWatch();
	      return;
	    }
	    processResult();
	    listCallBack = [];
	  }, delay);
	}
	function processResult() {
	  if (null !== connectError) {
	    listCallBack.forEach((callBack) => {
	      callBack.reject(connectError);
	    });
	  }
	  if (!isInit || $b24Frame === null) {
	    return;
	  }
	  listCallBack.forEach((callBack) => {
	    callBack.resolve($b24Frame);
	  });
	}
	async function initializeB24Frame() {
	  if (isInit && null !== $b24Frame) {
	    return Promise.resolve($b24Frame);
	  }
	  if (isMakeFirstCall) {
	    if (!isStartWatch) {
	      isStartWatch = true;
	      startWatch();
	    }
	    return new Promise((resolve, reject) => {
	      listCallBack.push({
	        resolve,
	        reject
	      });
	    });
	  }
	  isMakeFirstCall = true;
	  return new Promise((resolve, reject) => {
	    const queryParams = {
	      DOMAIN: null,
	      PROTOCOL: false,
	      APP_SID: null,
	      LANG: null
	    };
	    if (!!window.name) {
	      const [domain, protocol, appSid] = window.name.split("|");
	      queryParams.DOMAIN = domain;
	      queryParams.PROTOCOL = parseInt(protocol) === 1;
	      queryParams.APP_SID = appSid;
	      queryParams.LANG = null;
	    }
	    if (!queryParams.DOMAIN || !queryParams.APP_SID) {
	      connectError = new Error("Unable to initialize Bitrix24Frame library!");
	      reject(connectError);
	    }
	    $b24Frame = new B24Frame(queryParams);
	    $b24Frame.init().then(() => {
	      isInit = true;
	      resolve($b24Frame);
	    }).catch((error) => {
	      connectError = error;
	      reject(connectError);
	    });
	  });
	}

	exports.AbstractB24 = AbstractB24;
	exports.AjaxError = AjaxError;
	exports.AjaxResult = AjaxResult;
	exports.AppFrame = AppFrame;
	exports.AuthHookManager = AuthHookManager;
	exports.AuthManager = AuthManager;
	exports.B24Frame = B24Frame;
	exports.B24Hook = B24Hook;
	exports.B24LangList = B24LangList;
	exports.B24PullClientManager = PullClient;
	exports.Browser = Browser;
	exports.CloseReasons = CloseReasons;
	exports.ConnectionType = ConnectionType;
	exports.DataType = DataType;
	exports.DialogManager = DialogManager;
	exports.EnumAppStatus = EnumAppStatus;
	exports.EnumCrmEntityType = EnumCrmEntityType;
	exports.EnumCrmEntityTypeId = EnumCrmEntityTypeId;
	exports.ListRpcError = ListRpcError;
	exports.LoadDataType = LoadDataType;
	exports.LoggerBrowser = LoggerBrowser;
	exports.LoggerType = LoggerType;
	exports.LsKeys = LsKeys;
	exports.MessageCommands = MessageCommands;
	exports.MessageManager = MessageManager;
	exports.OptionsManager = OptionsManager$1;
	exports.ParentManager = ParentManager;
	exports.PlacementManager = PlacementManager;
	exports.PullStatus = PullStatus;
	exports.RestrictionManagerParamsBase = RestrictionManagerParamsBase;
	exports.RestrictionManagerParamsForEnterprise = RestrictionManagerParamsForEnterprise;
	exports.Result = Result;
	exports.RpcMethod = RpcMethod;
	exports.SenderType = SenderType;
	exports.ServerMode = ServerMode;
	exports.SliderManager = SliderManager;
	exports.StatusDescriptions = StatusDescriptions;
	exports.SubscriptionType = SubscriptionType;
	exports.SystemCommands = SystemCommands;
	exports.Text = Text;
	exports.Type = Type;
	exports.TypeOption = TypeOption;
	exports.TypeSpecificUrl = TypeSpecificUrl;
	exports.initializeB24Frame = initializeB24Frame;
	exports.useB24Helper = useB24Helper;
	exports.useFormatter = useFormatter;

}));
//# sourceMappingURL=index.js.map
